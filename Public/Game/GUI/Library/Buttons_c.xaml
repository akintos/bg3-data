<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
					mc:Ignorable="d">
    <!-- Generic Button -->
    <ControlTemplate x:Key="ButtonTemplate" TargetType="ls:LSButton">
        <Image x:Name="img" Source="{DynamicResource ButtonNormal}" Stretch="None"/>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="{DynamicResource ButtonHighlight}" TargetName="img"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Source" Value="{DynamicResource ButtonPressed}" TargetName="img"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Source" Value="{DynamicResource ButtonDisabled}" TargetName="img"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Base Button -->
    <ControlTemplate x:Key="BaseButtonTemplate" TargetType="ls:LSButton">
	    <ControlTemplate.Resources>
		    <Thickness x:Key="Slices">68,0</Thickness>
	    </ControlTemplate.Resources>
	    <ls:LSNineSliceImage x:Name="img" ImageSource="{TemplateBinding ls:ButtonHelper.ImageSource}" Slices="{DynamicResource Slices}" MinHeight="{Binding Path=ImageSource.Height, RelativeSource={RelativeSource Self}}" MinWidth="{Binding Path=ImageSource.Width, RelativeSource={RelativeSource Self}}" Width="{TemplateBinding Width}" HorizontalAlignment="Center" VerticalAlignment="Center" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" Padding="{TemplateBinding Padding}">
		    <ContentPresenter x:Name="cnt"  />
	    </ls:LSNineSliceImage>
    </ControlTemplate>

    <Style x:Key="BaseButtonStyle" TargetType="{x:Type ls:LSButton}">
	    <Setter Property="HorizontalContentAlignment" Value="Center" />
	    <Setter Property="VerticalContentAlignment" Value="Center" />
	    <Setter Property="Template" Value="{StaticResource BaseButtonTemplate}"/>
	    <Setter Property="FontSize" Value="{StaticResource ScaledMediumFontSize}"/>
	    <Setter Property="Foreground" Value="{StaticResource LS_tint100}"/>
	    <Setter Property="SoundID" Value="UI_HUD_Shared"/>
	    <Setter Property="Padding" Value="0,0,0,0" />
	    <Style.Triggers>
		    <Trigger Property="IsPressed" Value="True">
			    <Setter Property="Padding" Value="0,8,0,0" />
		    </Trigger>
		    <Trigger Property="IsEnabled" Value="False">
			    <Setter Property="Foreground" Value="{StaticResource LS_PrimaryColorDisabled}" />
		    </Trigger>
	    </Style.Triggers>
    </Style>

    <Style x:Key="TickBox" TargetType="{x:Type ls:LSTickBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ls:LSTickBox">
                    <StackPanel Orientation="Horizontal">
                        <Image x:Name="prevImg" HorizontalAlignment="Left" VerticalAlignment="Center" Stretch="None" 
                               Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_carousel_arrow.png">
                            <Image.RenderTransform>
                                <ScaleTransform ScaleX="-1" CenterX="40"/>
                            </Image.RenderTransform>
                        </Image>
                        <TextBlock x:Name="text" VerticalAlignment="Center" HorizontalAlignment="Center" Width="500" TextAlignment="Center"
                                Text="{Binding Source='h17adc2cag3b1ag4711ga651g7d123440625c', Converter={StaticResource TranslatedStringConverter}}" 
                                Foreground="{DynamicResource LS_specialTxtColor}" FontSize="{DynamicResource DefaultFontSize}"
                                IsHitTestVisible="False"/>
                        <Image x:Name="nextImg" HorizontalAlignment="Right" VerticalAlignment="Center" Stretch="None" 
                               Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_carousel_arrow.png"/>
                    </StackPanel>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="text" Property="Text" Value="{Binding Source='hc358d80cga01ag4497gafd6gf7e066081f3e', Converter={StaticResource TranslatedStringConverter}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- Red Button -->
    <ControlTemplate x:Key="RedButton" TargetType="Button">
        <Grid Width="221" Height="37" ClipToBounds="True">
            <Image x:Name="img" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_red_d.png" Stretch="None" />
            <TextBlock x:Name="txt" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" Text="{Binding Name, Converter={StaticResource StringToUpperConverter}}" Background="Transparent" Foreground="{DynamicResource LS_PrimaryColor}" FontSize="16"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_red_h.png" TargetName="img"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_red_p.png" TargetName="img"/>
                <Setter Property="Margin" Value="0,3,0,0" TargetName="txt"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_red_disabled.png" TargetName="img"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Blue Button -->
    <ControlTemplate x:Key="BlueButton" TargetType="Button">
        <Grid Width="221" Height="37" ClipToBounds="True">
            <Image x:Name="img" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_blue_d.png" Stretch="None" />
            <TextBlock x:Name="txt" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,0" Text="{Binding Name, Converter={StaticResource StringToUpperConverter}}" Background="Transparent" Foreground="{DynamicResource LS_PrimaryColor}" FontSize="16"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_blue_h.png" TargetName="img"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_blue_p.png" TargetName="img"/>
                <Setter Property="Margin" Value="0,3,0,0" TargetName="txt"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_blue_disabled.png" TargetName="img"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <!-- Brown Button -->
    <Style x:Key="BrownButtonStyle" TargetType="Button">
        <Setter Property="Width" Value="200" />
        <Setter Property="Height" Value="36" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="img" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_slim_brown_d.png" />
                        <TextBlock x:Name="txt" HorizontalAlignment="Center" VerticalAlignment="Center" Text="{Binding Path=Content , RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Button}}}" Background="Transparent" Foreground="{DynamicResource LS_PrimaryColor}" FontSize="{DynamicResource MediumFontSize}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_slim_brown_h.png" TargetName="img"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_slim_brown_p.png" TargetName="img"/>
                            <Setter Property="Margin" Value="0,4,0,0" TargetName="txt"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_slim_brown_d.png" TargetName="img"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- up button -->
    <Style x:Key="UpButton" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="img" Margin="-1,-1,-1,-1" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/hotbar_up_d.png" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/hotbar_up_h.png" TargetName="img"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/hotbar_up_p.png" TargetName="img"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/hotbar_up_disabled.png" TargetName="img"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- down button -->
    <Style x:Key="DownButton" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <Image x:Name="img" Margin="-1,-1,-1,-1" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/hotbar_down_d.png" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/hotbar_down_h.png" TargetName="img"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/hotbar_down_p.png" TargetName="img"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/hotbar_down_disabled.png" TargetName="img"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--Inventory View Tabs BEGIN -->
    <!--Icon for inventoryView tab-->
    <Style x:Key="InvViewTabIcon"  TargetType="{x:Type Image}">
        <Setter Property="ToolTip" Value="{Binding Name}" />
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_tab_special.png" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding EnumId}" Value="All">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_tab_all.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding EnumId}" Value="Equipment">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_tab_EQ.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding EnumId}" Value="KeysAndBooks">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_tab_lit.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding EnumId}" Value="Magical">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_tab_magic.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding EnumId}" Value="Ingredients">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_tab_mats.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding EnumId}" Value="Consumables">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_tab_pots.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding EnumId}" Value="Wares">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_tab_wares.png" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--Icon for selected inventoryView tab-->
    <Style x:Key="SelectedInvViewTabIcon"  TargetType="{x:Type Image}">
        <Setter Property="ToolTip" Value="{Binding Name}" />
        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_tab_special_active.png" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding EnumId}" Value="All">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_tab_all_active.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding EnumId}" Value="Equipment">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_tab_EQ_active.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding EnumId}" Value="KeysAndBooks">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_tab_lit_active.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding EnumId}" Value="Magical">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_tab_magic_active.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding EnumId}" Value="Ingredients">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_tab_mats_active.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding EnumId}" Value="Consumables">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_tab_pots_active.png" />
            </DataTrigger>
            <DataTrigger Binding="{Binding EnumId}" Value="Wares">
                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_tab_wares_active.png" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!--style for inventoryView Tab-->
    <DataTemplate x:Key="InvViewTabTemplate" >
        <Grid x:Name="tabBtn" Background="Transparent" Width="{DynamicResource FilterSlotSize}" Height="{DynamicResource FilterSlotSize}">
            <Image Stretch="UniformToFill" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_inventoryFilter_inactive_h.png"/>
            <Image Stretch="None" Style="{StaticResource InvViewTabIcon}"/>
        </Grid>
    </DataTemplate>

    <!--style for selected inventoryView Tab-->
    <DataTemplate x:Key="SelectedInvViewTabTemplate" >
        <Grid x:Name="tabBtn" Background="Transparent" Width="{DynamicResource FilterSlotSize}" Height="{DynamicResource FilterSlotSize}">
            <Image Stretch="UniformToFill" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/Btn_inventoryFilter_active_h.png"/>
            <Image Stretch="None" Style="{StaticResource SelectedInvViewTabIcon}"/>
        </Grid>
    </DataTemplate>

    <!--style for inventoryView list-->
    <Style x:Key="InventoryViewTabStyle" TargetType="{x:Type ListBoxItem}"  BasedOn="{StaticResource {x:Type ListBoxItem}}">
        <Setter Property="ContentTemplate" Value="{StaticResource InvViewTabTemplate}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Padding" Value="0" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="Margin" Value="0 0 6 0"/>
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="ContentTemplate" Value="{StaticResource SelectedInvViewTabTemplate}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="Transparent" />
                <Setter Property="BorderThickness" Value="0"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!--Inventory View Tabs END -->

    <!-- Generic Button with Icon -->
    <ControlTemplate x:Key="IconButtonTemplate" TargetType="ls:LSButton">
        <Grid>
            <Image x:Name="img" Source="{DynamicResource ButtonNormal}" Stretch="None"/>
            <Image x:Name="icon" Margin="0,0,0,0"  HorizontalAlignment="Center" VerticalAlignment="Center" Source="{DynamicResource IconNormal}" Stretch="None"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Source" Value="{DynamicResource ButtonHighlight}" TargetName="img"/>
                <Setter Property="Source" Value="{DynamicResource IconHighlight}" TargetName="icon"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Source" Value="{DynamicResource ButtonPressed}" TargetName="img"/>
                <Setter Property="Source" Value="{DynamicResource IconPressed}" TargetName="icon"/>
                <Setter Property="Margin" Value="0,6,0,0" TargetName="icon"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Source" Value="{DynamicResource ButtonDisabled}" TargetName="img"/>
                <Setter Property="Source" Value="{DynamicResource IconDisabled}" TargetName="icon"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Hold to X button animation -->
    <Storyboard x:Key="ControllerButtonHoldAnimation">
        <!-- Adding a delay of 0.5s so we're sure we're holding (and not tapping when pressing A to use)-->
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(ls:LSPie.Value)" Storyboard.TargetName="ButtonHoldVisualizer" BeginTime="0:0:0.5">
            <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
            <EasingDoubleKeyFrame KeyTime="0:0:1" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

</ResourceDictionary>