<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
                    xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
					mc:Ignorable="d">

    <System:Double x:Key="BackgroundGoalSpeedRatio">0.7</System:Double>

    <BitmapImage x:Key="IconHourglassActive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_hourglass_active.png" />
    
    <Style x:Key="GenericNotification9Slice" TargetType="ls:LSNineSliceImage" BasedOn="{StaticResource {x:Type ls:LSNineSliceImage}}">
        <Setter Property="Slices" Value="64,72,64,72"/>
        <Setter Property="Padding" Value="100,60,100,60"/>
        <Setter Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/notificationGeneric.png"/>
        <Setter Property="IconWidth" Value="72"/>
    </Style>

    <Style x:Key="NotificationTitleTextStyle" TargetType="TextBlock">
        <Setter Property="Margin" Value="0,0,4,0"/>
        <Setter Property="FontSize" Value="{DynamicResource LargeFontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource LS_NotificationTextColor}"/>
        <Setter Property="FontWeight" Value="Normal"/>
        <Setter Property="LineStackingStrategy" Value="BlockLineHeight"/>
        <Setter Property="LineHeight" Value="{StaticResource LargeFontSizeLineHeight}"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
    </Style>

    <Style x:Key="DialogueNotificationTextStyle" TargetType="TextBlock" BasedOn="{StaticResource NotificationTitleTextStyle}">
        <Setter Property="Foreground" Value="{StaticResource LS_tint100}"/>
        <Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_tint00}"/>
        <Setter Property="noesis:Text.StrokeThickness" Value="4"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Effect" Value="{StaticResource HUD.DropShadow}"/>
    </Style>
    
    <Style x:Key="NotificationContentTextStyle" TargetType="TextBlock">
        <Setter Property="FontSize" Value="{DynamicResource MediumFontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource LS_NotificationTextColor}"/>
        <Setter Property="FontWeight" Value="Normal"/>
    </Style>

    <Style x:Key="NotificationItemTextStyle" TargetType="TextBlock" BasedOn="{StaticResource NotificationTitleTextStyle}">
        <Setter Property="Foreground" Value="{StaticResource LS_NotificationTextContentColor}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ItemRarity}" Value="Uncommon">
                <Setter Property="Foreground" Value="{StaticResource ItemRarityColour.Uncommon}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ItemRarity}" Value="Rare">
                <Setter Property="Foreground" Value="{StaticResource ItemRarityColour.Rare}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ItemRarity}" Value="VeryRare">
                <Setter Property="Foreground" Value="{StaticResource ItemRarityColour.VeryRare}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding ItemRarity}" Value="Legendary">
                <Setter Property="Foreground" Value="{StaticResource ItemRarityColour.Legendary}" />
            </DataTrigger>
            <DataTrigger Binding="{Binding IsStoryItem}" Value="True">
                <Setter Property="Foreground" Value="{DynamicResource LS_storyColor}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="NotificationPressToViewTextStyle" TargetType="TextBlock">
        <Setter Property="Margin" Value="0,0,12,0"/>
        <Setter Property="FontSize" Value="{DynamicResource SmallFontSize}"/>
        <Setter Property="Foreground" Value="{DynamicResource LS_NotificationShortcutTextColor}"/>
        <Setter Property="FontWeight" Value="Normal"/>
    </Style>

    <Style x:Key="NotificationShortcutTextStyle" TargetType="TextBlock" BasedOn="{StaticResource NotificationPressToViewTextStyle}">
        <Setter Property="Foreground" Value="{DynamicResource LS_NotificationShortcutTextColor}"/>
    </Style>

    <Style x:Key="NotificationFooterIconStyle" TargetType="Image">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="Margin" Value="0,0,0,24"/>
        <Setter Property="Stretch" Value="None"/>
        <Setter Property="Source" Value="{DynamicResource FooterIcon}"/>
    </Style>

    <Storyboard x:Key="CombatNotificationsStoryboard">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
            <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
            <LinearDoubleKeyFrame KeyTime="0:0:0.1" Value="1" />
            <LinearDoubleKeyFrame KeyTime="0:0:2.2" Value="1" />
            <LinearDoubleKeyFrame KeyTime="0:0:2.4" Value="0" />
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleX)">
            <EasingDoubleKeyFrame KeyTime="0:0:0" Value="2" />
            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1" >
                <EasingDoubleKeyFrame.EasingFunction>
                    <CubicEase EasingMode="EaseOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(ScaleTransform.ScaleY)">
            <EasingDoubleKeyFrame KeyTime="0:0:0" Value="2" />
            <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1" >
                <EasingDoubleKeyFrame.EasingFunction>
                    <CubicEase EasingMode="EaseOut"/>
                </EasingDoubleKeyFrame.EasingFunction>
            </EasingDoubleKeyFrame>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <ControlTemplate x:Key="PollNotification">
        <Grid>
            <Grid Width="{Binding ActualWidth, ElementName=Content, Converter={StaticResource AddConverter}, ConverterParameter='100'}" MinWidth="1280">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition Width="Auto"/>
                </Grid.ColumnDefinitions>

                <Image Stretch="None" Grid.Column="0" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CommunityPoll/message_side.png"/>
                <Image Stretch="Fill" Grid.Column="1" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CommunityPoll/message_tile.png" Height="170"/>
                <Image Stretch="None" Grid.Column="2" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CommunityPoll/message_center.png" VerticalAlignment="Top" Margin="0,14,0,0"/>
                <Image Stretch="Fill" Grid.Column="3" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/CommunityPoll/message_tile.png" Height="170"/>
                <Rectangle Grid.Column="4" Width="592">
                    <Rectangle.Fill>
                        <ImageBrush Stretch="None" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CommunityPoll/message_side.png">
                            <ImageBrush.RelativeTransform>
                                <ScaleTransform ScaleX="-1" CenterX="0.5"/>
                            </ImageBrush.RelativeTransform>
                        </ImageBrush>
                    </Rectangle.Fill>
                </Rectangle>
            </Grid>
            <ContentPresenter x:Name="Content" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="IconNotificationTemplate">
        <Grid>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding Type}" Operator="Equal" RightOperand="NewSpell"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <ls:LSPlaySound Sound="UI_HUD_Spell_Learnt"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>
            <ls:LSNineSliceImage x:Name="Notification" Slices="64,160,64,140" MinWidth="856" IconWidth="448" Padding="68,36,68,0" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/notificationSkill.png">
                <Grid>
                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                        <Grid Height="80" Width="80" VerticalAlignment="Top" HorizontalAlignment="Center" >
                            <Rectangle Fill="{DynamicResource LS_ItemIconBackgroundColor}"/>
                            <Rectangle x:Name="Icon" Fill="{Binding Icon}" Visibility="{Binding Visibility, ElementName=GenericIcon, Converter={StaticResource InvertVisibilityConverter}}"/>
                            <Image x:Name="GenericIcon" Visibility="Collapsed"/>
                        </Grid>
                        <StackPanel x:Name="Content" HorizontalAlignment="Center" Margin="0,40,0,100">
                            <StackPanel HorizontalAlignment="Center" Orientation="Horizontal">
                                <TextBlock x:Name="Title" Text="{Binding Title , StringFormat='{}{0}:'}" Style="{StaticResource NotificationTitleTextStyle}"/>
                                <TextBlock x:Name="Message" Text="{Binding Message.Text}" Style="{StaticResource NotificationItemTextStyle}"/>
                            </StackPanel>
                            <TextBlock x:Name="dummyText" Text="{Binding Shortcut}" DataContext="{Binding DataContext.CurrentPlayer.UIData.InputEvents,  RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},  Converter={StaticResource FindInputEventConverter},  ConverterParameter='ToggleInventory'}" Visibility="Collapsed"/>
                            <TextBlock x:Name="KeyboardText" HorizontalAlignment="Center" Margin="0,12,0,0" Visibility="Collapsed" Style="{StaticResource NotificationPressToViewTextStyle}">
                                <TextBlock.Text>
                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                        <Binding Source="hdc536834g65bbg40d1ga462gf8b1d43b6753"/>
                                        <Binding Path="Text" ElementName="dummyText"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                            <TextBlock x:Name="ControllerText" HorizontalAlignment="Center" Margin="0,12,0,0" Style="{StaticResource NotificationPressToViewTextStyle}" Visibility="{Binding Visibility, ElementName=KeyboardText, Converter={StaticResource InvertVisibilityConverter}}" Text="{Binding Source='hea4bd53bg2937g4e35gbe00gfb83c7ec7d8b', Converter={StaticResource TranslatedStringConverter}}"/>
                        </StackPanel>

                    </StackPanel>

                    <Image x:Name="FooterIcon" Style="{StaticResource NotificationFooterIconStyle}" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_inventory_d.png"/>
                </Grid>
            </ls:LSNineSliceImage>

            <ls:LSInputBinding x:Name="DismissKeybind" PlayerId="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" BoundEvent="ToggleInventory" Command="{Binding Path=DataContext.DismissNotificationByType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Type}" Visibility="Collapsed">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="LSInputBindingPressed">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Type}" Operator="Equal" RightOperand="RecipesUnlocked"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:InvokeCommandAction Command="{Binding DataContext.CustomEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="OpenAlchemyPanel"/>
                    </b:EventTrigger>
                    <b:EventTrigger EventName="LSInputBindingPressed">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Type}" Operator="Equal" RightOperand="NewItem"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:InvokeCommandAction Command="{Binding DataContext.CustomEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="OpenInventory"/>
                    </b:EventTrigger>
                    <b:EventTrigger EventName="LSInputBindingPressed">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Type}" Operator="Equal" RightOperand="NewSpell"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:InvokeCommandAction Command="{Binding DataContext.CustomEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="OpenSpellbook"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </ls:LSInputBinding>
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Type}" Value="RecipesUnlocked">
                <Setter TargetName="Title" Property="Text" Value="{Binding Source='h1fd1310fgafc8g43d6g8680gf7f288ea36d7', Converter={StaticResource TranslatedStringConverter}, StringFormat='{}{0}:'}"/>
                <Setter TargetName="FooterIcon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Alchemy/ico_alchemy.png"/>
                <Setter TargetName="FooterIcon" Property="Height" Value="52"/>
                <Setter TargetName="FooterIcon" Property="Stretch" Value="Uniform"/>
                <Setter TargetName="ControllerText" Property="Text" Value="{Binding Source='hc33405e2gd336g400agb2f3gcf9cdf221d2a', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="DismissKeybind" Property="BoundEvent" Value="UIToggleAlchemy"/>
                <Setter TargetName="dummyText" Property="DataContext" Value="{Binding DataContext.CurrentPlayer.UIData.InputEvents,  RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},  Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIToggleAlchemy'}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="RecipesUnlocked"/>
                    <Condition Binding="{Binding Amount, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="Title" Property="Text">
                    <Setter.Value>
                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                            <Binding Source="he761c014gac57g4769gb98dgae474be10f6c"/>
                            <Binding Path="Amount"/>
                        </MultiBinding>
                    </Setter.Value>
                </Setter>
                <Setter TargetName="Message" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="GenericIcon" Property="Visibility" Value="Visible"/>
                <Setter TargetName="GenericIcon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_chalice.png"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Type}" Value="NewSpell">
                <Setter TargetName="FooterIcon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_spells_d.png"/>
                <Setter TargetName="ControllerText" Property="Text" Value="{Binding Source='h8a893051gb817g4a6dgaaf1gc118357d8ce4', Converter={StaticResource TranslatedStringConverter}}"/>
                <Setter TargetName="DismissKeybind" Property="BoundEvent" Value="ToggleSpells"/>
                <Setter TargetName="dummyText" Property="DataContext" Value="{Binding DataContext.CurrentPlayer.UIData.InputEvents,  RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},  Converter={StaticResource FindInputEventConverter}, ConverterParameter='ToggleSpells'}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Keyboard">
                <Setter TargetName="KeyboardText" Property="Visibility" Value="Visible"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="ProgressBarNotificationTemplate">
        <Grid>
            <Grid Margin="0,98,0,0" VerticalAlignment="Top">
                <Image  Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/notification_progress_bar_bg.png"/>
                <ls:LSProgressBar Width="696" Height="24"  Minimum="0" Maximum="1" Value="{Binding Progress, Mode=OneWay}"  Foreground="{DynamicResource ProgressionBarColor}" Background="Transparent" BorderBrush="Transparent"/>
            </Grid>
            <Image Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/notification_progress_bg.png"/>
            <TextBlock VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0,44,0,0"  ls:TextBlockFormatter.SourceText="{Binding Message.Text}" Style="{StaticResource NotificationTitleTextStyle}"/>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="LockPickNotificationTemplate">
        <Grid>
            <Control Template="{StaticResource ProgressBarNotificationTemplate}"/>
        </Grid>
    </ControlTemplate>

    <!-- Template for New Region Notifications -->
    <ControlTemplate x:Key="RegionNotificationTemplate">
        <ControlTemplate.Resources>
            <BitmapImage x:Key="Background" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/notification_location_bg.png"/>
            <BitmapImage x:Key="Icon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_map_d.png"/>
        </ControlTemplate.Resources>
        <ls:LSNineSliceImage ImageSource="{StaticResource Background}" Slices="280,80,279,116" IconWidth="286" MinWidth="848" Height="200" MaxWidth="1600" Padding="72,0">
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <ls:LSPlaySound Sound="UI_HUD_Notification_Location"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>
            <Grid>
                <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,-12,0,12" ls:TextBlockFormatter.SourceText="{Binding Message.Text}" Style="{StaticResource NotificationTitleTextStyle}" TextTrimming="CharacterEllipsis"/>
                <Image Stretch="None" Source="{StaticResource Icon}" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="-1,0,1,16"/>
            </Grid>
        </ls:LSNineSliceImage>
    </ControlTemplate> 

    <!-- Template for Journal and Journal Mystery Notifications -->
    <ControlTemplate x:Key="JournalUpdateNotificationTemplate">
        <Grid>
            <ls:LSNineSliceImage x:Name="Notification" Slices="64,64,64,120" Padding="68,64,68,84" IconWidth="124"  MinWidth="856" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/notificationJournal.png">
                <StackPanel x:Name="Content" VerticalAlignment="Top" HorizontalAlignment="Center">
                    <TextBlock HorizontalAlignment="Center" Style="{StaticResource NotificationTitleTextStyle}">
                        <Run>
                            <Run.Text>
                                <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                    <Binding Source="h8af7b5c3gfbf4g41fegbcd4g84551412784c"/>
                                    <Binding Path="Title" Mode="OneWay"/>
                                </MultiBinding>
                            </Run.Text>
                        </Run>
                        <Run Text="{Binding Message.Text}" Foreground="{DynamicResource LS_NotificationTextContentColor}"/>
                    </TextBlock>

                    <TextBlock x:Name="dummyText" Text="{Binding Shortcut}" DataContext="{Binding DataContext.CurrentPlayer.UIData.InputEvents,  RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},  Converter={StaticResource FindInputEventConverter},  ConverterParameter='ToggleJournal'}" Visibility="Collapsed"/>
                    <TextBlock x:Name="KeyboardText" HorizontalAlignment="Center" Margin="0,8,0,0" Style="{StaticResource NotificationPressToViewTextStyle}">
                        <TextBlock.Text>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="hdc536834g65bbg40d1ga462gf8b1d43b6753"/>
                                <Binding Path="Text" ElementName="dummyText"/>
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>                    
                    <TextBlock x:Name="ControllerText" HorizontalAlignment="Center" Margin="0,8,0,0" Style="{StaticResource NotificationPressToViewTextStyle}" Visibility="{Binding Visibility, ElementName=KeyboardText, Converter={StaticResource InvertVisibilityConverter}}" Text="{Binding Source='he026a608g7a48g4952g8102g4bfa627245bc', Converter={StaticResource TranslatedStringConverter}}"/>
                    <ls:LSInputBinding x:Name="OpenJournalKeyPress" PlayerId="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" BoundEvent="ToggleJournal"  Command="{Binding Path=DataContext.DismissNotificationByType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"  CommandParameter="{Binding Type}"/>
                </StackPanel>
            </ls:LSNineSliceImage>           
            <Image x:Name="Icon" Style="{StaticResource NotificationFooterIconStyle}" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_journal_d.png" Stretch="None" Margin="0,0,0,20" VerticalAlignment="Bottom"/>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                <Setter TargetName="KeyboardText" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="OpenJournalKeyPress" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="ControllerText" Property="Visibility" Value="Visible" />
                <Setter TargetName="Notification" Property="MinWidth" Value="1000" />
                <Setter TargetName="Notification" Property="Margin" Value="40,10" />
                <Setter TargetName="Icon" Property="Margin" Value="0,0,0,32" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="QuestDoneNotificationTemplate">
        <Grid>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <ls:LSPlaySound Sound="UI_HUD_Quest_Completed"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <ls:LSNineSliceImage x:Name="Notification" Slices="64,64,64,120" Padding="68,44,68,84" IconWidth="124" MinWidth="856" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/notificationJournal.png">
                <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Margin="20,10">
                    <TextBlock Style="{StaticResource NotificationTitleTextStyle}" HorizontalAlignment="Center">
                        <Run>
                            <Run.Text>
                                <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                    <Binding Source="h8af7b5c3gfbf4g41fegbcd4g84551412784c"/>
                                    <Binding Path="Title" Mode="OneWay"/>
                                </MultiBinding>
                            </Run.Text>
                        </Run>
                        <Run Text="{Binding Message.Text}" Foreground="{StaticResource LS_NotificationTextContentColor}"/>
                    </TextBlock>
                    <TextBlock x:Name="dummyText" Text="{Binding Shortcut}" DataContext="{Binding DataContext.CurrentPlayer.UIData.InputEvents,  RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},  Converter={StaticResource FindInputEventConverter},  ConverterParameter='ToggleJournal'}" Visibility="Collapsed"/>
                    <TextBlock x:Name="KeyboardText" HorizontalAlignment="Center" Margin="0,8,0,0" Style="{StaticResource NotificationPressToViewTextStyle}">
                        <TextBlock.Text>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="hdc536834g65bbg40d1ga462gf8b1d43b6753"/>
                                <Binding Path="Text" ElementName="dummyText"/>
                            </MultiBinding>
                        </TextBlock.Text>
                    </TextBlock>
                    <TextBlock x:Name="ControllerText" HorizontalAlignment="Center" Margin="0,8,0,0" Style="{StaticResource NotificationPressToViewTextStyle}" Visibility="{Binding Visibility, ElementName=KeyboardText, Converter={StaticResource InvertVisibilityConverter}}" Text="{Binding Source='he026a608g7a48g4952g8102g4bfa627245bc', Converter={StaticResource TranslatedStringConverter}}"/>
                </StackPanel>
            </ls:LSNineSliceImage>
            <ls:LSInputBinding PlayerId="{Binding Path=DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ls:UIWidget}}}" BoundEvent="ToggleJournal"  Command="{Binding Path=DataContext.DismissNotificationByType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"  CommandParameter="{Binding Type}" Visibility="Collapsed"/>
            <Image x:Name="Icon" Style="{StaticResource NotificationFooterIconStyle}" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_journal_d.png" Stretch="None" Margin="0,0,0,20" VerticalAlignment="Bottom"/>
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                <Setter TargetName="KeyboardText" Property="Visibility" Value="Collapsed" />
                <Setter TargetName="ControllerText" Property="Visibility" Value="Visible" />
                <Setter TargetName="Notification" Property="MinWidth" Value="1000" />
                <Setter TargetName="Notification" Property="Margin" Value="40,10" />
                <Setter TargetName="Icon" Property="Margin" Value="0,0,0,32" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="BackgroundRectangleStyle" TargetType="Rectangle">
        <Setter Property="Opacity" Value="{Binding DataContext.CurrentPlayer.UIOptions.TextDialogueOpacity, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
        <Setter Property="Visibility" Value="{Binding DataContext.CurrentPlayer.UIOptions.ShowTextBackground, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource BoolToVisibleConverter}}"/>
        <Setter Property="Fill" Value="{StaticResource Accessibility.BackgroundColorBrush}"/>
    </Style>

    <ControlTemplate x:Key="JournalUpdateDialogueNotificationTemplate">
        <Grid>
            <Rectangle x:Name="BackgroundNotification" 
                       HorizontalAlignment="Left" Width="{Binding ActualWidth, ElementName=NotificationContent, Converter={StaticResource AddConverter}, ConverterParameter=16}"
                       VerticalAlignment="Top" Height="{Binding ActualHeight, ElementName=NotificationContent, Converter={StaticResource AddConverter}, ConverterParameter=12}"
                       Style="{StaticResource BackgroundRectangleStyle}"/>
            
            <StackPanel x:Name="NotificationContent" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                
                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_journal_d.png" Stretch="None" Margin="10, 0, 24, 8"/>

                <TextBlock Style="{StaticResource DialogueNotificationTextStyle}">
                    <Run Text="{Binding Title}" /><Run Text=": " /><Run Text="{Binding Message.Text}" Foreground="{StaticResource LS_accent75TxtColor}"/>
                </TextBlock>

            </StackPanel>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="PassiveRollDialogueNotificationTemplate">
        <Grid>
            <Rectangle x:Name="BackgroundNotification" 
                       HorizontalAlignment="Left" Width="{Binding ActualWidth, ElementName=NotificationContent, Converter={StaticResource AddConverter}, ConverterParameter=20}"
                       VerticalAlignment="Top" Height="{Binding ActualHeight, ElementName=NotificationContent, Converter={StaticResource AddConverter}, ConverterParameter=-8}"
                       Style="{StaticResource BackgroundRectangleStyle}"/>

            <StackPanel x:Name="NotificationContent" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center">
                
                <Grid Margin="0 0 10 4" HorizontalAlignment="Left">
                    <b:Interaction.Triggers>
                        <b:DataTrigger Binding="{Binding Success}" Value="True">
                            <ls:LSPlaySound Sound="UI_Gameplay_Dialog_Passive_Diceroll_Result_Success"/>
                        </b:DataTrigger>
                        <b:DataTrigger Binding="{Binding Success}" Value="False">
                            <ls:LSPlaySound Sound="UI_Gameplay_Dialog_Passive_Diceroll_Result_Fail"/>
                        </b:DataTrigger>
                    </b:Interaction.Triggers>
                    
                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Overhead/PassiveRoll/passiveRollIndicator_bg.png" Stretch="None" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                    
                    <Image VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="None">
                        <Image.Style>
                            <Style TargetType="Image">
                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Overhead/PassiveRoll/passiveRollIndicator_Failed.png" />
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Success}" Value="True">
                                        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Overhead/PassiveRoll/passiveRollIndicator_Success.png" />
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>
                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/DiceRoll/ico_d20.png" Stretch="None" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                </Grid>

                <TextBlock Style="{StaticResource DialogueNotificationTextStyle}">
                    <Run>
                        <Run.Style>
                            <Style TargetType="Run">
                                <Setter Property="Text" Value="{Binding Source='ha81a7198g8adag4775g8bceg7376da401478',Converter={StaticResource TranslatedStringConverter}, Mode=OneWay}"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Success}" Value="True">
                                        <Setter Property="Text" Value="{Binding Source='h820e2fcag316bg4939gb2e1g2a41ce286d4b',Converter={StaticResource TranslatedStringConverter}, Mode=OneWay}"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Run.Style>
                    </Run><Run Text="{Binding Source='hb897c56egaa6fg460bg8676g8ebfa0340954',Converter={StaticResource TranslatedStringConverter}, Mode=OneWay}"/><Run Text="{Binding Message.Text}"/>
                </TextBlock>
            </StackPanel>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="ApprovalRatingChangeDialogueNotificationTemplate">
        <Grid>
            <Rectangle x:Name="BackgroundNotification" 
                       HorizontalAlignment="Left" Width="{Binding ActualWidth, ElementName=NotificationContent, Converter={StaticResource AddConverter}, ConverterParameter=40}"
                       VerticalAlignment="Center" Height="{Binding ActualHeight, ElementName=NotificationContent, Converter={StaticResource AddConverter}, ConverterParameter=-16}"
                       Style="{StaticResource BackgroundRectangleStyle}"/>

            <StackPanel x:Name="NotificationContent" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" >
                <Grid Margin="0,0,16,4">
                    <Grid Height="51" >
                        <Rectangle Fill="{Binding Icon}" Width="70" Height="101" Margin="0,0,0,-35">
                            <Rectangle.Clip>
                                <RectangleGeometry Rect="35,-15,51,51">
                                    <RectangleGeometry.Transform>
                                        <RotateTransform Angle="45" />
                                    </RectangleGeometry.Transform>
                                </RectangleGeometry>
                            </Rectangle.Clip>
                            <Rectangle.RenderTransform>
                                <TranslateTransform Y="-25"/>
                            </Rectangle.RenderTransform>
                        </Rectangle>
                    </Grid>
                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/characterDiamondSurround.png" />
                </Grid>

                <TextBlock Style="{StaticResource DialogueNotificationTextStyle}" 
                           ls:TextBlockFormatter.SourceText="{Binding Message.Text}"/>
            </StackPanel>
        </Grid>
    </ControlTemplate>

    <ControlTemplate x:Key="SystemDialogueNotificationTemplate">
        <Grid>
            <Rectangle x:Name="BackgroundNotification" HorizontalAlignment="Left" Width="{Binding ActualWidth, ElementName=NotificationContent, Converter={StaticResource AddConverter}, ConverterParameter=16}"
                       Style="{StaticResource BackgroundRectangleStyle}"/>
            
            <TextBlock x:Name="NotificationContent" Style="{StaticResource DialogueNotificationTextStyle}" 
                       Text="{Binding Message.Text}"/>
        </Grid>
    </ControlTemplate>


    <!-- Template for Combat Initiatives Notification -->
    <ControlTemplate x:Key="CombatInititiativesNotificationTemplate">
        <ControlTemplate.Resources>
            <Duration x:Key="FadeDuration">0:0:0.33</Duration>

            <Style x:Key="SideTextTitle" TargetType="TextBlock">
                <Setter Property="Foreground" Value="{StaticResource LS_PrimaryColor}" />
                <Setter Property="FontSize" Value="{StaticResource MediumFontSize}" />
            </Style>

            <Style x:Key="InitiativeValue" TargetType="TextBlock">
                <Setter Property="Foreground" Value="{StaticResource LS_PrimaryColor}" />
                <Setter Property="FontSize" Value="{StaticResource LargeFontSize}" />
                <Setter Property="Margin" Value="0,2,0,0" />
            </Style>

            <Style x:Key="InitiativeCaption" TargetType="TextBlock">
                <Setter Property="Foreground" Value="{StaticResource LS_PrimaryColor}" />
                <Setter Property="FontSize" Value="{StaticResource SmallFontSize}" />
                <Setter Property="noesis:Text.Stroke" Value="#000000"/>
                <Setter Property="noesis:Text.StrokeThickness" Value="2"/>
            </Style>

            <Style x:Key="InitiatorTeam" TargetType="TextBlock">
                <Setter Property="Foreground" Value="{StaticResource LS_PrimaryColor}" />
                <Setter Property="FontSize" Value="{StaticResource LargeFontSize}" />
                <Setter Property="noesis:Text.Stroke" Value="#000000"/>
                <Setter Property="noesis:Text.StrokeThickness" Value="2"/>
            </Style>

            <Style x:Key="PressToSkip" TargetType="TextBlock">
                <Setter Property="Foreground" Value="{StaticResource LS_SecondaryColor}" />
                <Setter Property="FontSize" Value="{StaticResource MediumFontSize}" />
            </Style>

            <Style x:Key="HealthProgressbarStyle" TargetType="{x:Type ls:LSProgressBar}">
                <Setter Property="Foreground" Value="#e9002c"/>
                <Setter Property="Background" Value="#7f000000"/>
                <Setter Property="BorderThickness" Value="0"/>
                <Setter Property="BorderBrush" Value="{x:Null}" />
                <Setter Property="HorizontalAlignment" Value="Left" />
                <Setter Property="VerticalAlignment" Value="Bottom" />
                <Setter Property="Width" Value="98" />
                <Setter Property="Height" Value="4" />
                <Setter Property="Margin" Value="13,0,0,15"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ls:LSProgressBar}">
                            <Grid Name="TemplateRoot" Background="{TemplateBinding Background}" Height="4">
                                <Rectangle Name="PART_Track"/>

                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                                    <Decorator x:Name="PART_Indicator">
                                        <Grid Name="Foreground">
                                            <Rectangle x:Name="Indicator" Fill="{TemplateBinding Foreground}"/>
                                        </Grid>
                                    </Decorator>
                                </StackPanel>
                            </Grid>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <DataTemplate x:Key="CharacterPortrait">
                <Grid Height="316">
                    <Border Width="168" Height="208" BorderThickness="0" BorderBrush="{x:Null}" VerticalAlignment="Top">
                        <Border.Background>
                            <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/portrait_bg.png" />
                        </Border.Background>
                        <Grid Width="124" Height="188" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="23,12,0,0">
                            <Grid.Background>
                                <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_d.png" />
                            </Grid.Background>
                            <Rectangle Fill="{Binding Icon}" Width="102" Height="154" Margin="11,11,11,23" VerticalAlignment="Top" HorizontalAlignment="Left" />
                            <ls:LSProgressBar Style="{StaticResource HealthProgressbarStyle}" Value="{Binding Stats.Health.PercentValue, Mode=OneWay}" Maximum="1" Minimum="0" />
                        </Grid>
                    </Border>
                    <Border Width="120" Height="120" BorderThickness="0" BorderBrush="{x:Null}" VerticalAlignment="Bottom" Margin="1,0,0,8">
                        <Border.Background>
                            <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/initiative_bg.png" />
                        </Border.Background>
                        <TextBlock Text="{Binding CurrentCombatInitiative}" HorizontalAlignment="Center" VerticalAlignment="Center" Style="{StaticResource InitiativeValue}" />
                    </Border>
                    <TextBlock Text="{Binding Source='h8cd254b3ga2a2g47d1g9523g991a3b00eabf',Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Center" VerticalAlignment="Bottom" Style="{StaticResource InitiativeCaption}" />
                </Grid>
            </DataTemplate>

            <ControlTemplate x:Key="InitiativesBaseTemplate" TargetType="ContentControl">
                <Grid Height="640">
                    <!-- team that initiated combat -->
                    <Grid x:Name="initiate_bg"  HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,55">
                        <Image Stretch="None">
                            <Image.Style>
                                <Style TargetType="Image">
                                    <Setter Property="Source" Value="{x:Null}"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SurpriseState}" Value="SurpriseRound">
                                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/initiativeResult_01_bg.png"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding SurpriseState}" Value="Ambushed">
                                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/initiativeResult_02_bg.png"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </Image.Style>
                        </Image>

                        <!-- text -->
                        <ContentControl HorizontalAlignment="Center" VerticalAlignment="Center">
                            <ContentControl.Style>
                                <Style TargetType="ContentControl">
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding SurpriseState}" Value="SurpriseRound">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="ContentControl">
                                                        <TextBlock Text="{Binding Source='h825eb2d5g2cb7g4d79gaa06g281059080373',Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource InitiatorTeam}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding SurpriseState}" Value="Ambushed">
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="ContentControl">
                                                        <TextBlock Text="{Binding Source='h60656696g584eg40c5ga636g1d94768f85b3',Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource InitiatorTeam}" HorizontalAlignment="Center" VerticalAlignment="Center" />
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ContentControl.Style>
                        </ContentControl>
                    </Grid>

                    <ContentPresenter />
                </Grid>
            </ControlTemplate>
        </ControlTemplate.Resources>

        <ContentControl DataContext="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
            <ContentControl.Style>
                <Style TargetType="ContentControl">
                    <Style.Triggers>
                        <DataTrigger Binding="{Binding RequestCloseCurrentNotification}" Value="False">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ContentControl">
                                        <ContentControl Template="{StaticResource InitiativesBaseTemplate}">
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="Loaded">
                                                    <ls:LSControlStoryboard CompletedCommand="{Binding RequestCloseCurrentNotificationCommand}">
                                                        <ls:LSControlStoryboard.Storyboard>
                                                            <Storyboard>
                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                                                    <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                                                    <LinearDoubleKeyFrame KeyTime="0:0:0.3" Value="1" />
                                                                    <LinearDoubleKeyFrame KeyTime="0:0:2.7" Value="1" />
                                                                </DoubleAnimationUsingKeyFrames>
                                                            </Storyboard>
                                                        </ls:LSControlStoryboard.Storyboard>
                                                    </ls:LSControlStoryboard>
                                                </b:EventTrigger>
                                            </b:Interaction.Triggers>
                                        </ContentControl>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RequestCloseCurrentNotification}" Value="True">
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ContentControl">
                                        <ContentControl Template="{StaticResource InitiativesBaseTemplate}">
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="Loaded">
                                                    <ls:LSControlStoryboard CompletedCommand="{Binding SkipNotificationCommand}">
                                                        <ls:LSControlStoryboard.Storyboard>
                                                            <Storyboard>
                                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                                                    <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1" />
                                                                    <LinearDoubleKeyFrame KeyTime="0:0:0.3" Value="0" />
                                                                </DoubleAnimationUsingKeyFrames>
                                                            </Storyboard>
                                                        </ls:LSControlStoryboard.Storyboard>
                                                    </ls:LSControlStoryboard>
                                                </b:EventTrigger>
                                            </b:Interaction.Triggers>
                                        </ContentControl>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>
                    </Style.Triggers>
                </Style>
            </ContentControl.Style>
        </ContentControl>
    </ControlTemplate>

    <!-- Template for Combat Started Notification -->
    <ControlTemplate x:Key="CombatNoticeTemplate" TargetType="ContentControl">
        <Border Width="1520" Height="312" Padding="0,130,0,44" RenderTransformOrigin="0.5,0.5">
            <Border.RenderTransform>
                <ScaleTransform/>
            </Border.RenderTransform>
            <Border.Background>
                <ImageBrush ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/combatNotice_bg.png" />
            </Border.Background>

            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />

            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <ls:LSControlStoryboard Storyboard="{StaticResource CombatNotificationsStoryboard}" CompletedCommand="{Binding SkipNotificationCommand}" />
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </Border>
    </ControlTemplate>

    <!-- Template for Combat Started Notification -->
    <ControlTemplate x:Key="CombatStartedNotificationTemplate">
        <ContentControl Template="{StaticResource CombatNoticeTemplate}" DataContext="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
            <TextBlock Text="{Binding Source='h0ceb91d1gc986g4629gaef8gd71af4a90dee',Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_PrimaryColor}" FontSize="{StaticResource TitleFontSize}"/>
        </ContentControl>
    </ControlTemplate>

    <!-- Template for Combat Joined Notification -->
    <ControlTemplate x:Key="CombatJoinedNotificationTemplate">
        <ContentControl Template="{StaticResource CombatNoticeTemplate}" DataContext="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
            <TextBlock Text="{Binding Source='h7d84a711gcd04g4b78ga1b9g19ee82de7a2e',Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_PrimaryColor}" FontSize="{StaticResource TitleFontSize}"/>
        </ContentControl>
    </ControlTemplate>

    <!-- Template for Combat Entered Notifications -->
    <ControlTemplate x:Key="CombatEnteredNotificationTemplate">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="1*" />
                <ColumnDefinition Width="1*" />
            </Grid.ColumnDefinitions>

            <Image Grid.ColumnSpan="2" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/initiativeNotice_bg.png" Stretch="None" />
        </Grid>
    </ControlTemplate>

   

    <!-- Template for Combat Started Notification -->
    <ControlTemplate x:Key="CombatTurnTemplate" TargetType="ContentControl">
        <Border Width="1520" Height="312" Padding="0,44,0,130" Background="{DynamicResource TurnBg}" RenderTransformOrigin="0.5,0.5" DataContext="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
            <Border.RenderTransform>
                <ScaleTransform/>
            </Border.RenderTransform>
            <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center" />

            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <ls:LSControlStoryboard  Storyboard="{StaticResource CombatNotificationsStoryboard}" CompletedCommand="{Binding SkipNotificationCommand}"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </Border>
    </ControlTemplate>

    <!--Template for Forced Turn Based Mode Started Notification-->
    <ControlTemplate x:Key="FTBModeStartedNotificationTemplate">
        <Grid RenderTransformOrigin="0.5,0.5">
            <Grid.RenderTransform>
                <ScaleTransform/>
            </Grid.RenderTransform>

            <ls:LSNineSliceImage x:Name="Notification" MinWidth="1324" MinHeight="376">
                <ls:LSNineSliceImage.Style>
                    <Style TargetType="ls:LSNineSliceImage" BasedOn="{StaticResource {x:Type ls:LSNineSliceImage}}">
                        <Setter Property="Slices" Value="64,64,64,160"/>
                        <Setter Property="Padding" Value="80,40,80,30"/>
                        <Setter Property="IconWidth" Value="72"/>
                        <Setter Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/turnNotice_party.png"/>
                    </Style>
                </ls:LSNineSliceImage.Style>
                <StackPanel x:Name="TextPanel" Margin="0,20">
                    <TextBlock x:Name="TitleText" Text="{Binding Source='h51fcadf4g025cg48f0g8078gb56eab76182c',Converter={StaticResource TranslatedStringConverter}}" TextAlignment="Center" FontWeight="SemiBold"
                               Foreground="{StaticResource LS_PrimaryColor}" FontSize="{StaticResource MassiveFontSize}"/>
                    <TextBlock x:Name="DescriptionText" Text="{Binding Source='hefa1c8f2gcf03g4617gb089g26bedf1c1f08',Converter={StaticResource TranslatedStringConverter}}" TextAlignment="Center" FontWeight="SemiBold" Margin="0,10"
                               Foreground="{StaticResource LS_PrimaryColor}" FontSize="{StaticResource IntermediateFontSize}"/>
                </StackPanel>
            </ls:LSNineSliceImage>
            <Image Source="{StaticResource IconHourglassActive}" Stretch="None" VerticalAlignment="Bottom" Margin="0,54"/>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <ls:LSControlStoryboard Storyboard="{StaticResource CombatNotificationsStoryboard}" CompletedCommand="{Binding Path=DataContext.SkipNotificationCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" />
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                <Setter TargetName="TextPanel" Property="Margin" Value="0,10"/>
                <Setter TargetName="TitleText" Property="FontSize" Value="{StaticResource HugeFontSize}"/>
                <Setter TargetName="DescriptionText" Property="Margin" Value="0,0"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>


    <!-- Template for Player Combat Turn Label -->
    <ControlTemplate x:Key="CombatTurnPlayerLabel">
        <ControlTemplate.Resources>
            <ImageBrush x:Key="TurnBg" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/smallNotice_bg.png" />

            <Storyboard x:Key="FadeOut" FillBehavior="Stop">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="LabelBorder">
                    <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="1" />
                    <LinearDoubleKeyFrame KeyTime="0:0:0.7" Value="0" />
                </DoubleAnimationUsingKeyFrames>
                <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsEnabled" Storyboard.TargetName="SkipNotificationBinding">
                    <DiscreteBooleanKeyFrame KeyTime="0:0:0" Value="False"/>
                    <DiscreteBooleanKeyFrame KeyTime="0:0:0.7" Value="True"/>
                </BooleanAnimationUsingKeyFrames>
            </Storyboard>
        </ControlTemplate.Resources>
        <Grid x:Name="LabelBorder" MinWidth="460" Height="120" Background="{StaticResource TurnBg}" >
            <Grid.Triggers>
                <EventTrigger RoutedEvent="FrameWorkElement.Loaded">
                    <BeginStoryboard x:Name="FadeIn">
                        <Storyboard FillBehavior="Stop">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="LabelBorder">
                                <LinearDoubleKeyFrame KeyTime="0:0:0.0" Value="0" />
                                <LinearDoubleKeyFrame KeyTime="0:0:0.3" Value="1" />
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </Grid.Triggers>

            <TextBlock Text="{Binding Source='h454f2809gcc4ag4ab6gac72gccec15c0dda3',Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_PrimaryColor}" FontSize="{StaticResource ScaledLargeFontSize}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="36,0"/>
            <ls:LSInputBinding x:Name="SkipNotificationBinding" EatInput="False" AnyKey="True" AnyClick="True" PlayerId="{Binding PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                <ls:LSInputBinding.Triggers>
                    <EventTrigger RoutedEvent="ls:LSInputBinding.LSInputBindingPressed">
                        <StopStoryboard BeginStoryboardName="FadeIn"/>
                        <BeginStoryboard Storyboard="{StaticResource FadeOut}"/>
                    </EventTrigger>
                    <EventTrigger RoutedEvent="ls:LSInputBinding.LSInputBindingReleased">
                        <StopStoryboard BeginStoryboardName="FadeIn"/>
                        <BeginStoryboard Storyboard="{StaticResource FadeOut}"/>
                    </EventTrigger>
                </ls:LSInputBinding.Triggers>
                <b:Interaction.Triggers>
                    <b:StoryboardCompletedTrigger Storyboard="{StaticResource FadeOut}">
                        <b:ChangePropertyAction TargetName="LabelBorder" PropertyName="Visibility" Value="{x:Static Visibility.Collapsed}"/>
                        <b:ChangePropertyAction TargetName="SkipNotificationBinding" PropertyName="IsEnabled" Value="{StaticResource FalseValue}"/>
                        <b:InvokeCommandAction Command="{Binding Path=DataContext.SkipNotificationCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"/>
                    </b:StoryboardCompletedTrigger>
                </b:Interaction.Triggers>
            </ls:LSInputBinding>
        </Grid>
    </ControlTemplate>
    

    <!-- Template for Player Combat Turn Notification -->
    <ControlTemplate x:Key="CombatTurnPlayerTemplate">
        <ControlTemplate.Resources>
            <ImageBrush x:Key="TurnBg" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/turnNotice_ally.png" />
        </ControlTemplate.Resources>
        <ContentControl Template="{StaticResource CombatTurnTemplate}" Margin="0,42,0,0">
            <StackPanel>
                <TextBlock Text="{Binding Source='h454f2809gcc4ag4ab6gac72gccec15c0dda3',Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_PrimaryColor}" FontSize="{StaticResource TitleFontSize}" HorizontalAlignment="Center" Margin="0,-8,0,0" />
                <ItemsControl x:Name="TurnActiveCharacterList" ItemsSource="{Binding Path=DataContext.CurrentPlayer.UIData.CurrentPartyCharactersInTurn, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" HorizontalAlignment="Center">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Border Margin="4,4" x:Name="CharacterLabel" Background="{StaticResource LS_textStrokeColor}" CornerRadius="8">
                                <TextBlock x:Name="CharacterNameText" Text="{Binding Name}" Foreground="{StaticResource LS_accent100TxtColor}" FontSize="{StaticResource DefaultFontSize}" Margin="20,0" />
                            </Border>
                            <DataTemplate.Triggers>
                                <DataTrigger Value="False">
                                    <DataTrigger.Binding>
                                        <MultiBinding Converter="{StaticResource EqualConverter}">
                                            <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="DataContext.CurrentPlayer.UserId"/>
                                            <Binding Path="OwnerUserID"/>
                                        </MultiBinding>
                                    </DataTrigger.Binding>
                                    <Setter TargetName="CharacterLabel" Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                                    <Setter TargetName="CharacterNameText" Property="FontSize" Value="{StaticResource MediumFontSize}"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </StackPanel>
        </ContentControl>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                <Setter TargetName="TurnActiveCharacterList" Property="Margin" Value="0,-8,0,0"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Template for Enemy Combat Turn Notification -->
    <ControlTemplate x:Key="CombatTurnEnemyTemplate">
        <ControlTemplate.Resources>
            <ImageBrush x:Key="TurnBg" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/turnNotice_enemy.png" />
        </ControlTemplate.Resources>
        <ContentControl Template="{StaticResource CombatTurnTemplate}" Margin="0,42,0,0">
            <TextBlock Text="{Binding Source='h513cbe16g465bg420eg95cagf5fe78981bba',Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_PrimaryColor}" FontSize="{StaticResource TitleFontSize}" />
        </ContentControl>
    </ControlTemplate>

    <!-- Template for Neutral Combat Turn Notification -->
    <ControlTemplate x:Key="CombatTurnNeutralTemplate">
        <ControlTemplate.Resources>
            <ImageBrush x:Key="TurnBg" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/turnNotice_neutral.png" />
        </ControlTemplate.Resources>
        <ContentControl Template="{StaticResource CombatTurnTemplate}" Margin="0,42,0,0">
            <TextBlock Text="{Binding Source='hfbb0dc14gba0dg4fbegbd3cg30c73c5da56c',Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_PrimaryColor}" FontSize="{StaticResource TitleFontSize}" />
        </ContentControl>
    </ControlTemplate>

    <!-- Template for Ally Combat Turn Notification -->
    <ControlTemplate x:Key="CombatTurnAllyTemplate">
        <ControlTemplate.Resources>
            <ImageBrush x:Key="TurnBg" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/turnNotice_friendly.png" />
        </ControlTemplate.Resources>
        <ContentControl Template="{StaticResource CombatTurnTemplate}" Margin="0,42,0,0">
            <TextBlock Text="{Binding Message.Text}" Foreground="{StaticResource LS_PrimaryColor}" FontSize="{StaticResource TitleFontSize}" DataContext="{Binding DataContext.CurrentPlayer.UIData.Notification, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" HorizontalAlignment="Center" />
        </ContentControl>
    </ControlTemplate>

    <!-- Template for Approval Rating Notifications -->
    <ControlTemplate x:Key="ApprovalRatingNotificationTemplate">
        <Grid>
            <Rectangle Fill="{Binding Icon}" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,-6" Width="70" Height="101">
                <Rectangle.Clip>
                    <RectangleGeometry Rect="35,-10,46,46">
                        <RectangleGeometry.Transform>
                            <RotateTransform Angle="45" />
                        </RectangleGeometry.Transform>
                    </RectangleGeometry>
                </Rectangle.Clip>
            </Rectangle>
            <ls:LSNineSliceImage x:Name="Notification" MinWidth="840" MinHeight="220">
                <ls:LSNineSliceImage.Style>
                    <Style TargetType="ls:LSNineSliceImage" BasedOn="{StaticResource {x:Type ls:LSNineSliceImage}}">
                        <Setter Property="Slices" Value="64,64,64,160"/>
                        <Setter Property="Padding" Value="80,40,80,30"/>
                        <Setter Property="IconWidth" Value="72"/>
                        <Setter Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/notificationPlayer.png"/>
                    </Style>
                </ls:LSNineSliceImage.Style>
                <TextBlock x:Name="Content" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="32,0,56,0" Padding="0,0,0,50" TextAlignment="Center" TextWrapping="Wrap" MaxWidth="640" Text="{Binding Message.Text}" Foreground="{DynamicResource LS_NotificationTextContentColor}"/>
            </ls:LSNineSliceImage>
        </Grid>
    </ControlTemplate>

    <Storyboard x:Key="NotificationPortraitFadeOut" SpeedRatio="{StaticResource BackgroundGoalSpeedRatio}">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
            <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1"/>
            <DiscreteDoubleKeyFrame KeyTime="0:0:3" Value="1"/>
            <LinearDoubleKeyFrame KeyTime="0:0:3.8" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Storyboard x:Key="NotificationTextFadeOut" SpeedRatio="{StaticResource BackgroundGoalSpeedRatio}">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
            <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="1"/>
            <DiscreteDoubleKeyFrame KeyTime="0:0:3" Value="1"/>
            <LinearDoubleKeyFrame KeyTime="0:0:3.5" Value="0"/>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <Storyboard x:Key="NotificationTextFadeIn" SpeedRatio="{StaticResource BackgroundGoalSpeedRatio}">
        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
            <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
            <DiscreteDoubleKeyFrame KeyTime="0:0:3.2" Value="0"/>
            <LinearDoubleKeyFrame KeyTime="0:0:3.5" Value="1"/>
        </DoubleAnimationUsingKeyFrames>
    </Storyboard>

    <!-- Background Goal completed notification template-->
    <ControlTemplate x:Key="BackgroundGoalNotificationTemplate">
        <ls:LSNineSliceImage Slices="64,150,64,128" Padding="40,40,40,40" IconWidth="500"  Width="848" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/notificationBackgroundGoal.png" Opacity="0">
            <ls:LSNineSliceImage.RenderTransform>
                <TranslateTransform/>
            </ls:LSNineSliceImage.RenderTransform>
            <ls:LSNineSliceImage.Content>
                <Grid>
                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/arc.png" Stretch="None" VerticalAlignment="Top" Margin="0,-48,0,0">
                        <Image.RenderTransform>
                            <RotateTransform CenterY="100" CenterX="100"/>
                        </Image.RenderTransform>
                        <Image.Style>
                            <Style TargetType="Image">
                                <Style.Triggers>
                                    <EventTrigger RoutedEvent="Loaded">
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <DoubleAnimation Storyboard.TargetProperty="(Image.RenderTransform).(RotateTransform.Angle)" To="360" Duration="0:0:9" RepeatBehavior="Forever" />
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>

                    <!-- Portrait (only fade if replaced by Inspiration Point icon) -->
                    <Ellipse Width="64" Height="64" Fill="{Binding Character.Icon}" VerticalAlignment="Top" Margin="0,20,0,0">
                        <Ellipse.Style>
                            <Style TargetType="Ellipse">
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding InitialLevel, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                                        <DataTrigger.EnterActions>
                                            <BeginStoryboard Storyboard="{StaticResource NotificationPortraitFadeOut}"/>
                                        </DataTrigger.EnterActions>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Ellipse.Style>
                    </Ellipse>

                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/ico_inspirationPoint.png" Stretch="None" VerticalAlignment="Top" Margin="0,18,0,0">
                        <Image.RenderTransform>
                            <ScaleTransform CenterX="34" CenterY="34"/>
                        </Image.RenderTransform>
                        <Image.Style>
                            <Style TargetType="Image">
                                <Style.Triggers>
                                    <EventTrigger RoutedEvent="Loaded">
                                        <BeginStoryboard>
                                            <Storyboard SpeedRatio="{StaticResource BackgroundGoalSpeedRatio}">
                                                <!-- fade in and scale up -->
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                                    <DiscreteDoubleKeyFrame KeyTime="0:0:1.8" Value="0"/>
                                                    <LinearDoubleKeyFrame KeyTime="0:0:2.5" Value="1"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleX">
                                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.6"/>
                                                    <DiscreteDoubleKeyFrame KeyTime="0:0:1.55" Value="0.6"/>
                                                    <LinearDoubleKeyFrame KeyTime="0:0:2.5" Value="1"/>
                                                </DoubleAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.ScaleY">
                                                    <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0.6"/>
                                                    <DiscreteDoubleKeyFrame KeyTime="0:0:1.55" Value="0.6"/>
                                                    <LinearDoubleKeyFrame KeyTime="0:0:2.5" Value="1"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </EventTrigger>
                                    <DataTrigger Binding="{Binding InitialLevel}" Value="0">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </Image.Style>
                    </Image>

                    <StackPanel Margin="0,110,0,0">

                        <Grid>
                            <!-- Title part (only fade if replaced by Inspiration Points) -->
                            <TextBlock HorizontalAlignment="Center" TextWrapping="Wrap" TextAlignment="Center">
                                <Run Text="{Binding TitlePrefix}" /><Run Text=":" />
                                <Run Text="{Binding Title}" Foreground="{StaticResource LS_accent100TxtColor}"/>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource NotificationTitleTextStyle}">
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding InitialLevel, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                                                <DataTrigger.EnterActions>
                                                    <BeginStoryboard Storyboard="{StaticResource NotificationTextFadeOut}"/>
                                                </DataTrigger.EnterActions>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>

                            <!-- Show Inspiration Points (if any) -->
                            <TextBlock x:Name="showInspirationPoints" HorizontalAlignment="Center" TextWrapping="Wrap" TextAlignment="Center">
                                <Run Text="{Binding InitialLevel}" />
                                <Run>
                                    <Run.Style>
                                        <Style TargetType="Run">
                                            <!-- multiple "points" -->
                                            <Setter Property="Text" Value="{Binding Source='h857fb3cfg8f40g4944g8c5ag3074a9f67789',Converter={StaticResource TranslatedStringConverter}}"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding InitialLevel}" Value="1">
                                                    <!-- singular "point" -->
                                                    <Setter Property="Text" Value="{Binding Source='h9dff545dg663cg4affg9115g4a5605481d24',Converter={StaticResource TranslatedStringConverter}}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Run.Style>
                                </Run>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource NotificationTitleTextStyle}">
                                        <Style.Triggers>
                                            <EventTrigger RoutedEvent="Loaded">
                                                <BeginStoryboard Storyboard="{StaticResource NotificationTextFadeIn}"/>
                                            </EventTrigger>
                                            <DataTrigger Binding="{Binding InitialLevel}" Value="0">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>

                        <Grid Margin="0,12,0,0">
                            <!-- Description part (always fade) -->
                            <TextBlock TextAlignment="Center" TextWrapping="Wrap" VerticalAlignment="Center" Visibility="{Binding Message.Text, Converter={StaticResource StringToVisibilityConverter}}">
                                <TextBlock.Text>
                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                        <Binding Source="hac1d153bgf183g47edgb7b4g4f793f9c60fe"/>
                                        <Binding Path="DataContext.Character.Name" RelativeSource="{RelativeSource Mode=Self}"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource NotificationContentTextStyle}">
                                        <Style.Triggers>
                                            <EventTrigger RoutedEvent="Loaded">
                                                <BeginStoryboard Storyboard="{StaticResource NotificationTextFadeOut}"/>
                                            </EventTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>

                            <!-- Show XP part -->
                            <TextBlock HorizontalAlignment="Center" TextWrapping="Wrap" TextAlignment="Center" Foreground="{DynamicResource LS_specialTxtColor}">
                                <TextBlock.Text>
                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                        <Binding Source="he83f8302g3831g4b80gaeb3gdfeb0c9a6287"/>
                                        <Binding Path="DataContext.ExpGain" RelativeSource="{RelativeSource Mode=Self}"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Style.Triggers>
                                            <EventTrigger RoutedEvent="Loaded">
                                                <BeginStoryboard Storyboard="{StaticResource NotificationTextFadeIn}"/>
                                            </EventTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </Grid>

                        <!-- footer -->
                        <Grid Margin="0,12,0,60">
                            <TextBlock x:Name="dummyText" Text="{Binding Shortcut}" DataContext="{Binding DataContext.CurrentPlayer.UIData.InputEvents,  RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}},  Converter={StaticResource FindInputEventConverter},  ConverterParameter='ToggleInspiration'}" Visibility="Collapsed"/>
                            <TextBlock x:Name="KeyboardText" HorizontalAlignment="Center" VerticalAlignment="Top">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock" BasedOn="{StaticResource NotificationPressToViewTextStyle}">
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Keyboard">
                                                <Setter Property="Visibility" Value="Visible" />
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                                <TextBlock.Text>
                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                        <Binding Source="hdc536834g65bbg40d1ga462gf8b1d43b6753"/>
                                        <Binding Path="Text" ElementName="dummyText"/>
                                    </MultiBinding>
                                </TextBlock.Text>
                            </TextBlock>
                            <TextBlock x:Name="ControllerText" HorizontalAlignment="Center" Style="{StaticResource NotificationPressToViewTextStyle}" Visibility="{Binding Visibility, ElementName=KeyboardText, Converter={StaticResource InvertVisibilityConverter}}" Text="{Binding Source='he026a608g7a48g4952g8102g4bfa627245bc', Converter={StaticResource TranslatedStringConverter}}"/>
                        </Grid>

                    </StackPanel>

                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/ico_journal_d.png" Stretch="None" VerticalAlignment="Bottom" Margin="0,0,0,-16"/>

                </Grid>
            </ls:LSNineSliceImage.Content>
            <b:Interaction.Triggers>
                <b:DataTrigger Binding="{Binding InitialLevel}" Value="0">
                    <ls:LSPlaySound Sound="UI_HUD_BGG_Notification"/>
                </b:DataTrigger>
                <b:DataTrigger Binding="{Binding InitialLevel, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                    <ls:LSPlaySound Sound="UI_HUD_BGG_Notification_Inspired"/>
                </b:DataTrigger>
                <b:StoryboardCompletedTrigger Storyboard="{Binding ElementName=BackgroundGoalNotificationStoryboard}">
                    <b:InvokeCommandAction Command="{Binding Path=DataContext.SkipNotificationCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"/>
                    <b:ControlStoryboardAction Storyboard="{Binding ElementName=BackgroundGoalNotificationStoryboard}" ControlStoryboardOption="Stop"/>
                </b:StoryboardCompletedTrigger>
            </b:Interaction.Triggers>
            <ls:LSNineSliceImage.Triggers>
                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                    <BeginStoryboard x:Name="BackgroundGoalNotificationStoryboardHolder">
                        <Storyboard x:Name="BackgroundGoalNotificationStoryboard" SpeedRatio="{StaticResource BackgroundGoalSpeedRatio}">
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                <SplineDoubleKeyFrame KeySpline="0.333,0 0.667,1" KeyTime="0:0:0.38" Value="1"/>
                                <SplineDoubleKeyFrame KeySpline="0.333,0 0.833,1" KeyTime="0:0:5.57" Value="1"/>
                                <SplineDoubleKeyFrame KeySpline="0.167,0 0.833,1" KeyTime="0:0:5.92" Value="0"/>
                            </DoubleAnimationUsingKeyFrames>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="RenderTransform.Y">
                                <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="26"/>
                                <SplineDoubleKeyFrame KeySpline="0.333,0 0.667,1" KeyTime="0:0:0.38" Value="6"/>
                                <LinearDoubleKeyFrame KeyTime="0:0:5.57" Value="6"/>
                                <SplineDoubleKeyFrame KeySpline="0.333,0 0.667,1" KeyTime="0:0:5.92" Value="-14"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </EventTrigger>
            </ls:LSNineSliceImage.Triggers>
        </ls:LSNineSliceImage>
    </ControlTemplate>

    <ControlTemplate x:Key="TopSquareIconNotificationTemplate">
        <Grid HorizontalAlignment="Center" x:Name="WMNotifGrid">
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <ls:LSPlaySound Sound="UI_HUD_WildMagic_Notification"/>
                </b:EventTrigger>
                <b:StoryboardCompletedTrigger Storyboard="{Binding ElementName=TopSquareIconNotificationStoryboard}">
                    <b:InvokeCommandAction Command="{Binding Path=DataContext.SkipNotificationCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"/>
                    <b:ControlStoryboardAction Storyboard="{Binding ElementName=TopSquareIconNotificationStoryboard}" ControlStoryboardOption="Stop"/>
                </b:StoryboardCompletedTrigger>
            </b:Interaction.Triggers>
            <Grid.Triggers>
                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                    <BeginStoryboard x:Name="TopSquareIconNotificationStoryboardHolder">
                        <Storyboard x:Name="TopSquareIconNotificationStoryboard">
                            <Storyboard.Children>
                                <Storyboard>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="Notification" Storyboard.TargetProperty="(UIElement.Opacity)">
                                        <DiscreteDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                        <DiscreteDoubleKeyFrame KeyTime="0:0:0.75" Value="0"/>
                                        <LinearDoubleKeyFrame KeyTime="0:0:1.5" Value="1"/>
                                        <LinearDoubleKeyFrame KeyTime="0:0:5.5" Value="1"/>
                                        <LinearDoubleKeyFrame KeyTime="0:0:6" Value="0"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>

                                <Storyboard>
                                    <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PopExplosion" Storyboard.TargetProperty="Visibility">
                                        <DiscreteObjectKeyFrame KeyTime="0:0:1.5" Value="{x:Static Visibility.Visible}"/>
                                        <DiscreteObjectKeyFrame KeyTime="0:0:2.0" Value="{x:Static Visibility.Hidden}"/>
                                    </ObjectAnimationUsingKeyFrames>
                                </Storyboard>
                            </Storyboard.Children>
                        </Storyboard>

                    </BeginStoryboard>
                </EventTrigger>
            </Grid.Triggers>

            <ls:LSNineSliceImage x:Name="Notification" HorizontalAlignment="Center" VerticalAlignment="Center" Slices="64,160,64,140" Width="856" MinHeight="320" IconWidth="448" Padding="40,36,40,0" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/notificationWildMagic.png" Opacity="0">
                <Grid>
                    <Grid Height="80" Width="80" VerticalAlignment="Top" HorizontalAlignment="Center" >
                        <Rectangle Fill="{DynamicResource LS_ItemIconBackgroundColor}"/>
                        <Rectangle Fill="{Binding Icon}"/>
                    </Grid>

                    <StackPanel x:Name="Content" VerticalAlignment="Top" HorizontalAlignment="Center" Orientation="Vertical" MinHeight="100" Width="780" Margin="0,120,0,40">
                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Message.Text}" Style="{StaticResource NotificationTitleTextStyle}" Foreground="{StaticResource LS_extraspecialTxtColor}" HorizontalAlignment="Center"/>
                        <TextBlock Style="{StaticResource NotificationContentTextStyle}" Foreground="{StaticResource LS_accent100TxtColor}" HorizontalAlignment="Center" TextWrapping="Wrap" TextAlignment="Center">
                            <b:Interaction.Behaviors>
                                <ls:CtxTransStringRunGeneratorBehavior Source="{Binding ExtendedMessage}" ParamRunStyle="{StaticResource TooltipUnitParamRun}"/>
                            </b:Interaction.Behaviors>
                        </TextBlock>
                    </StackPanel>
                </Grid>
            </ls:LSNineSliceImage>

            <!-- The outline animation is in a viewbox, so it fits the best it can to the height of the notification box (it shouldn't happen often, but it should cover the rare edge cases-->
            <Viewbox x:Name="OutlineAnimation" Height="{Binding ActualHeight, ElementName=Notification, Converter={StaticResource AddConverter}, ConverterParameter=-10}" Width="{Binding ActualWidth, ElementName=Notification, Converter={StaticResource AddConverter}, ConverterParameter=-20}" Stretch="Fill">
                <Path Margin="-268,-231,0,0" Data="M735.55 298.21L735.55 298.21l0 3.01l0 2.61h0.01l0.03 24.19c0 0 0.77 23.78 19.28 42.25 c-15.35-20.07-15.28-42.25-15.28-42.25l-0.03-26.8l0.03-23.2c0 0-0.07-22.18 15.28-42.25c-18.51 18.48-19.28 42.25-19.28 42.25  L735.55 298.21z M679.77 251.04L679.77 251.04l2.91 0l2.71 0v-0.01l23.19-0.03c0 0 23.78-0.77 42.25-19.28  c-20.07 15.36-42.25 15.28-42.25 15.28l-25.9 0.03l-24.1-0.03c0 0-22.18 0.07-42.25-15.28c18.48 18.51 42.25 19.28 42.25 19.28  L679.77 251.04z M740.23 313.18c-1.73 8.88 6.35 8.76 7.23 7.12c-3.12 0.99-6.91-2.62-3.56-7.75c3-4.6 9.91-8.43 26.38-3.98  c31.88 8.61 41.9 0.49 41.9 0.49c-14.7 0.02-21.2-3.29-36.08-5.95c-5.47-0.98-10.14-1.45-14.12-1.53  c12.78-2.43 31.29-4.45 50.98-1.63c-2.72 2.35-3.4 4.42-3.4 4.42s1.14-2.22 4.77-4.22c7.61 1.18 15.37 3.09 23.03 5.99  c20.75 7.85 38.95 2.15 38.95 2.15s-16.45-0.87-36.52-6.62c-6.1-1.75-11.91-3.11-17.44-4.15c6.33-1.05 15.57-0.75 28.93 3.04  c14.25 4.04 31.73 5.83 50.32 5.45l0 0h135.82l0 0l27.17 0v-0.21c7.7-0.6 22.7-3.53 32.27-16.69c-18 14.33-37.21 12.81-37.21 12.81  v0.1l-14.06 0c3.78 0-110.49-0.76-140.09-0.95l0 0c-14.7 0.02-33.52-3.36-48.41-5.95c-20.57-3.57-32.37-1.45-39.07 1.66  c-29.58-4.79-50.51-0.24-62.27 3.98c0.54-0.23 1.09-0.47 1.67-0.7c9.93-3.96 15.57-7.31 17.61-17.27  c-3.54 6.86-8.06 9.19-18.46 13.47C741.06 302.65 739.54 308.93 740.23 313.18z M682.68 354.99l-2.91 0v0.01l-21.19 0.03  c0 0-23.78 0.77-42.25 19.28c20.07-15.35 42.25-15.28 42.25-15.28l24.1-0.03l25.9 0.03c0 0 22.18-0.07 42.25 15.28  c-18.48-18.51-42.25-19.28-42.25-19.28l-23.19-0.03v-0.01L682.68 354.99z M1083.58 326.65h0.03c0 0 0.97-17.3 15.31-35.3  c-16.5 12-18.94 30.99-19.26 34.67h-0.07l0 131.28h0v47.02c0.03 0.41 0.06 0.81 0.06 1.22c0 10.75-8.72 19.47-19.47 19.47  c-0.2 0-0.39-0.02-0.59-0.03v0.04h-47.72v0H717.58v0.01c-3.04-0.09-22.03-0.08-34.5 14c-11.93-13.46-29.8-14.07-34.01-14.01H354.3v0  h-47.72v-0.04c-0.2 0.01-0.39 0.03-0.59 0.03c-10.75 0-19.47-8.72-19.47-19.47c0-0.42 0.04-0.84 0.06-1.25v-11.87c0 0 0 0 0 0  l0-166.4h-0.07c-0.32-3.67-2.76-22.66-19.26-34.67c14.33 18 15.31 35.3 15.31 35.3h0.03l0 177.46c-0.03 0.49-0.05 0.99-0.05 1.49  c0 12.96 10.51 23.47 23.47 23.47c0.5 0 1-0.02 1.49-0.05h340.66v0.03c0 0 0.19-0.01 0.54-0.03h0.89V529  c4.46-0.03 18.72 0.74 32.91 10.72c-0.58 0.68-1.14 1.39-1.69 2.13c0.76-0.6 1.52-1.17 2.28-1.72c0.76 0.55 1.52 1.11 2.28 1.72  c-0.54-0.75-1.11-1.45-1.69-2.13c17.11-12.03 34.34-10.67 34.34-10.67v-0.03h340.66c0.49 0.03 0.99 0.05 1.49 0.05  c12.96 0 23.47-10.51 23.47-23.47c0-0.5-0.02-1-0.05-1.49L1083.58 326.65z M305.58 305.95v0.07l24.17 0l0 0h135.82l0 0  c18.59 0.38 36.07-1.41 50.32-5.45c13.27-3.77 22.48-4.09 28.81-3.06c-5.48 1.05-11.26 2.42-17.32 4.17  c-20.07 5.77-36.52 6.62-36.52 6.62s18.21 5.7 38.95-2.15c7.66-2.9 15.43-4.81 23.03-5.99c3.63 2 4.77 4.22 4.77 4.22  s-0.68-2.07-3.4-4.42c19.69-2.83 38.2-0.8 50.98 1.63c-3.99 0.08-8.66 0.55-14.12 1.53c-14.88 2.66-21.38 5.97-36.08 5.95  c0 0 10.02 8.12 41.9-0.49c16.47-4.45 23.38-0.62 26.38 3.98c3.35 5.13-0.44 8.75-3.56 7.75c0.87 1.64 8.96 1.76 7.22-7.12  c0.68-4.26-0.83-10.53-16.34-16.93c-10.4-4.29-14.92-6.62-18.46-13.47c1.95 9.55 7.23 13.03 16.42 16.79  c-12.05-3.94-31.88-7.45-59.5-2.84c-6.72-3.08-18.51-5.17-38.99-1.62c-14.9 2.59-33.71 5.97-48.41 5.95l0 0  c-29.05 0.19-139.62 0.92-140.17 0.95l-14.98 0v-0.09c0 0-19.21 1.53-37.21-12.81C281.08 305.31 301.07 306.01 305.58 305.95z   M627.61 301.22l-0.03 26.8c0 0 0.07 22.18-15.28 42.25c18.51-18.48 19.28-42.25 19.28-42.25l0.03-24.19h0.01l0-2.61l0-3.01h-0.01  l-0.03-20.19c0 0-0.77-23.78-19.28-42.25c15.35 20.07 15.28 42.25 15.28 42.25L627.61 301.22z" >
                    <Path.Fill>
                        <LinearGradientBrush StartPoint="0,0.5" EndPoint="1,0.5" >
                            <GradientStop Color="#00FFFFFF" Offset="0.5"/>
                            <GradientStop Color="#FFFFFFFF" Offset="0.5"/>
                            <GradientStop Color="#00FFFFFF" Offset="0.5"/>
                        </LinearGradientBrush>
                    </Path.Fill>
                    <Path.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            <BeginStoryboard>
                                <Storyboard BeginTime="0:0:0.5">
                                    <Storyboard.Children>
                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Path.Fill).(GradientBrush.GradientStops)[0].(GradientStop.Offset)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.75" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>

                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Path.Fill).(GradientBrush.GradientStops)[2].(GradientStop.Offset)">
                                                <EasingDoubleKeyFrame KeyTime="0" Value="0.5"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:0.75" Value="1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>

                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Path.Fill).(GradientBrush.GradientStops)[0].(GradientStop.Color)">
                                                <LinearColorKeyFrame KeyTime="0:0:0.5" Value="#00FFFFFF"/>
                                                <LinearColorKeyFrame KeyTime="0:0:1" Value="#FFFFFF"/>
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>

                                        <Storyboard>
                                            <ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Path.Fill).(GradientBrush.GradientStops)[2].(GradientStop.Color)">
                                                <LinearColorKeyFrame KeyTime="0:0:0.5" Value="#00FFFFFF"/>
                                                <LinearColorKeyFrame KeyTime="0:0:1" Value="#FFFFFF"/>
                                            </ColorAnimationUsingKeyFrames>
                                        </Storyboard>


                                        <Storyboard>
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)">
                                                <EasingDoubleKeyFrame KeyTime="0:0:1.5" Value="1"/>
                                                <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>

                                    </Storyboard.Children>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </Path.Triggers>
                </Path>
            </Viewbox>

            <ls:AnimatedImage x:Name="PopExplosion" Template="{StaticResource BaseAnimatedImage}" Time="0:0:0.033" ClipSize="216,240" RepeatBehavior="1x" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/BottomBar/VFX/popExplosion.png" HorizontalAlignment="Center" VerticalAlignment="Top" Visibility="Hidden" IsHitTestVisible="False" Margin="0,-80,0,0">
                <ls:AnimatedImage.RenderTransform>
                    <TransformGroup>
                        <TranslateTransform X="-8" Y="-10"/>
                    </TransformGroup>
                </ls:AnimatedImage.RenderTransform>
            </ls:AnimatedImage>
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                <Setter TargetName="Notification" Property="Width" Value="1100"/>
                <Setter TargetName="Content" Property="Width" Value="1000"/>
                <Setter TargetName="Notification" Property="MinHeight" Value="320"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    
    <!-- Connecting to server notification template -->
    <ControlTemplate x:Key="ConnectionToServerNotificationTemplate">
        <ls:LSNineSliceImage Style="{StaticResource GenericNotification9Slice}" Width="800">
            <StackPanel Orientation="Horizontal" Margin="20,0">
                <ContentControl Template="{StaticResource BusyElement}" Margin="-10,-30" VerticalAlignment="Center"/>
                <TextBlock Text="{Binding Source='heb72a172g73cfg4d8cg8471ge003ae79cdee',Converter={StaticResource TranslatedStringConverter}}" 
                           Style="{StaticResource NotificationTitleTextStyle}" VerticalAlignment="Center"
                           TextWrapping="Wrap" Width="700"/>
            </StackPanel>
        </ls:LSNineSliceImage>
    </ControlTemplate>

    <BitmapImage x:Key="WarningBg">pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/smallNotice_bg.png</BitmapImage>
    <BitmapImage x:Key="WarningIcon">pack://application:,,,/GustavNoesisGUI;component/Assets/Notification/ico_notice_cross.png</BitmapImage>

    <ControlTemplate x:Key="FixedLongRestNotificationTemplate">
        <ls:LSNineSliceImage ImageSource="{StaticResource WarningBg}" Slices="40" Padding="88,0" MinWidth="736" Height="136">
            <StackPanel x:Name="WarningNotificationPanel" Orientation="Horizontal" HorizontalAlignment="Center">
                <Image x:Name="frontImg" VerticalAlignment="Center" Source="{StaticResource WarningIcon}" Stretch="None"/>
                <StackPanel Orientation="Vertical" VerticalAlignment="Center">
                    <TextBlock VerticalAlignment="Center" Foreground="{StaticResource LS_alertTxtColor}" FontSize="{StaticResource ScaledMediumFontSize}" Text="{Binding Source='h1bd07eb6ga037g4936g9ab2gda204e6b4e3d', Converter={StaticResource TranslatedStringConverter}}" />
                    <TextBlock x:Name="LongRestJoinConversationsWarning" VerticalAlignment="Center" Foreground="{StaticResource LS_alertTxtColor}" FontSize="{StaticResource ScaledMediumFontSize}" Text="{Binding Source='h2e7226f1gb7f4g4278g86ceg27dad5ff1963', Converter={StaticResource TranslatedStringConverter}}"/>
                </StackPanel>
            </StackPanel>
        </ls:LSNineSliceImage>

        <ControlTemplate.Triggers>
            <DataTrigger Value ="True">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="DataContext.Data.LocalPlayers.Count" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                        <Binding Path="DataContext.Data.Players.Count" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="LongRestJoinConversationsWarning" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
        </ControlTemplate.Triggers>

    </ControlTemplate>

    <!-- Template for Common Notifications -->
    <ControlTemplate x:Key="CommonNotificationTemplate">
        <ls:LSNineSliceImage x:Name="CommonNotification" Style="{StaticResource GenericNotification9Slice}" >
            <TextBlock x:Name="Content" VerticalAlignment="Center" HorizontalAlignment="Center" TextAlignment="Center" TextWrapping="Wrap" MaxWidth="640">
                <TextBlock.Style>
                    <Style TargetType="TextBlock" BasedOn="{StaticResource NotificationTitleTextStyle}">
                        <Setter Property="Text" Value="{Binding Message.Text}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding Message.TextContext}" Value="Error">
                                <Setter Property="Foreground" Value="{DynamicResource LS_alertTxtColor}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding Message.TextContext}" Value="Warning">
                                <Setter Property="Foreground" Value="{DynamicResource LS_alertTxtColor}"/>
                            </DataTrigger>

                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Type}" Value="DeclutteredItems"/>
                                    <Condition Binding="{Binding Amount}" Value="1"/>
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="Text">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                <Binding Source="h320d17beg2bacg43f8g9006ga1609149bf0a"/>
                                                <Binding Path="Amount"/>
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Type}" Value="DeclutteredItems"/>
                                    <Condition Binding="{Binding Amount, Converter={StaticResource GreaterThanConverter}, ConverterParameter='1'}" Value="True"/>
                                </MultiDataTrigger.Conditions>
                                <MultiDataTrigger.Setters>
                                    <Setter Property="Text">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                <Binding Source="h50da4fd0g7050g43ebgb7a2g40b48ab1d991"/>
                                                <Binding Path="Amount"/>
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger.Setters>
                            </MultiDataTrigger>
                        </Style.Triggers>
                    </Style>
                </TextBlock.Style>
                
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Loaded">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Type}" Operator="Equal" RightOperand="WaypointUnlocked" />
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_WaypointDiscovered"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </TextBlock>
        </ls:LSNineSliceImage>
    </ControlTemplate>

    <!-- Template for Warning Notifications -->
    <ControlTemplate x:Key="WarningNotificationTemplate">
        <ls:LSNineSliceImage x:Name="WarningNotification" ImageSource="{StaticResource WarningBg}" Slices="40" Padding="88,0" MinWidth="736" Height="136">
            <StackPanel x:Name="WarningNotificationPanel" Orientation="Horizontal" HorizontalAlignment="Center">
                <Image x:Name="frontImg" VerticalAlignment="Center" Source="{StaticResource WarningIcon}" Stretch="None"/>
                <TextBlock x:Name="Content" VerticalAlignment="Center" Text="{Binding Message.Text}" Foreground="{DynamicResource LS_alertTxtColor}" FontSize="{DynamicResource ScaledMediumFontSize}"/>
            </StackPanel>
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="Loaded">
                    <ls:LSPlaySound Sound="UI_Shared_Error"/>
                </b:EventTrigger>
            </b:Interaction.Triggers>
        </ls:LSNineSliceImage>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                <Setter TargetName="WarningNotification" Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Notification_c/c_smallNotice_bg.png"/>
                <Setter TargetName="WarningNotification" Property="Padding" Value="115,0"/>
                <Setter TargetName="WarningNotification" Property="MinWidth" Value="808"/>
                <Setter TargetName="WarningNotification" Property="Height" Value="144"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="DeclutteredItems"/>
                    <Condition Binding="{Binding Amount}" Value="1"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="Content" Property="Text">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="h320d17beg2bacg43f8g9006ga1609149bf0a"/>
                                <Binding Path="Amount"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="DeclutteredItems"/>
                    <Condition Binding="{Binding Amount, Converter={StaticResource GreaterThanConverter}, ConverterParameter='1'}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="Content" Property="Text">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="h50da4fd0g7050g43ebgb7a2g40b48ab1d991"/>
                                <Binding Path="Amount"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="Notification.TemplateSwitcher" TargetType="Control">
        <Setter Property="Template" Value="{x:Null}"/>
        <Setter Property="IsHitTestVisible" Value="False"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Type}" Value="None">
                <Setter Property="Template" Value="{x:Null}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Common">
                <Setter Property="Template" Value="{StaticResource CommonNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="JournalUpdate">
                <Setter Property="Template" Value="{StaticResource JournalUpdateNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Quest_Done">
                <Setter Property="Template" Value="{StaticResource QuestDoneNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.CharacterMode ,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="InDialogue">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Mystery_Advanced">
                <Setter Property="Template" Value="{StaticResource JournalUpdateNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Mystery_Disabled">
                <Setter Property="Template" Value="{StaticResource JournalUpdateNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Region">
                <Setter Property="Template" Value="{StaticResource RegionNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="NewItem">
                <Setter Property="Template" Value="{StaticResource IconNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="NewSpell">
                <Setter Property="Template" Value="{StaticResource IconNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="RecipesUnlocked">
                <Setter Property="Template" Value="{StaticResource IconNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Warning">
                <Setter Property="Template" Value="{StaticResource WarningNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="System">
                <Setter Property="Template" Value="{StaticResource CommonNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="SavegameFinished">
                <Setter Property="Template" Value="{StaticResource CommonNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CombatInititiatives">
                <Setter Property="Template" Value="{StaticResource CombatInititiativesNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CombatStarted">
                <Setter Property="Template" Value="{StaticResource CombatStartedNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="CombatJoined">
                <Setter Property="Template" Value="{StaticResource CombatJoinedNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="FTBModeStarted">
                <Setter Property="Template" Value="{StaticResource FTBModeStartedNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="ApprovalRating">
                <Setter Property="Template" Value="{StaticResource ApprovalRatingNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="BackgroundGoal">
                <Setter Property="Template" Value="{StaticResource BackgroundGoalNotificationTemplate}"/>
                <Setter Property="IsHitTestVisible" Value="True"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="WildMagicSurge">
                <Setter Property="Template" Value="{StaticResource TopSquareIconNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="UnlockedEvent">
                <Setter Property="Template" Value="{StaticResource TopSquareIconNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="LockpickedEvent">
                <Setter Property="Template" Value="{StaticResource TopSquareIconNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="WaypointUnlocked">
                <Setter Property="Template" Value="{StaticResource CommonNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="FailedPrivateDialogJoinListener">
                <Setter Property="Template" Value="{StaticResource CommonNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="DeclutteredItems">
                <Setter Property="Template" Value="{StaticResource CommonNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="StartTurnFTB">
                <Setter Property="Template" Value="{StaticResource CombatTurnPlayerLabel}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="CombatTurn" />
                    <Condition Binding="{Binding CombatTurnPlayerRelation}" Value="Player" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource CombatTurnPlayerTemplate}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="CombatTurn" />
                    <Condition Binding="{Binding CombatTurnPlayerRelation}" Value="Enemy" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource CombatTurnEnemyTemplate}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="CombatTurn" />
                    <Condition Binding="{Binding CombatTurnPlayerRelation}" Value="Neutral" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource CombatTurnNeutralTemplate}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Type}" Value="CombatTurn" />
                    <Condition Binding="{Binding CombatTurnPlayerRelation}" Value="Ally" />
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="Template" Value="{StaticResource CombatTurnAllyTemplate}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="Notification.DialogTemplateSwitcher" TargetType="ContentControl">
        <Setter Property="Template" Value="{x:Null}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Type}" Value="None">
                <Setter Property="Template" Value="{x:Null}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="JournalUpdate">
                <Setter Property="Template" Value="{StaticResource JournalUpdateDialogueNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="PassiveRoll">
                <Setter Property="Template" Value="{StaticResource PassiveRollDialogueNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="ApprovalRating">
                <Setter Property="Template" Value="{StaticResource ApprovalRatingChangeDialogueNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="System">
                <Setter Property="Template" Value="{StaticResource SystemDialogueNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="FailedPrivateDialogJoinSpeaker">
                <Setter Property="Template" Value="{StaticResource ApprovalRatingChangeDialogueNotificationTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="Warning">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <TextBlock Style="{StaticResource DialogueNotificationTextStyle}" 
                                       Text="{Binding Message.Text}" 
                                       Foreground="{DynamicResource LS_alertTxtColor}"/>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
            <DataTrigger Binding="{Binding Type}" Value="BackgroundGoal">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Left">
                                
                                <TextBlock Style="{StaticResource DialogueNotificationTextStyle}" 
                                           Text="{Binding Title}" 
                                           Visibility="{Binding Title, Converter={StaticResource NullToCollapsedConverter}}"/>

                                <Image HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,0,8,0" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Resources/ico_classRes_inspiration.png" Stretch="None"/>

                                <TextBlock Style="{StaticResource DialogueNotificationTextStyle}" 
                                           Text="{Binding Message.Text}"/>
                                
                            </StackPanel>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Unified tutorials -->

    <Duration x:Key="SideTutorialStoryboardDuration">0:0:0.5</Duration>
    <System:Double x:Key="SideTutorialLeftMargin">-150</System:Double>
    <System:Double x:Key="SideTutorialRightMargin">150</System:Double>
 
    <Storyboard x:Key="SideTutorialLeftIn">
        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="{StaticResource SideTutorialStoryboardDuration}"/>
        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.(TranslateTransform.X)" From="{StaticResource SideTutorialLeftMargin}" To="0" Duration="{StaticResource SideTutorialStoryboardDuration}">
            <DoubleAnimation.EasingFunction>
                <QuarticEase EasingMode="EaseOut"/>
            </DoubleAnimation.EasingFunction>
        </DoubleAnimation>
    </Storyboard>
    <Storyboard x:Key="SideTutorialRightIn">
        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="{StaticResource SideTutorialStoryboardDuration}"/>
        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.(TranslateTransform.X)" From="{StaticResource SideTutorialRightMargin}" To="0" Duration="{StaticResource SideTutorialStoryboardDuration}">
            <DoubleAnimation.EasingFunction>
                <QuarticEase EasingMode="EaseOut"/>
            </DoubleAnimation.EasingFunction>
        </DoubleAnimation>
    </Storyboard>

    <Storyboard x:Key="SideTutorialLeftOut">
        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="{StaticResource SideTutorialStoryboardDuration}"/>
        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.(TranslateTransform.X)" From="0" To="{StaticResource SideTutorialLeftMargin}" Duration="{StaticResource SideTutorialStoryboardDuration}">
            <DoubleAnimation.EasingFunction>
                <QuarticEase EasingMode="EaseIn"/>
            </DoubleAnimation.EasingFunction>
        </DoubleAnimation>
    </Storyboard>
    <Storyboard x:Key="SideTutorialRightOut">
        <DoubleAnimation Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="{StaticResource SideTutorialStoryboardDuration}"/>
        <DoubleAnimation Storyboard.TargetProperty="RenderTransform.(TranslateTransform.X)" From="0" To="{StaticResource SideTutorialRightMargin}" Duration="{StaticResource SideTutorialStoryboardDuration}">
            <DoubleAnimation.EasingFunction>
                <QuarticEase EasingMode="EaseIn"/>
            </DoubleAnimation.EasingFunction>
        </DoubleAnimation>
    </Storyboard>


    <Style x:Key="SideTutorialsBackgroundPADStyle" TargetType="ls:LSNineSliceImage" BasedOn="{StaticResource {x:Type ls:LSNineSliceImage}}">
        <Setter Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_tutorial_notice_bg.png" />
        <Setter Property="Slices" Value="80,144,80,102" />
        <Setter Property="MinWidth" Value="160" />
        <Setter Property="MinHeight" Value="296" />
        <Setter Property="Padding" Value="80,52,60,52" />
        <Setter Property="Focusable" Value="False" />
        <!-- Compensate the big shadow surrounding the image -->
        <Setter Property="Margin" Value="-20" />
    </Style>
    
    <Style x:Key="SideTutorialsFramePADStyle" TargetType="ls:LSNineSliceImage" BasedOn="{StaticResource {x:Type ls:LSNineSliceImage}}">
        <Setter Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_tutorial_notice_frameshape.png" />
        <Setter Property="Slices" Value="80,144,80,102" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="Opacity" Value="1" />
        <Setter Property="Visibility" Value="Collapsed"/>

    </Style>

    <Style x:Key="SideTutorialsBackgroundKBMStyle" TargetType="ls:LSNineSliceImage" BasedOn="{StaticResource {x:Type ls:LSNineSliceImage}}">
        <Setter Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Tutorial/tutorial_notice_bg.png" />
        <Setter Property="Slices" Value="68,68,140,152" />
        <Setter Property="MinWidth" Value="210" />
        <Setter Property="MinHeight" Value="220" />
        <Setter Property="Padding" Value="100,48,120,60" />
        <Setter Property="Focusable" Value="False" />
        <!-- Compensate the big shadow surrounding the image -->
        <Setter Property="Margin" Value="-12" />
    </Style>

    <Style x:Key="ParamContentControllerStyle" TargetType="ContentControl">
        <Setter Property="Margin" Value="{StaticResource ScaledInlineControllerHintMargin}" />
        <Setter Property="Template" Value="{StaticResource ControllerButton.ImageSwitcher}"/>
        <Setter Property="Width" Value="{StaticResource ScaledControllerHintSize}"/>
        <Setter Property="Height" Value="{StaticResource ScaledControllerHintSize}"/>
    </Style>

    <Style x:Key="SideTutorialsStyle" TargetType="ItemsControl">
        <Setter Property="ItemsSource" Value="{Binding CurrentPlayer.UIData.UnifiedTutorials}"/>
        <Setter Property="Visibility" Value="{Binding CurrentPlayer.UIData.UnifiedTutorials.Count, Converter={StaticResource CountToVisibilityConverter}}"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="220,220,0,0"/>

        <Setter Property="ItemsPanel">
            <Setter.Value>
                <ItemsPanelTemplate>
                    <StackPanel/>
                </ItemsPanelTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemTemplate">
            <Setter.Value>
                <DataTemplate DataType="{x:Type ls:VMUnifiedTutorialNotification}">
                    <DataTemplate.Resources>
                        <Style x:Key="ParamContentStyle" TargetType="ContentControl">
                            <Setter Property="Margin" Value="0,14,0,-14" />
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate>
                                        <ControlTemplate.Resources>
                                            <BitmapImage x:Key="EntryBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_square_d.png" />
                                        </ControlTemplate.Resources>
                                        <ls:LSNineSliceImage ImageSource="{StaticResource EntryBackground}" Slices="12 12 12 12" MinHeight="46" MinWidth="46" MaxWidth="{DynamicResource MaxTooltipContentWidth}" Padding="10,0,10,0">
                                            <TextBlock Text="{Binding Shortcut}" Foreground="{DynamicResource TooltipColor.Secondary}" FontSize="{StaticResource SmallFontSize}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,2,0,-2" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>
                                        </ls:LSNineSliceImage>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>
                        </Style>

                        <Style x:Key="padHintButtonStyle" TargetType="ls:LSButton">
                            <Setter Property="Visibility" Value="Hidden"/>
                            <Setter Property="IsEnabled" Value="False"/>
                            <Setter Property="EatInput" Value="False"/>
                            <Setter Property="VerticalAlignment" Value="Center"/>
                            <Setter Property="Width" Value="{StaticResource ScaledControllerHintSizeSmall}"/>
                            <Setter Property="Height" Value="{StaticResource ScaledControllerHintSizeSmall}"/>
                            <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                            <Setter Property="Template" Value="{StaticResource ControllerButton.ImageSwitcher}"/>
                        </Style>

                        <Style x:Key="KBMTextStyle" TargetType="TextBlock" BasedOn="{StaticResource TooltipDescriptionStyle}">
                            <Setter Property="Width" Value="600"/>
                            <Setter Property="Foreground" Value="{StaticResource LS_extraspecialTxtColor}"/>
                            <Setter Property="FontSize" Value="{StaticResource ScaledMediumFontSize}"/>
                        </Style>

                        <BitmapImage x:Key="BackgroundIconTutorial" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tutorial/tutorial_notice_icon_bg.png" />
                        <BitmapImage x:Key="IconTutorial" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tutorial/ico_tutorial_notice.png" />
                        <BitmapImage x:Key="HintsSeparatorImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tutorial/tutorial_notice_divider.png" />
                    </DataTemplate.Resources>


                    <ls:LSNineSliceImage x:Name="SideTutorialRoot" Style="{StaticResource SideTutorialsBackgroundKBMStyle}" Width="828" HorizontalAlignment="Left">
                        <b:Interaction.Triggers>
                            <!-- Auto close  -->
                            <b:TimerTrigger EventName="Loaded" MillisecondsPerTick="{Binding DataContext.LifeTime, ElementName=SideTutorialRoot}">
                                <b:InvokeCommandAction Command="{Binding DataContext.HideUnifiedTutorialCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding DataContext, ElementName=SideTutorialRoot}"/>
                            </b:TimerTrigger>

                            <!-- In/out animation -->
                            <b:EventTrigger EventName="Loaded">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="NotEqual" RightOperand="Right"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <ls:LSControlStoryboard Storyboard="{StaticResource SideTutorialLeftIn}"
                                                        Target="{Binding RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}}"/>
                                <ls:LSPlaySound Sound="UI_HUD_SideTutorial_Notification"/>
                            </b:EventTrigger>

                            <b:DataTrigger Binding="{Binding DataContext.MustHide, ElementName=SideTutorialRoot}" Value="True">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="NotEqual" RightOperand="Right"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <ls:LSControlStoryboard Storyboard="{StaticResource SideTutorialLeftOut}"
                                                        Target="{Binding RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}}"
                                                        CompletedCommand="{Binding DataContext.CloseUnifiedTutorialCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                                        CompletedCommandParameter="{Binding DataContext, ElementName=SideTutorialRoot}"/>
                            </b:DataTrigger>

                            <!-- In/out animation for split screen -->
                            <b:EventTrigger EventName="Loaded">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="Right"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <ls:LSControlStoryboard Storyboard="{StaticResource SideTutorialRightIn}"
                                                        Target="{Binding RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}}"/>
                                <ls:LSPlaySound Sound="UI_HUD_SideTutorial_Notification"/>
                            </b:EventTrigger>

                            <b:DataTrigger Binding="{Binding DataContext.MustHide, ElementName=SideTutorialRoot}" Value="True">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="Right"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <ls:LSControlStoryboard Storyboard="{StaticResource SideTutorialRightOut}"
                                                        Target="{Binding RelativeSource={RelativeSource AncestorType={x:Type ContentPresenter}}}"
                                                        CompletedCommand="{Binding DataContext.CloseUnifiedTutorialCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                                        CompletedCommandParameter="{Binding DataContext, ElementName=SideTutorialRoot}"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>

                        <ls:LSNineSliceImage.Margin>
                            <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                <Binding Path="PositionOffsetX"/>
                                <Binding Path="PositionOffsetY"/>
                                <Binding Source="0"/>
                                <Binding Source="0"/>
                            </MultiBinding>
                        </ls:LSNineSliceImage.Margin>

                        
                        
                        <Grid ls:TooltipExtender.Owner="{Binding DataContext.CurrentPlayer.SelectedCharacter, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}">

                            <Grid Margin="-80,-52,-60,-52">
                            <Grid.OpacityMask>
                                <LinearGradientBrush x:Name="highlightImageMask" StartPoint="0,0" EndPoint="1,1" >
                                        <LinearGradientBrush.RelativeTransform>
                                            <TransformGroup>
                                                <ScaleTransform ScaleX="1.0" ScaleY="1.0" />
                                                <RotateTransform Angle="0" CenterX="0.5" CenterY="0.5"  />
                                                <TranslateTransform X="0.0" Y="0.0" />
                                            </TransformGroup>
                                        </LinearGradientBrush.RelativeTransform>
                                        <GradientStop Offset="0" Color="#00ffffff"/>
                                        <GradientStop Offset="0.1" Color="#00ffffff"/>
                                        <GradientStop Offset="0.5" Color="#ffffff"/>
                                        <GradientStop Offset="0.9" Color="#00ffffff"/>
                                        <GradientStop Offset="1" Color="#00ffffff"/>
                                </LinearGradientBrush>
                            </Grid.OpacityMask>
                            <Grid.Triggers>
                                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                        <BeginStoryboard Name="Rotatorr">
                                            <!-- the variables here set up a repeat of the animation -->
                                            <Storyboard AutoReverse="False" RepeatBehavior="Forever" Duration="0:0:6">
                                                <DoubleAnimation Storyboard.TargetName="highlightImageMask" Storyboard.TargetProperty="(LinearGradientBrush.RelativeTransform).(TransformGroup.Children)[2].(TranslateTransform.Y)" From="-3.0" To="3.0" Duration="0:0:3">
                                                    <DoubleAnimation.EasingFunction>
                                                        <QuarticEase EasingMode="EaseInOut" />
                                                    </DoubleAnimation.EasingFunction>
                                                </DoubleAnimation>
                                            </Storyboard>
                                        </BeginStoryboard>
                                </EventTrigger>
                                <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                                        <StopStoryboard BeginStoryboardName="Rotatorr"/>
                                </EventTrigger>
                            </Grid.Triggers>

                                <ls:LSNineSliceImage x:Name="SideTutorialFrame" Style="{StaticResource SideTutorialsFramePADStyle}" Height="{Binding ElementName=SideTutorialRoot, Path=ActualHeight}"/>

                            </Grid>


                            <Grid x:Name="TutorialIconHolder" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="-116,-8,0,0">
                                <Image Stretch="None" Source="{StaticResource BackgroundIconTutorial}"/>
                                <Image Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Top" Source="{StaticResource IconTutorial}" Margin="0,8,0,0"/>
                            </Grid>

                            <Button x:Name="KBMDismissButton" 
                                    Style="{DynamicResource SmallCloseButton}" 
                                    Command="{Binding DataContext.HideUnifiedTutorialCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                                    CommandParameter="{Binding DataContext, ElementName=SideTutorialRoot}" 
                                    HorizontalAlignment="Right" 
                                    VerticalAlignment="Top"
                                    Margin="0,-20,-90,0"/>

                            <StackPanel x:Name="DescriptionHolder">
                                <TextBlock x:Name="TitleDescription" Style="{StaticResource TooltipTitleStyle}" Foreground="{StaticResource LS_tint100}" FontSize="{StaticResource ScaledBigFontSize}" FontWeight="DemiBold" Text="{Binding Title}"/>

                                <TextBlock x:Name="KBDescription" Style="{StaticResource KBMTextStyle}" Visibility="Visible" Margin="0,12,0,0" Panel.ZIndex="1">
                                    <b:Interaction.Behaviors>
                                        <ls:CtxTransStringRunGeneratorBehavior LocaSource="{Binding KBDescription}" PlayerId="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" NamedParamContentStyle="{StaticResource ParamContentStyle}"/>
                                    </b:Interaction.Behaviors>
                                </TextBlock>
                                <TextBlock x:Name="PadDescription" Style="{StaticResource TooltipDescriptionStyle}" Visibility="Collapsed" Width="auto" Margin="0,0,0,20">
                                    <b:Interaction.Behaviors>
                                        <ls:CtxTransStringRunGeneratorBehavior LocaSource="{Binding PadDescription}" PlayerId="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" NamedParamContentStyle="{StaticResource ParamContentControllerStyle}"/>
                                    </b:Interaction.Behaviors>
                                </TextBlock>

                                <Image x:Name="HintsSeparator" HorizontalAlignment="Center" Stretch="None" Visibility="Collapsed" Source="{StaticResource HintsSeparatorImage}" Margin="0,-12,0,-40" />

                                <TextBlock x:Name="KBHints" Style="{StaticResource KBMTextStyle}" Visibility="Collapsed">
                                    <b:Interaction.Behaviors>
                                        <ls:CtxTransStringRunGeneratorBehavior LocaSource="{Binding KBInputHints}" PlayerId="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" NamedParamContentStyle="{StaticResource ParamContentStyle}"/>
                                    </b:Interaction.Behaviors>
                                </TextBlock>
                                <TextBlock x:Name="PadHints" Style="{StaticResource TooltipDescriptionStyle}" Foreground="{StaticResource LS_accent100TxtColor}" Visibility="Collapsed" Margin="0,0,0,0">
                                    <b:Interaction.Behaviors>
                                        <ls:CtxTransStringRunGeneratorBehavior LocaSource="{Binding PadInputHints}" PlayerId="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" NamedParamContentStyle="{StaticResource ParamContentControllerStyle}"/>
                                    </b:Interaction.Behaviors>
                                </TextBlock>

                                <StackPanel x:Name="padDismissPrompt" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Bottom" Visibility="Collapsed">
                                    <TextBlock x:Name="dismissPrompt" TextAlignment="Right" Style="{StaticResource TooltipDescriptionStyle}" VerticalAlignment="Center" Text="{Binding Source='hc5fad505g4082g4abbga229g2363e7b2372b', Converter={StaticResource TranslatedStringConverter}}" />

                                    <ls:LSButton x:Name="SkipTutorialPADInput" BoundEvent="UISelectionLeft" ContentTemplate="{StaticResource ControllerButtonHintImageOnly}" Content="{Binding DataContext.CurrentPlayer.UIData.InputEvents, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UISelectionLeft'}" Command="{Binding DataContext.HideUnifiedTutorialCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"  CommandParameter="{Binding DataContext, ElementName=SideTutorialRoot}" Margin="-12,0,20,0" />
                                </StackPanel>

                            </StackPanel>
                            
                        </Grid>
                        
                        
                    </ls:LSNineSliceImage>

                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Right">
                            <Setter TargetName="SideTutorialRoot" Property="HorizontalAlignment" Value="Right"/>
                            <Setter TargetName="SideTutorialRoot" Property="Width" Value="600"/>
                            <Setter TargetName="SideTutorialRoot" Property="Margin">
                                <Setter.Value>
                                    <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                        <Binding Source="0"/>
                                        <Binding Path="PositionOffsetY"/>
                                        <Binding Path="PositionOffsetX"/>
                                        <Binding Source="0"/>
                                    </MultiBinding>
                                </Setter.Value>
                            </Setter>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Left">
                            <Setter TargetName="SideTutorialRoot" Property="HorizontalAlignment" Value="Left"/>
                            <Setter TargetName="SideTutorialRoot" Property="Margin" Value="0,0,0,0"/>
                            <Setter TargetName="SideTutorialRoot" Property="Width" Value="600"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller">
                            <Setter TargetName="KBMDismissButton" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="KBDescription" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="PadDescription" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="SideTutorialFrame" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="SideTutorialRoot" Property="Style" Value="{StaticResource SideTutorialsBackgroundPADStyle}"/>
                            <Setter TargetName="SideTutorialFrame" Property="Style" Value="{StaticResource SideTutorialsFramePADStyle}"/>
                            <Setter TargetName="SkipTutorialPADInput" Property="IsEnabled" Value="True"/>
                            <Setter TargetName="padDismissPrompt" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="TitleDescription" Property="MinHeight" Value="110"/>
                            <Setter TargetName="TitleDescription" Property="FontSize" Value="{StaticResource ScaledLargeFontSize}"/>
                            <Setter TargetName="TutorialIconHolder" Property="Margin" Value="-86,0,0,0"/>
                            <Setter TargetName="SideTutorialRoot" Property="Width" Value="888"/>
                        </DataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Keyboard"/>
                                <Condition Binding="{Binding PadInputHints, Converter={StaticResource NullToBoolFalseConverter}, ConverterParameter='EmptyString'}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="SideTutorialFrame" Property="Visibility" Value="Collapsed" />
                                <Setter TargetName="HintsSeparator" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="KBHints" Property="Visibility" Value="Visible"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>

                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller"/>
                                <Condition Binding="{Binding PadInputHints, Converter={StaticResource NullToBoolFalseConverter}, ConverterParameter='EmptyString'}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter TargetName="PadHints" Property="Visibility" Value="Visible"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </Setter.Value>
        </Setter>

        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <Style TargetType="ContentPresenter">
                    <Setter Property="Visibility" Value="{Binding IsSideTutorial, Converter={StaticResource BoolToVisibleConverter}}"/>
                    <Setter Property="RenderTransform">
                        <Setter.Value>
                            <TranslateTransform />
                        </Setter.Value>
                    </Setter>
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Keyboard"/>
                                <Condition Binding="{Binding InputType}" Value="TutorialInputGamepad"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding DataContext.Data.UIInputMethod, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Controller"/>
                                <Condition Binding="{Binding InputType}" Value="TutorialInputKeyboard"/>
                            </MultiDataTrigger.Conditions>
                            <MultiDataTrigger.Setters>
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </MultiDataTrigger.Setters>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </Setter.Value>
        </Setter>

       
    </Style>

</ResourceDictionary>