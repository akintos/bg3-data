<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
					mc:Ignorable="d">
    
    <Storyboard x:Key="SelectorStoryboard" RepeatBehavior="Forever" AutoReverse="True">
        <DoubleAnimation Storyboard.TargetName="Img1" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:1"/>
        <DoubleAnimation Storyboard.TargetName="Img2" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:1"/>
        <DoubleAnimation Storyboard.TargetName="Img5" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:1"/>
        <DoubleAnimation Storyboard.TargetName="Img6" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:1"/>
    </Storyboard>
    <Storyboard x:Key="SelectorStoryboard2" RepeatBehavior="Forever" AutoReverse="True">
        <DoubleAnimation Storyboard.TargetName="Img3" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:2"/>
        <DoubleAnimation Storyboard.TargetName="Img4" Storyboard.TargetProperty="Opacity" To="1" Duration="0:0:2"/>
    </Storyboard>
    <Storyboard x:Key="SelectorStoryboard3" RepeatBehavior="Forever" AutoReverse="True">
        <DoubleAnimation Storyboard.TargetName="HighlightBG" Storyboard.TargetProperty="Opacity" From="0.45" To="0.55" Duration="0:0:3"/>
    </Storyboard>
    <Storyboard x:Key="SelectorStoryboard5">
        <DoubleAnimation Storyboard.TargetName="HighlightBG" Storyboard.TargetProperty="Opacity" To="0" Duration="0:0:0.3"/>
    </Storyboard>
    <Storyboard x:Key="SelectorStoryboardImageMask">
        <DoubleAnimation Storyboard.TargetName="highlightImageMask" Storyboard.TargetProperty="(ImageBrush.RelativeTransform).(TransformGroup.Children)[1].(RotateTransform.Angle)" To="360" Duration="0:0:10" RepeatBehavior="Forever" />
    </Storyboard>

    <BitmapImage x:Key="ButtonBgBold" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_list_buttonBG_bold.png"/>
    <BitmapImage x:Key="ButtonBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_list_buttonBG_generalNew.png"/>
    <BitmapImage x:Key="ButtonBg_h1" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_list_buttonBGsmall_h.png"/>
    <BitmapImage x:Key="ButtonBg_h" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_list_buttonBG_h.png" />
    <BitmapImage x:Key="ButtonBg_h2" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_list_buttonBG_h2.png"/>
    <BitmapImage x:Key="ButtonBgDisabled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_list_buttonBG_generalDisabled.png"/>
    <BitmapImage x:Key="ButtonMask" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/highlightMask.png"/>

    <DataTemplate x:Key="FocusableButtonContentTemplate">
        <TextBlock IsEnabled="{TemplateBinding IsEnabled}" VerticalAlignment="Center" HorizontalAlignment="Stretch" TextAlignment="Center"
                   Foreground="{TemplateBinding TextElement.Foreground}" Text="{TemplateBinding Content}"/>
    </DataTemplate>

    <ControlTemplate x:Key="FocusableBorderTemplateSlot">
        <Grid>
            <Grid.Triggers>
                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                    <BeginStoryboard Name="FocusSb2" Storyboard="{StaticResource SelectorStoryboard2}"/>
                </EventTrigger>
                <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                    <StopStoryboard  BeginStoryboardName="FocusSb2"/>
                </EventTrigger>
            </Grid.Triggers>

            <ls:LSNineSliceImage x:Name="Img3" Margin="-20,-20,0,0" Height="150" Width="150"
                                                         ImageSource="{StaticResource ButtonBg_h1}" Slices="34" Opacity="1"/>
            <ls:LSNineSliceImage x:Name="Img4" Margin="-20,-20,0,0" Height="150" Width="150"
                                                         ImageSource="{StaticResource ButtonBg_h2}" Slices="34" Opacity="0"/>
        </Grid>

    </ControlTemplate>

    <ControlTemplate x:Key="FocusableBorderTemplate">
        <Grid>
            <Grid.OpacityMask>
                <LinearGradientBrush StartPoint="0,1" EndPoint="1,0" >
                    <GradientStop Offset="0" Color="#20ffffff"/>
                    <GradientStop Offset="0.5" Color="#ffffff"/>
                    <GradientStop Offset="1" Color="#20ffffff"/>
                </LinearGradientBrush>
            </Grid.OpacityMask>
            <Grid>
                <Grid.OpacityMask >
                    <ImageBrush x:Name="highlightImageMask"  ImageSource="{StaticResource ButtonMask}" Stretch="Fill" >
                        <ImageBrush.RelativeTransform>
                            <TransformGroup>
                                <ScaleTransform ScaleX="1.3" ScaleY="1.3" />
                                <RotateTransform Angle="0" CenterX="0.5" CenterY="0.5"  />
                            </TransformGroup>
                        </ImageBrush.RelativeTransform>
                    </ImageBrush>
                </Grid.OpacityMask>
                <Grid.Triggers>
                    <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                        <BeginStoryboard Name="FocusSb2" Storyboard="{StaticResource SelectorStoryboardImageMask}"/>
                    </EventTrigger>
                    <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                        <StopStoryboard BeginStoryboardName="FocusSb2"/>
                    </EventTrigger>
                </Grid.Triggers>
                <ls:LSNineSliceImage x:Name="Img1" ImageSource="{StaticResource ButtonBg_h1}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="-20,-20,-20,-20" Slices="35" Opacity="1"/>
            </Grid>
            <ls:LSNineSliceImage x:Name="Img2" ImageSource="{StaticResource ButtonBg_h1}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="-20,-20,-20,-20" Slices="35" Opacity="0.6"/>
            </Grid>

    </ControlTemplate>

    <Style x:Key="FocusableBorderStyle" TargetType="Control">
        <Setter Property="Template" Value="{x:Null}"/>
        <Style.Triggers>
            <Trigger Property="Visibility" Value="Visible">
                <Setter Property="Template" Value="{StaticResource FocusableBorderTemplate}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="FocusableButtonTemplate" TargetType="{x:Type ls:LSButton}">
        <ls:LSNineSliceImage x:Name="Bg" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="110" ImageSource="{StaticResource ButtonBg}" Slices="24,40,24,24">
            <Grid>
                <ContentPresenter x:Name="Content" IsEnabled="False" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>

                <Control x:Name="Frame" Visibility="Hidden" Template="{StaticResource FocusableBorderTemplate}"/>
            </Grid>
        </ls:LSNineSliceImage>
        <ControlTemplate.Triggers>
            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                <Setter TargetName="Bg" Property="ImageSource" Value="{StaticResource ButtonBg_h}"/>
                <Setter TargetName="Content" Property="IsEnabled" Value="True"/>
                <Setter TargetName="Frame" Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="FocusableButtonStyle" TargetType="{x:Type ls:LSButton}">
        <Setter Property="Template" Value="{StaticResource FocusableButtonTemplate}"/>
        <Setter Property="ContentTemplate" Value="{StaticResource FocusableButtonContentTemplate}"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="ls:MoveFocus.Focusable" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="{StaticResource LS_accent75TxtColor}"/>
        <Setter Property="Margin" Value="180, 30"/>
        <Setter Property="Padding" Value="0"/>
        <Style.Triggers>
            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                <Setter Property="Foreground" Value="{StaticResource LS_PadSelectorBGColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="FocusableButtonTemplateMinimal" TargetType="{x:Type ls:LSButton}">
        <Grid x:Name="Bg" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="73" >
            <Rectangle x:Name="HighlightBG" Fill="{StaticResource LS_PadSelectorBGColor}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Opacity="0" />
            <ContentPresenter x:Name="Content" IsEnabled="False" VerticalAlignment="Center" HorizontalAlignment="Stretch"  TextElement.Foreground="{TemplateBinding Foreground}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />

            <Control x:Name="Frame" Visibility="Hidden" Template="{StaticResource FocusableBorderTemplate}"/>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                <Setter TargetName="Content" Property="IsEnabled" Value="True"/>
                <Setter TargetName="Frame" Property="Visibility" Value="Visible"/>
                <Trigger.EnterActions>
                    <BeginStoryboard Name="FocusSb3" Storyboard="{StaticResource SelectorStoryboard3}"/>
                    <StopStoryboard BeginStoryboardName="FocusSb5" />
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard Name="FocusSb5" Storyboard="{StaticResource SelectorStoryboard5}"/>
                    <StopStoryboard BeginStoryboardName="FocusSb3" />
                </Trigger.ExitActions>
            </Trigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="FocusableButtonStyleMinimal" TargetType="{x:Type ls:LSButton}">
        <Setter Property="Template" Value="{StaticResource FocusableButtonTemplateMinimal}"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="ls:MoveFocus.Focusable" Value="True"/>
        <Setter Property="ls:MoveFocus.FocusMovementMode" Value="MainAxisTunnel" />
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
        <Setter Property="Padding" Value="10,4"/>

        <Style.Triggers>
            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                <Setter Property="Foreground" Value="{StaticResource LS_selectedTextPad}"/>
            </Trigger>
        </Style.Triggers>
    </Style>


    <ControlTemplate x:Key="FocusableTextBoxTemplate" TargetType="{x:Type ls:LSTextBox}">
        <ls:LSNineSliceImage x:Name="Bg" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="110" ImageSource="{StaticResource ButtonBg}"
                                                         Slices="24,40,24,24">
            <Grid>
                <ScrollViewer x:Name="PART_ContentHost" Focusable="False" IsEnabled="False" Margin="4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                                          Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}"
                                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                <Grid x:Name="Frame" Visibility="Hidden" Margin="-18">
                    <Grid.Triggers>
                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                            <BeginStoryboard Name="FocusSb"  Storyboard="{StaticResource SelectorStoryboard}"/>
                        </EventTrigger>
                        <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                            <StopStoryboard  BeginStoryboardName="FocusSb"/>
                        </EventTrigger>
                    </Grid.Triggers>
                    <ls:LSNineSliceImage x:Name="Img1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="110"
                                                                     ImageSource="{StaticResource ButtonBg_h1}" Slices="34" Opacity="1"/>
                    <ls:LSNineSliceImage x:Name="Img2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="110"
                                                                     ImageSource="{StaticResource ButtonBg_h2}" Slices="34" Opacity="0"/>
                </Grid>
            </Grid>
        </ls:LSNineSliceImage>
        <ControlTemplate.Triggers>
            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                <Setter TargetName="Bg" Property="ImageSource" Value="{StaticResource ButtonBg_h}"/>
                <Setter TargetName="PART_ContentHost" Property="IsEnabled" Value="True"/>
                <Setter TargetName="Frame" Property="Visibility" Value="Visible"/>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="FocusableTextBoxStyle" TargetType="{x:Type ls:LSTextBox}" BasedOn="{StaticResource {x:Type ls:LSTextBox}}">
        <Setter Property="Template" Value="{StaticResource FocusableTextBoxTemplate}"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="ls:MoveFocus.Focusable" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{StaticResource LS_accent75TxtColor}"/>
        <Setter Property="Padding" Value="10,4"/>
        <Setter Property="Margin" Value="180, 30"/>
        <Setter Property="SelectTextOnFocus" Value="False"/>
        <Style.Triggers>
            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                <Setter Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Storyboard x:Key="Journal.SelectionHighlightAnimation">
        <DoubleAnimation Storyboard.TargetName="Highlight1" Storyboard.TargetProperty="Opacity" From="1" To="0" Duration="0:0:3" AutoReverse="True" RepeatBehavior="Forever"/>
        <DoubleAnimation Storyboard.TargetName="Highlight2" Storyboard.TargetProperty="Opacity" From="0" To="1" Duration="0:0:3" AutoReverse="True" RepeatBehavior="Forever"/>
    </Storyboard>


    <Style x:Key="FocusableContentControlStyle" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ls:LSNineSliceImage x:Name="Bg" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="108" ImageSource="{StaticResource ButtonBg}" Slices="24,40,24,24">
                        <ContentPresenter x:Name="Content" IsEnabled="False" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                    </ls:LSNineSliceImage>
                    <ControlTemplate.Triggers>
                        <Trigger Property="BorderThickness" Value="0">
                            <Setter TargetName="Bg" Property="ImageSource" Value="{StaticResource ButtonBgDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="ls:MoveFocus.Focusable" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="{StaticResource LS_accent75TxtColor}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Style.Triggers>
            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                <Setter Property="Foreground" Value="{StaticResource LS_selectedTextPad}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContentControl}">
                            <ls:LSNineSliceImage x:Name="Bg" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="108" ImageSource="{StaticResource ButtonBg}" Slices="24,40,24,24">
                                <Grid>
                                    <Rectangle x:Name="HighlightBG" Fill="{StaticResource LS_PadSelectorBGColor}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Opacity="0" />

                                    <ContentPresenter x:Name="Content" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>

                                    <Control x:Name="Frame" Visibility="Hidden" Template="{StaticResource FocusableBorderTemplate}"/>
                                </Grid>
                            </ls:LSNineSliceImage>
                            <ControlTemplate.Triggers>
                                <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                                    <Setter TargetName="Frame" Property="Visibility" Value="Visible"/>
                                    <Trigger.EnterActions>
                                        <BeginStoryboard Name="FocusSb3"  Storyboard="{StaticResource SelectorStoryboard3}"/>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <StopStoryboard BeginStoryboardName="FocusSb3" />
                                    </Trigger.ExitActions>
                                </Trigger>
                                <Trigger Property="BorderThickness" Value="0">
                                    <Setter TargetName="Bg" Property="ImageSource" Value="{StaticResource ButtonBgDisabled}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FocusableContentControlStyleBold" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <ls:LSNineSliceImage x:Name="Bg" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="110" ImageSource="{StaticResource ButtonBgBold}" Slices="24,40,24,24">
                        <Grid>
                            <ContentPresenter x:Name="Content" IsEnabled="False" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}" Content="{TemplateBinding Content}"
                                  ContentTemplate="{TemplateBinding ContentTemplate}"/>

                            <Grid x:Name="Frame" Visibility="Hidden" Margin="-18">
                                <Grid.Triggers>
                                    <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                        <BeginStoryboard Name="FocusSb" Storyboard="{StaticResource SelectorStoryboard}"/>
                                    </EventTrigger>
                                    <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                                        <StopStoryboard BeginStoryboardName="FocusSb"/>
                                    </EventTrigger>
                                </Grid.Triggers>
                                <ls:LSNineSliceImage x:Name="Img1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="116"
                                                         ImageSource="{StaticResource ButtonBg_h1}" Slices="34" Opacity="1"/>
                                <ls:LSNineSliceImage x:Name="Img2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="116"
                                                         ImageSource="{StaticResource ButtonBg_h2}" Slices="34" Opacity="0"/>
                            </Grid>
                        </Grid>
                    </ls:LSNineSliceImage>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                            <Setter TargetName="Bg" Property="ImageSource" Value="{StaticResource ButtonBg_h}"/>
                            <Setter TargetName="Content" Property="IsEnabled" Value="True"/>
                            <Setter TargetName="Frame" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="BorderThickness" Value="0">
                            <Setter TargetName="Bg" Property="ImageSource" Value="{StaticResource ButtonBgDisabled}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="ls:MoveFocus.Focusable" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="{StaticResource LS_accent75TxtColor}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Style.Triggers>
            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                <Setter Property="Foreground" Value="{StaticResource LS_extraspecialTxtColor}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="FocusableContentControlStyleMinimal" TargetType="{x:Type ContentControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContentControl}">
                    <Border x:Name="Bg" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="108" BorderThickness="4" BorderBrush="{StaticResource LS_InventoryGridSurround}" >
                        <Grid Margin="-4,-4,-4,-4">
                            <Rectangle x:Name="HighlightBG" Fill="{StaticResource LS_PadSelectorBGColor}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Opacity="0" />
                            
                            <ContentPresenter x:Name="Content" IsEnabled="False" VerticalAlignment="Center" HorizontalAlignment="Stretch" Margin="{TemplateBinding Padding}" TextElement.Foreground="{TemplateBinding Foreground}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>

                            <Control x:Name="Frame" Visibility="Hidden" Template="{StaticResource FocusableBorderTemplate}" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                            <Setter TargetName="Content" Property="IsEnabled" Value="True"/>
                            <Setter TargetName="Frame" Property="Visibility" Value="Visible"/>

                            <Trigger.EnterActions>
                                <BeginStoryboard Name="FocusSb3"  Storyboard="{StaticResource SelectorStoryboard3}"/>
                                <StopStoryboard BeginStoryboardName="FocusSb5" />
                            </Trigger.EnterActions>
                            <Trigger.ExitActions>
                                <BeginStoryboard Name="FocusSb5"  Storyboard="{StaticResource SelectorStoryboard5}"/>
                                <StopStoryboard BeginStoryboardName="FocusSb3" />
                            </Trigger.ExitActions>
                        </Trigger>
   
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="ls:MoveFocus.Focusable" Value="True"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="Foreground" Value="{StaticResource LS_accent75TxtColor}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="0"/>
        <Style.Triggers>
            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                <Setter Property="Foreground" Value="{StaticResource LS_selectedTextPad}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- Basic Expand/Collapse Button with Label and arrow-->
    <ControlTemplate x:Key="ExpanderButtonTemplate" TargetType="{x:Type Expander}">
        <DockPanel x:Name="DockRoot">
            <Grid DockPanel.Dock="Top">
                <ls:LSToggleButton x:Name="ExpanderButton" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ls:MoveFocus.Focusable="True" Style="{StaticResource FocusableContentControlStyle}" Margin="0,0,0,12" Tag="ExpanderGroup">
                    <DockPanel Margin="20,0">
                        <Image x:Name="Arrow" DockPanel.Dock="Left" Source="{StaticResource ListArrowCollapsed}" Stretch="None" Margin="-18,-18,-8,-18" VerticalAlignment="Center"/>
                        <TextBlock x:Name="Title" DockPanel.Dock="Right" Text="{Binding Header, RelativeSource={RelativeSource Mode=TemplatedParent}}" HorizontalAlignment="Left" TextWrapping="Wrap"/>
                    </DockPanel>
                </ls:LSToggleButton>
            </Grid>
            <ContentPresenter Name="Content"/>
        </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="False">
                <Setter TargetName="Arrow" Property="Source" Value="{StaticResource ListArrowCollapsed}"/>
                <Setter TargetName="Content" Property="Visibility" Value="Collapsed"/>

            </Trigger>
            <Trigger SourceName="ExpanderButton" Property="IsChecked" Value="True">
                <Setter TargetName="Arrow" Property="Source" Value="{StaticResource ListArrowExpanded}"/>
                <Setter Property="IsExpanded" Value="True"/>
            </Trigger>
            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=ExpanderButton}" Value="True">
                <Setter TargetName="Arrow" Property="Source" Value="{StaticResource ListArrowCollapsedH}"/>
                <Setter TargetName="ExpanderButton" Property="BoundEvent" Value="UIAccept"/>
            </DataTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ExpanderButton" Property="IsChecked" Value="True"/>
                    <Condition SourceName="ExpanderButton" Property="IsFocused" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Arrow" Property="Source" Value="{StaticResource ListArrowExpandedH}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Basic Expand/Collapse Button with Label and arrow-->
    <ControlTemplate x:Key="ExpanderButtonTemplateSkill" TargetType="{x:Type Expander}">
        <DockPanel x:Name="DockRoot">
            <Grid DockPanel.Dock="Top">


                <ls:LSToggleButton x:Name="ExpanderButton" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ls:MoveFocus.Focusable="True" Style="{StaticResource FocusableContentControlStyle}" ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Right"  ToolTipService.HorizontalOffset="40" ToolTipService.VerticalOffset="0">
                    <DockPanel Margin="20,0">
                        <Image x:Name="Arrow" DockPanel.Dock="Left" Source="{StaticResource ListArrowCollapsed}" Stretch="None" Margin="-18,-18,-8,-18" VerticalAlignment="Center"/>
                        <TextBlock TextAlignment="Center">
																<Run Text="{Binding Name}"/>
																<Run Text="{Binding Modifier, StringFormat=' ({0:+#;-#;0})'}"/>
                        </TextBlock>
                    </DockPanel>
                </ls:LSToggleButton>
            </Grid>
            <ContentPresenter Name="Content"/>
        </DockPanel>
        <ControlTemplate.Triggers>
            <Trigger Property="IsExpanded" Value="False">
                <Setter TargetName="Arrow" Property="Source" Value="{StaticResource ListArrowCollapsed}"/>
                <Setter TargetName="Content" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ExpanderButton" Property="Tag" Value="PartyCollapsed"/>
            </Trigger>
            <Trigger SourceName="ExpanderButton" Property="IsChecked" Value="True">
                <Setter TargetName="Arrow" Property="Source" Value="{StaticResource ListArrowExpanded}"/>
                <Setter Property="IsExpanded" Value="True"/>
            </Trigger>
            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=ExpanderButton}" Value="True">
                <Setter TargetName="Arrow" Property="Source" Value="{StaticResource ListArrowCollapsedH}"/>
                <Setter TargetName="ExpanderButton" Property="BoundEvent" Value="UIAccept"/>
            </DataTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ExpanderButton" Property="IsChecked" Value="True"/>
                    <Condition SourceName="ExpanderButton" Property="IsFocused" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Arrow" Property="Source" Value="{StaticResource ListArrowExpandedH}"/>
            </MultiTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!-- Inventory Style Expand/Collapse Button with Label and arrow-->
    <ControlTemplate x:Key="ExpanderButtonTemplateSpellBook" TargetType="{x:Type Expander}">
        <DockPanel x:Name="DockRoot">
            <Grid DockPanel.Dock="Top" Margin="0,0,0,12">
                <ls:LSToggleButton x:Name="ExpanderButton" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" ls:MoveFocus.Focusable="True" Height="108" Style="{StaticResource FocusableContentControlStyleMinimal}" Tag="ExpanderGroup">
                    <DockPanel Margin="20,0">
                        <Image x:Name="Arrow" DockPanel.Dock="Left" Source="{StaticResource ListArrowCollapsed}" Stretch="None" Margin="-18,-18,-8,-18" VerticalAlignment="Center"/>
                        <TextBlock x:Name="Title" DockPanel.Dock="Left" Foreground="{StaticResource LS_baseTxtColor}" Text="{Binding Header, RelativeSource={RelativeSource Mode=TemplatedParent}}" HorizontalAlignment="Left" TextWrapping="Wrap"/>
                        <TextBlock x:Name="PreparedSpellsLabel" DockPanel.Dock="Left" Foreground="{StaticResource LS_baseTxtColor}" HorizontalAlignment="Left" Margin="20,0,0,0" FontWeight="DemiBold" Visibility="Collapsed">
                            <Run Foreground="{StaticResource LS_accent100TxtColor}">
                            <Run.Text>
                                <MultiBinding StringFormat="{}{0}/{1}">
                                    <Binding Path="SelectedItem.PreparedSpellsStat.Value" ElementName="Navigation"/>
                                    <Binding Path="SelectedItem.PreparedSpellsStat.Max" ElementName="Navigation"/>
                                </MultiBinding>
                            </Run.Text>
                        </Run>
                        </TextBlock>
                    </DockPanel>
                </ls:LSToggleButton>
            </Grid>
            <ContentPresenter Name="Content"/>
        </DockPanel>
      
        <ControlTemplate.Triggers>
            <Trigger Property="Tag" Value="Prepared">
                <Setter TargetName="PreparedSpellsLabel" Property="Visibility" Value="Visible"/>

            </Trigger>

            <Trigger Property="IsExpanded" Value="False">
                <Setter TargetName="Arrow" Property="Source" Value="{StaticResource ListArrowCollapsed}"/>
                <Setter TargetName="Content" Property="Visibility" Value="Collapsed"/>

            </Trigger>
            <Trigger SourceName="ExpanderButton" Property="IsChecked" Value="True">
                <Setter TargetName="Arrow" Property="Source" Value="{StaticResource ListArrowExpanded}"/>
                <Setter Property="IsExpanded" Value="True"/>
            </Trigger>
            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=ExpanderButton}" Value="True">
                <Setter TargetName="Arrow" Property="Source" Value="{StaticResource ListArrowCollapsedH}"/>
                <Setter TargetName="ExpanderButton" Property="BoundEvent" Value="UIAccept"/>
                <Setter TargetName="Title" Property="Foreground" Value="{StaticResource LS_selectedTextPad}" />
            </DataTrigger>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition SourceName="ExpanderButton" Property="IsChecked" Value="True"/>
                    <Condition SourceName="ExpanderButton" Property="IsFocused" Value="True"/>
                </MultiTrigger.Conditions>
                <Setter TargetName="Arrow" Property="Source" Value="{StaticResource ListArrowExpandedH}"/>
            </MultiTrigger>

                <!-- ActionGroupType -->
             <DataTrigger Binding="{Binding GroupType}" Value="Level1">
                    <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding StringFormat="{}{0} {1}">
                                <Binding Source="hb7c9dbb8gd727g421egaf0ag910c2bec58e1" Converter="{StaticResource TranslatedStringConverter}"/>
                                <Binding Source="1" Converter="{StaticResource DecimalToRomanConverter}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding GroupType}" Value="Level2">
                    <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding StringFormat="{}{0} {1}">
                                <Binding Source="hb7c9dbb8gd727g421egaf0ag910c2bec58e1" Converter="{StaticResource TranslatedStringConverter}"/>
                                <Binding Source="2" Converter="{StaticResource DecimalToRomanConverter}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding GroupType}" Value="Level3">
                    <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding StringFormat="{}{0} {1}">
                                <Binding Source="hb7c9dbb8gd727g421egaf0ag910c2bec58e1" Converter="{StaticResource TranslatedStringConverter}"/>
                                <Binding Source="3" Converter="{StaticResource DecimalToRomanConverter}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding GroupType}" Value="Level4">
                    <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding StringFormat="{}{0} {1}">
                                <Binding Source="hb7c9dbb8gd727g421egaf0ag910c2bec58e1" Converter="{StaticResource TranslatedStringConverter}"/>
                                <Binding Source="4" Converter="{StaticResource DecimalToRomanConverter}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding GroupType}" Value="Level5">
                    <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding StringFormat="{}{0} {1}">
                                <Binding Source="hb7c9dbb8gd727g421egaf0ag910c2bec58e1" Converter="{StaticResource TranslatedStringConverter}"/>
                                <Binding Source="5" Converter="{StaticResource DecimalToRomanConverter}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding GroupType}" Value="Level6">
                    <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding StringFormat="{}{0} {1}">
                                <Binding Source="hb7c9dbb8gd727g421egaf0ag910c2bec58e1" Converter="{StaticResource TranslatedStringConverter}"/>
                                <Binding Source="6" Converter="{StaticResource DecimalToRomanConverter}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding GroupType}" Value="Level7">
                    <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding StringFormat="{}{0} {1}">
                                <Binding Source="hb7c9dbb8gd727g421egaf0ag910c2bec58e1" Converter="{StaticResource TranslatedStringConverter}"/>
                                <Binding Source="7" Converter="{StaticResource DecimalToRomanConverter}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding GroupType}" Value="Level8">
                    <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding StringFormat="{}{0} {1}">
                                <Binding Source="hb7c9dbb8gd727g421egaf0ag910c2bec58e1" Converter="{StaticResource TranslatedStringConverter}"/>
                                <Binding Source="8" Converter="{StaticResource DecimalToRomanConverter}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding GroupType}" Value="Level9">
                    <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding StringFormat="{}{0} {1}">
                                <Binding Source="hb7c9dbb8gd727g421egaf0ag910c2bec58e1" Converter="{StaticResource TranslatedStringConverter}"/>
                                <Binding Source="9" Converter="{StaticResource DecimalToRomanConverter}"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>

                <DataTrigger Binding="{Binding GroupType}" Value="Cantrip">
                    <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h85581f8bg866cg4da4g9d7agffb21a8cfade', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding GroupType}" Value="SpecialActions">
                    <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h66448586g6071g4b12g8e48g27cd0d5715ab', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding GroupType}" Value="WeaponActions">
                    <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h37cf9a7bge200g4d99g8cf8gaf035b189c60', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
            <DataTrigger Binding="{Binding GroupType}" Value="CommonActions">
                <Setter TargetName="Title" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='hb4d6c027ge6c2g4ebag8d04g6d5f7febd91d', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>


        </ControlTemplate.Triggers>
        
    </ControlTemplate>
</ResourceDictionary>