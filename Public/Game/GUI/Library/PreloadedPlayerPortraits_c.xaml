<ResourceDictionary
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:System="clr-namespace:System;assembly=mscorlib"
    mc:Ignorable="d">

    <DataTemplate x:Key="PreloadedPlayerPortraits_c">
        <DataTemplate.Resources>
            <ImageSource x:Key="LevelUpArrow">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_levelup_2.png</ImageSource>

            <Storyboard x:Key="SlideInRight">
                <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="Margin" Storyboard.TargetName="Root" BeginTime="0:0:0">
                    <EasingThicknessKeyFrame KeyTime="0:0:0.2" Value="0,300,88,0">
                        <EasingThicknessKeyFrame.EasingFunction>
                            <CubicEase EasingMode="EaseOut"/>
                        </EasingThicknessKeyFrame.EasingFunction>
                    </EasingThicknessKeyFrame>
                </ThicknessAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="SlideOutRight">
                <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="Margin" Storyboard.TargetName="Root" BeginTime="0:0:0">
                    <EasingThicknessKeyFrame KeyTime="0:0:0.3" Value="0,300,-6,0">
                        <EasingThicknessKeyFrame.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </EasingThicknessKeyFrame.EasingFunction>
                    </EasingThicknessKeyFrame>
                </ThicknessAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="SlideInLeft">
                <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="Margin" Storyboard.TargetName="Root" BeginTime="0:0:0">
                    <EasingThicknessKeyFrame KeyTime="0:0:0.2" Value="88,300,0,0">
                        <EasingThicknessKeyFrame.EasingFunction>
                            <CubicEase EasingMode="EaseOut"/>
                        </EasingThicknessKeyFrame.EasingFunction>
                    </EasingThicknessKeyFrame>
                </ThicknessAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="SlideOutLeft">
                <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="Margin" Storyboard.TargetName="Root" BeginTime="0:0:0">
                    <EasingThicknessKeyFrame KeyTime="0:0:0.3" Value="-6,300,0,0">
                        <EasingThicknessKeyFrame.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </EasingThicknessKeyFrame.EasingFunction>
                    </EasingThicknessKeyFrame>
                </ThicknessAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="SlideInCommon">
                <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="Margin" Storyboard.TargetName="Root" BeginTime="0:0:0">
                    <EasingThicknessKeyFrame KeyTime="0:0:0.2" Value="88,0,0,0">
                        <EasingThicknessKeyFrame.EasingFunction>
                            <CubicEase EasingMode="EaseOut"/>
                        </EasingThicknessKeyFrame.EasingFunction>
                    </EasingThicknessKeyFrame>
                </ThicknessAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="SlideOutCommon">
                <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="Margin" Storyboard.TargetName="Root" BeginTime="0:0:0">
                    <EasingThicknessKeyFrame KeyTime="0:0:0.3" Value="-6,0,0,0">
                        <EasingThicknessKeyFrame.EasingFunction>
                            <CubicEase EasingMode="EaseInOut"/>
                        </EasingThicknessKeyFrame.EasingFunction>
                    </EasingThicknessKeyFrame>
                </ThicknessAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="ShowCharacterSelectAnim" FillBehavior="Stop">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Bg">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="LeftEdge">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RightEdge">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ScreenBg">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ButtonHintsLeft">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                </DoubleAnimationUsingKeyFrames>

                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Bg"  Storyboard.TargetProperty="Visibility">
                    <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                </ObjectAnimationUsingKeyFrames>

                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LeftEdge"  Storyboard.TargetProperty="Visibility">
                    <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                </ObjectAnimationUsingKeyFrames>

                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RightEdge"  Storyboard.TargetProperty="Visibility">
                    <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                </ObjectAnimationUsingKeyFrames>

                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ScreenBg"  Storyboard.TargetProperty="Visibility">
                    <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                </ObjectAnimationUsingKeyFrames>

                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonHintsLeft"  Storyboard.TargetProperty="Visibility">
                    <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Visible}"/>
                </ObjectAnimationUsingKeyFrames>

            </Storyboard>

            <Storyboard x:Key="HideCharacterSelectAnim" FillBehavior="Stop">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Bg">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="LeftEdge">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="RightEdge">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                </DoubleAnimationUsingKeyFrames>

                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ScreenBg">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                </DoubleAnimationUsingKeyFrames>

                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="Bg"  Storyboard.TargetProperty="Visibility">
                    <DiscreteObjectKeyFrame KeyTime="00:00:0.3" Value="{x:Static Visibility.Hidden}"/>
                </ObjectAnimationUsingKeyFrames>

                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="LeftEdge"  Storyboard.TargetProperty="Visibility">
                    <DiscreteObjectKeyFrame KeyTime="00:00:0.3" Value="{x:Static Visibility.Hidden}"/>
                </ObjectAnimationUsingKeyFrames>

                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="RightEdge"  Storyboard.TargetProperty="Visibility">
                    <DiscreteObjectKeyFrame KeyTime="00:00:0.3" Value="{x:Static Visibility.Hidden}"/>
                </ObjectAnimationUsingKeyFrames>

                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ScreenBg"  Storyboard.TargetProperty="Visibility">
                    <DiscreteObjectKeyFrame KeyTime="00:00:0.3" Value="{x:Static Visibility.Hidden}"/>
                </ObjectAnimationUsingKeyFrames>

                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ButtonHintsLeft"  Storyboard.TargetProperty="Visibility">
                    <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{x:Static Visibility.Hidden}"/>
                </ObjectAnimationUsingKeyFrames>
            </Storyboard>

            <!-- Player Portrait Template -->
            <DataTemplate x:Key="PortraitCore" DataType="{x:Type ls:Character}">
                <DataTemplate.Resources>
                    <ImageSource x:Key="SuccessActive">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_tallyUp_active.png</ImageSource>
                    <ImageSource x:Key="SuccessInactive">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_tallyUp_inActive.png</ImageSource>
                    <ImageSource x:Key="FailureActive">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_tallyDown_active.png</ImageSource>
                    <ImageSource x:Key="FailureInactive">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_tallyDown_inActive.png</ImageSource>
                    <ImageSource x:Key="GroupIndicator">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/c_ico_group.png</ImageSource>
                    <ImageSource x:Key="CharacterDownedBg">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/c_downedTally_bg.png</ImageSource>
                    <ImageSource x:Key="CharacterDowned">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/ico_downed.png</ImageSource>
                    <ImageSource x:Key="CharacterConcentration">pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/hud_target_CharacterConcentration.png</ImageSource>
                </DataTemplate.Resources>

                <ls:LSEntityObject x:Name="CharacterCore" EntityRef="{Binding EntityHandle}" Background="Transparent" Height="220" Opacity="1" Margin="-3,-4" Focusable="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" ls:MoveFocus.Focusable="True" 
                                       ls:TooltipExtender.Owner="{Binding .}">
                    <ls:LSEntityObject.Tag>
                        <!-- Cached value for "is the last element in the collection?" -->
                        <MultiBinding Converter="{StaticResource EqualConverter}">
                            <Binding Path="(ItemsControl.AlternationCount)" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}" Converter="{StaticResource AddConverter}" ConverterParameter="-1"/>
                            <Binding Path="(ItemsControl.AlternationIndex)" RelativeSource="{RelativeSource Mode=TemplatedParent}"/>
                        </MultiBinding>
                    </ls:LSEntityObject.Tag>
                    <ls:LSEntityObject.ToolTip>
                        <ls:LSTooltip x:Name="ObjectTooltip" ContentTemplate="{StaticResource PartyLineTooltipTemplate}" Content="{Binding DataContext, RelativeSource={RelativeSource TemplatedParent}}"
                                          Placement="Left" ls:TooltipExtender.Owner="{Binding (ls:TooltipExtender.Owner), ElementName=CharacterCore}" HorizontalOffset="-50"/>
                    </ls:LSEntityObject.ToolTip>
                    <b:Interaction.Triggers>
                        <b:PropertyChangedTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding IsEnabled, ElementName=CharacterCore}" Operator="Equal" RightOperand="True"/>
                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.CurrentPlayer.SelectedCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="{Binding .}"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <ls:SetMoveFocusAction TargetName="PartyLine_c"/>
                        </b:PropertyChangedTrigger>
                        <b:EventTrigger EventName="Loaded">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding IsEnabled, ElementName=CharacterCore}" Operator="Equal" RightOperand="True"/>
                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.LastFocusedCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="{Binding .}"/>
                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="True"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <ls:SetMoveFocusAction TargetName="PartyLine_c"/>
                        </b:EventTrigger>
                        <b:EventTrigger EventName="MoveFocusUp">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="False"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:InvokeCommandAction Command="{Binding DataContext.ShowTooltipOnUIElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Path=FocusedElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            <b:ChangePropertyAction TargetObject="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" PropertyName="LastFocusedCharacter" Value="{Binding .}"/>
                            <ls:LSPlaySound Sound="UI_HUD_Controller_PartyMenu_CharacterSelect" />
                        </b:EventTrigger>
                        <b:EventTrigger EventName="MoveFocusDown">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="False"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:InvokeCommandAction Command="{Binding DataContext.ShowTooltipOnUIElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Path=FocusedElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            <b:ChangePropertyAction TargetObject="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" PropertyName="LastFocusedCharacter" Value="{Binding .}"/>
                            <ls:LSPlaySound Sound="UI_HUD_Controller_PartyMenu_CharacterSelect" />
                        </b:EventTrigger>
                        <b:EventTrigger EventName="MoveFocusLeft">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="False"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:InvokeCommandAction Command="{Binding DataContext.ShowTooltipOnUIElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Path=FocusedElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            <b:ChangePropertyAction TargetObject="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" PropertyName="LastFocusedCharacter" Value="{Binding .}"/>
                            <ls:LSPlaySound Sound="UI_HUD_Controller_PartyMenu_CharacterSelect" />
                        </b:EventTrigger>
                        <b:EventTrigger EventName="MoveFocusRight">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="False"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:InvokeCommandAction Command="{Binding DataContext.ShowTooltipOnUIElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Path=FocusedElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            <b:ChangePropertyAction TargetObject="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" PropertyName="LastFocusedCharacter" Value="{Binding .}"/>
                            <ls:LSPlaySound Sound="UI_HUD_Controller_PartyMenu_CharacterSelect" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>

                    <Rectangle Width="134" Height="200" VerticalAlignment="Center" HorizontalAlignment="Center"  Fill="{Binding Icon}"/>
                    <ProgressBar Template="{StaticResource DefaultProgressBar}" VerticalAlignment="Center" HorizontalAlignment="Center" Width="134" Height="200" Style="{StaticResource CharacterPortraitBarStyle}"/>

                    <Control x:Name="HealthText" Template="{StaticResource PortraitHealth}" HorizontalAlignment="Center" VerticalAlignment="Bottom" Width="128" Margin="0,0,0,8"/>

                    <Border Background="#80FFFFFF" Visibility="{Binding IsSelectedForGrouping, Converter={StaticResource BoolToVisibleConverter}}">
                        <Image Source="{StaticResource GroupIndicator}" Stretch="None"/>
                    </Border>

                    <!-- Collapsed: normal frame state -->
                    <Image x:Name="Frame" Source="{DynamicResource CollapsedFrame}" Stretch="None" RenderTransformOrigin="0.5 0.5">
                        <Image.Effect>
                            <DropShadowEffect BlurRadius="20" ShadowDepth="0" Opacity="1" Color="{StaticResource tint00}"/>
                        </Image.Effect>
                    </Image>
                    <Image x:Name="FrameHighlight" Source="{DynamicResource CollapsedFrameHighlight}" Stretch="None" Visibility="Hidden" RenderTransformOrigin="0.5 0.5"/>

                    <Control x:Name="CharacterMode" Template="{StaticResource CharacterModeIcon}" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="-35,0,0,0" />
                    <StackPanel x:Name="DownedStatus" Margin="-28,0" HorizontalAlignment="Center" VerticalAlignment="Center" Width="70" Visibility="Collapsed">
                        <StackPanel.Background>
                            <ImageBrush ImageSource="{StaticResource CharacterDownedBg}" Stretch="None"/>
                        </StackPanel.Background>
                        <Image x:Name="SuccessIII" Stretch="None" Margin="0,0,0,-20" VerticalAlignment="Top" Source="{StaticResource SuccessInactive}"/>
                        <Image x:Name="SuccessII" Stretch="None" Margin="0,0,0,-20" VerticalAlignment="Top" Source="{StaticResource SuccessInactive}"/>
                        <Image x:Name="SuccessI" Stretch="None" VerticalAlignment="Top" Source="{StaticResource SuccessInactive}"/>

                        <Image x:Name="DownedStatusIcon" VerticalAlignment="Center" Source="{StaticResource CharacterDowned}" Stretch="None"/>

                        <Image x:Name="FailureI" Stretch="None" VerticalAlignment="Bottom" Source="{StaticResource FailureInactive}"/>
                        <Image x:Name="FailureII" Stretch="None" Margin="0,-20,0,0" VerticalAlignment="Bottom" Source="{StaticResource FailureInactive}"/>
                        <Image x:Name="FailureIII" Stretch="None" Margin="0,-20,0,0" VerticalAlignment="Bottom" Source="{StaticResource FailureInactive}"/>
                    </StackPanel>

                    <Grid x:Name="ConcentrationHolder" VerticalAlignment="Top" HorizontalAlignment="Left" Visibility="{Binding ConcentrationSpell, Converter={StaticResource NullToCollapsedConverter}}" Margin="-30,14,0,0">
                        <Ellipse Fill="{Binding ConcentrationSpell.Icon}" Width="42" Height="42"/>
                        <Image Source="{StaticResource CharacterConcentration}" Stretch="Uniform" Width="82"/>
                        <TextBlock Margin="0,0,0,-5" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Bottom" Text="{Binding ConcentrationSpell.Duration}" Foreground="{StaticResource LS_tint100}"
                                   FontWeight="Bold" FontSize="{StaticResource ScaledSmallFontSize}" noesis:Text.Stroke="Black" noesis:Text.StrokeThickness="2"/>
                    </Grid>

                    <StackPanel x:Name="PortraitIndicatorStack" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,8,16,0">
                        <Grid x:Name="LevelUp" Visibility="Collapsed" Width="{StaticResource LevelUpArrowAnimationFrameBigSize}" Height="{StaticResource LevelUpArrowAnimationFrameBigSize}" Margin="-20,-12">
                            <Image x:Name="LevelUpIcon" Source="{StaticResource LevelUpArrow}" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                    </StackPanel>
                </ls:LSEntityObject>

                <DataTemplate.Triggers>
                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Dialogue">
                        <Setter TargetName="ObjectTooltip" Property="ContentTemplate" Value="{StaticResource PartyLineDialogTooltipTemplate}"/>
                    </DataTrigger>

                    <Trigger SourceName="LevelUp" Property="IsVisible" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard x:Name="IconBounce">
                                <BeginStoryboard.Storyboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="LevelUpIcon" RepeatBehavior="Forever">
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame1}" Value="{StaticResource LevelUpArrowAnimationFrameSmallSize}"/>
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame2}" Value="{StaticResource LevelUpArrowAnimationFrameSmallSize}"/>
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame3}" Value="{StaticResource LevelUpArrowAnimationFrameBigSize}"/>
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame4}" Value="{StaticResource LevelUpArrowAnimationFrameSmallSize}"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard.Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="IconBounce"/>
                        </Trigger.ExitActions>
                    </Trigger>

                    <DataTrigger Binding="{Binding IsVisible, ElementName=ExtraPortraitHolder}" Value="True">
                        <Setter TargetName="ConcentrationHolder" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition SourceName="ConcentrationHolder" Property="IsVisible" Value="True"/>
                            <Condition SourceName="CharacterMode" Property="IsVisible" Value="True"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="CharacterMode" Property="Margin" Value="-35,0,0,-40"/>
                    </MultiTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsVisible, ElementName=DownedStatus}" Value="False"/>
                            <Condition Binding="{Binding Stats.Level.LevelUpAvailable}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="LevelUp" Property="Visibility" Value="Visible"/>
                    </MultiDataTrigger>

                    <DataTrigger Binding="{Binding DownedInfo.Active}" Value="True">
                        <Setter TargetName="DownedStatus" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="HealthText" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DownedInfo.Active}" Value="False"/>
                            <Condition Binding="{Binding Stats.Health.Value}" Value="0"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="DownedStatus" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="DownedStatusIcon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/ico_dead.png"/>
                        <Setter TargetName="SuccessI" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="SuccessII" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="SuccessIII" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="FailureI" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="FailureII" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="FailureIII" Property="Visibility" Value="Collapsed"/>
                    </MultiDataTrigger>
                    <DataTrigger Binding="{Binding DownedInfo.RollSuccesses, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0 }" Value="True">
                        <Setter TargetName="SuccessI" Property="Source" Value="{StaticResource SuccessActive}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DownedInfo.RollSuccesses, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1 }" Value="True">
                        <Setter TargetName="SuccessII" Property="Source" Value="{StaticResource SuccessActive}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DownedInfo.RollSuccesses, Converter={StaticResource GreaterThanConverter}, ConverterParameter=2 }" Value="True">
                        <Setter TargetName="SuccessIII" Property="Source" Value="{StaticResource SuccessActive}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DownedInfo.RollFailures, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0 }" Value="True">
                        <Setter TargetName="FailureI" Property="Source" Value="{StaticResource FailureActive}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DownedInfo.RollFailures, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1 }" Value="True">
                        <Setter TargetName="FailureII" Property="Source" Value="{StaticResource FailureActive}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DownedInfo.RollFailures, Converter={StaticResource GreaterThanConverter}, ConverterParameter=2 }" Value="True">
                        <Setter TargetName="FailureIII" Property="Source" Value="{StaticResource FailureActive}"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Right">
                        <Setter TargetName="Frame" Property="RenderTransform">
                            <Setter.Value>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                </TransformGroup>
                            </Setter.Value>
                        </Setter>
                        <Setter TargetName="FrameHighlight" Property="RenderTransform">
                            <Setter.Value>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                </TransformGroup>
                            </Setter.Value>
                        </Setter>
                        <Setter TargetName="PortraitIndicatorStack" Property="HorizontalAlignment" Value="Left"/>
                        <Setter TargetName="PortraitIndicatorStack" Property="Margin" Value="16,8,0,0"/>
                        <Setter TargetName="PortraitIndicatorStack" Property="FlowDirection" Value="RightToLeft"/>
                        <Setter TargetName="ConcentrationHolder" Property="HorizontalAlignment" Value="Right"/>
                        <Setter TargetName="ConcentrationHolder" Property="Margin" Value="0,14,-30,0"/>
                        <Setter TargetName="CharacterMode" Property="HorizontalAlignment" Value="Right"/>
                        <Setter TargetName="CharacterMode" Property="Margin" Value="0,0,-35,0"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Dialogue"/>
                            <Condition Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Common"/>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="2"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Frame" Property="RenderTransform">
                            <Setter.Value>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                </TransformGroup>
                            </Setter.Value>
                        </Setter>
                        <Setter TargetName="FrameHighlight" Property="RenderTransform">
                            <Setter.Value>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                </TransformGroup>
                            </Setter.Value>
                        </Setter>
                        <Setter TargetName="PortraitIndicatorStack" Property="HorizontalAlignment" Value="Left"/>
                        <Setter TargetName="PortraitIndicatorStack" Property="Margin" Value="16,8,0,0"/>
                        <Setter TargetName="PortraitIndicatorStack" Property="FlowDirection" Value="RightToLeft"/>
                        <Setter TargetName="ConcentrationHolder" Property="HorizontalAlignment" Value="Right"/>
                        <Setter TargetName="ConcentrationHolder" Property="Margin" Value="0,14,-30,0"/>
                        <Setter TargetName="CharacterMode" Property="HorizontalAlignment" Value="Right"/>
                        <Setter TargetName="CharacterMode" Property="Margin" Value="0,0,-35,0"/>
                    </MultiDataTrigger>

                    <DataTrigger Binding="{Binding CharacterType}" Value="Summon">
                        <Setter TargetName="CharacterMode" Property="HorizontalAlignment" Value="Right"/>
                        <Setter TargetName="CharacterMode" Property="VerticalAlignment" Value="Top"/>
                        <Setter TargetName="CharacterMode" Property="Margin" Value="0,0,-10,0"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CharacterType}" Value="Follower">
                        <Setter TargetName="CharacterMode" Property="HorizontalAlignment" Value="Right"/>
                        <Setter TargetName="CharacterMode" Property="VerticalAlignment" Value="Top"/>
                        <Setter TargetName="CharacterMode" Property="Margin" Value="0,0,-10,0"/>
                    </DataTrigger>

                    <!-- Extended: normal frame state -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                            <Condition Binding="{Binding Tag, ElementName=CharacterCore}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Frame" Property="Source" Value="{DynamicResource ExtendedFrame}"/>
                        <Setter TargetName="FrameHighlight" Property="Source" Value="{DynamicResource ExtendedFrameHighlight}"/>
                    </MultiDataTrigger>

                    <!-- Collapsed: In turn frame -->
                    <DataTrigger Binding="{Binding IsCurrentTurn}" Value="True">
                        <Setter TargetName="Frame" Property="Source" Value="{DynamicResource CollapsedFrameInTurn}"/>
                        <Setter TargetName="FrameHighlight" Property="Source" Value="{DynamicResource CollapsedFrameHighlightInTurn}"/>
                    </DataTrigger>

                    <!-- Extended: In turn frame -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsCurrentTurn}" Value="True"/>
                            <Condition Binding="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                            <Condition Binding="{Binding Tag, ElementName=CharacterCore}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Frame" Property="Source" Value="{DynamicResource ExtendedFrameInTurn}"/>
                        <Setter TargetName="FrameHighlight" Property="Source" Value="{DynamicResource ExtendedFrameHighlightInTurn}"/>
                    </MultiDataTrigger>

                    <!-- Collapsed: Remote frame -->
                    <DataTrigger Value="False">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                <Binding RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}" Path="DataContext.CurrentPlayer.UserId"/>
                                <Binding Path="OwnerUserID"/>
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter TargetName="Frame" Property="Source" Value="{DynamicResource CollapsedFrameRemote}"/>
                        <Setter TargetName="FrameHighlight" Property="Source" Value="{DynamicResource CollapsedFrameHighlightRemote}"/>
                    </DataTrigger>

                    <!-- Extended: Remote frame -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Value="False">
                                <Condition.Binding>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="DataContext.CurrentPlayer.UserId"/>
                                        <Binding Path="OwnerUserID"/>
                                    </MultiBinding>
                                </Condition.Binding>
                            </Condition>
                            <Condition Binding="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}" Value="False"/>
                            <Condition Binding="{Binding Tag, ElementName=CharacterCore}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Frame" Property="Source" Value="{DynamicResource ExtendedFrameRemote}"/>
                        <Setter TargetName="FrameHighlight" Property="Source" Value="{DynamicResource ExtendedFrameHighlightRemote}"/>
                    </MultiDataTrigger>

                    <!-- Collapsed: Selected frame -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Value="True">
                                <Condition.Binding>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding Path="DataContext.CurrentPlayer.SelectedCharacter" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                        <Binding Path="."/>
                                    </MultiBinding>
                                </Condition.Binding>
                            </Condition>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="Frame" Property="Source" Value="{DynamicResource CollapsedFrameSelected}"/>
                            <Setter TargetName="FrameHighlight" Property="Source" Value="{DynamicResource CollapsedFrameSelectedHighlight}"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <!-- Extended: Selection frame -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=CharacterCore}" Value="True"/>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                            <Condition Binding="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}" Value="False"/>
                            <Condition Binding="{Binding Tag, ElementName=CharacterCore}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Frame" Property="Source" Value="{DynamicResource CollapsedFrameSelected}"/>
                        <Setter TargetName="FrameHighlight" Property="Source" Value="{DynamicResource CollapsedFrameSelectedHighlight}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=CharacterCore}" Value="True"/>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                            <Condition Binding="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}" Value="False"/>
                            <Condition Binding="{Binding Tag, ElementName=CharacterCore}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Frame" Property="Source" Value="{DynamicResource ExtendedFrameSelected}"/>
                        <Setter TargetName="FrameHighlight" Property="Source" Value="{DynamicResource ExtendedFrameSelectedHighlight}"/>
                    </MultiDataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <DataTemplate x:Key="FollowerCore" DataType="{x:Type ls:Character}">
                <DataTemplate.Resources>
                    <ImageSource x:Key="SuccessActive">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_tallyUp_active.png</ImageSource>
                    <ImageSource x:Key="SuccessInactive">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_tallyUp_inActive.png</ImageSource>
                    <ImageSource x:Key="FailureActive">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_tallyDown_active.png</ImageSource>
                    <ImageSource x:Key="FailureInactive">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_tallyDown_inActive.png</ImageSource>
                    <ImageSource x:Key="GroupIndicator">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/c_ico_group.png</ImageSource>
                    <ImageSource x:Key="CharacterDownedBg">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/c_downedTally_bg.png</ImageSource>
                    <ImageSource x:Key="CharacterDowned">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/ico_downed.png</ImageSource>
                    <ImageSource x:Key="CharacterConcentration">pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/hud_target_CharacterConcentration.png</ImageSource>
                </DataTemplate.Resources>

                <ls:LSEntityObject x:Name="CharacterCore" EntityRef="{Binding EntityHandle}" Background="Transparent" Height="165" Opacity="1" Margin="-18,-3" 
                                   Focusable="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                   ls:MoveFocus.Focusable="True" ls:TooltipExtender.Owner="{Binding .}">
                    <ls:LSEntityObject.Tag>
                        <!-- Cached value for "is the last element in the collection?" -->
                        <MultiBinding Converter="{StaticResource EqualConverter}">
                            <Binding Path="(ItemsControl.AlternationCount)" RelativeSource="{RelativeSource Mode=FindAncestor, AncestorType={x:Type ItemsControl}}" Converter="{StaticResource AddConverter}" ConverterParameter="-1"/>
                            <Binding Path="(ItemsControl.AlternationIndex)" RelativeSource="{RelativeSource Mode=TemplatedParent}"/>
                        </MultiBinding>
                    </ls:LSEntityObject.Tag>
                    <ls:LSEntityObject.ToolTip>
                        <ls:LSTooltip x:Name="ObjectTooltip" ContentTemplate="{StaticResource PartyLineTooltipTemplate}" Content="{Binding DataContext, ElementName=CharacterCore}"
                                      Placement="Left" ls:TooltipExtender.Owner="{Binding (ls:TooltipExtender.Owner), ElementName=CharacterCore}" HorizontalOffset="-50"/>
                    </ls:LSEntityObject.ToolTip>
                    <b:Interaction.Triggers>
                        <b:PropertyChangedTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding IsEnabled, ElementName=CharacterCore}" Operator="Equal" RightOperand="True"/>
                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.CurrentPlayer.SelectedCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="{Binding .}"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <ls:SetMoveFocusAction TargetName="PartyLine_c"/>
                        </b:PropertyChangedTrigger>
                        <b:EventTrigger EventName="Loaded">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding IsEnabled, ElementName=CharacterCore}" Operator="Equal" RightOperand="True"/>
                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.LastFocusedCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="{Binding .}"/>
                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="True"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <ls:SetMoveFocusAction TargetName="PartyLine_c"/>
                        </b:EventTrigger>
                        <b:EventTrigger EventName="MoveFocusUp">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="False"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:InvokeCommandAction Command="{Binding DataContext.ShowTooltipOnUIElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Path=FocusedElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            <b:ChangePropertyAction TargetObject="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" PropertyName="LastFocusedCharacter" Value="{Binding .}"/>
                            <ls:LSPlaySound Sound="UI_HUD_Controller_PartyMenu_CharacterSelect" />
                        </b:EventTrigger>
                        <b:EventTrigger EventName="MoveFocusDown">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="False"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:InvokeCommandAction Command="{Binding DataContext.ShowTooltipOnUIElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Path=FocusedElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            <b:ChangePropertyAction TargetObject="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" PropertyName="LastFocusedCharacter" Value="{Binding .}"/>
                            <ls:LSPlaySound Sound="UI_HUD_Controller_PartyMenu_CharacterSelect" />
                        </b:EventTrigger>
                        <b:EventTrigger EventName="MoveFocusLeft">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="False"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:InvokeCommandAction Command="{Binding DataContext.ShowTooltipOnUIElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Path=FocusedElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            <b:ChangePropertyAction TargetObject="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" PropertyName="LastFocusedCharacter" Value="{Binding .}"/>
                            <ls:LSPlaySound Sound="UI_HUD_Controller_PartyMenu_CharacterSelect" />
                        </b:EventTrigger>
                        <b:EventTrigger EventName="MoveFocusRight">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="False"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:InvokeCommandAction Command="{Binding DataContext.ShowTooltipOnUIElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Path=FocusedElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            <b:ChangePropertyAction TargetObject="{Binding DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" PropertyName="LastFocusedCharacter" Value="{Binding .}"/>
                            <ls:LSPlaySound Sound="UI_HUD_Controller_PartyMenu_CharacterSelect" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>

                    <Rectangle Width="100" Height="150" VerticalAlignment="Center" HorizontalAlignment="Center"  Fill="{Binding Icon}"/>
                    <ProgressBar Template="{StaticResource DefaultProgressBar}" VerticalAlignment="Center" HorizontalAlignment="Center" Width="134" Height="200" Style="{StaticResource CharacterPortraitBarStyle}"/>

                    <Control x:Name="HealthText" Template="{StaticResource PortraitHealth}" HorizontalAlignment="Center" VerticalAlignment="Bottom" Width="92" Margin="0,0,0,8"/>

                    <Border Background="#80FFFFFF" Visibility="{Binding IsSelectedForGrouping, Converter={StaticResource BoolToVisibleConverter}}">
                        <Image Source="{StaticResource GroupIndicator}" Stretch="Uniform"/>
                    </Border>

                    <!-- Collapsed: normal frame state -->
                    <Image x:Name="Frame" Source="{DynamicResource CollapsedFrame}" Stretch="Uniform" RenderTransformOrigin="0.5 0.5">
                        <Image.Effect>
                            <DropShadowEffect BlurRadius="20" ShadowDepth="0" Opacity="1" Color="{StaticResource tint00}"/>
                        </Image.Effect>
                    </Image>
                    <Image x:Name="FrameHighlight" Source="{DynamicResource CollapsedFrameHighlight}" Stretch="None" Visibility="Hidden" RenderTransformOrigin="0.5 0.5"/>

                    <Control x:Name="CharacterMode" Template="{StaticResource CharacterModeIcon}" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="-35,0,0,0" />

                    <StackPanel x:Name="DownedStatus" Margin="-28,0" HorizontalAlignment="Center" VerticalAlignment="Center" Width="70" Visibility="Collapsed">
                        <StackPanel.Background>
                            <ImageBrush ImageSource="{StaticResource CharacterDownedBg}" Stretch="None"/>
                        </StackPanel.Background>
                        <Image x:Name="SuccessIII" Stretch="Uniform" Margin="0,0,0,-20" VerticalAlignment="Top" Source="{StaticResource SuccessInactive}"/>
                        <Image x:Name="SuccessII" Stretch="Uniform" Margin="0,0,0,-20" VerticalAlignment="Top" Source="{StaticResource SuccessInactive}"/>
                        <Image x:Name="SuccessI" Stretch="Uniform" VerticalAlignment="Top" Source="{StaticResource SuccessInactive}"/>

                        <Image x:Name="DownedStatusIcon" VerticalAlignment="Center" Source="{StaticResource CharacterDowned}" Stretch="None"/>

                        <Image x:Name="FailureI" Stretch="Uniform" VerticalAlignment="Bottom" Source="{StaticResource FailureInactive}"/>
                        <Image x:Name="FailureII" Stretch="Uniform" Margin="0,-20,0,0" VerticalAlignment="Bottom" Source="{StaticResource FailureInactive}"/>
                        <Image x:Name="FailureIII" Stretch="Uniform" Margin="0,-20,0,0" VerticalAlignment="Bottom" Source="{StaticResource FailureInactive}"/>
                    </StackPanel>

                    <Grid x:Name="ConcentrationHolder" VerticalAlignment="Top" HorizontalAlignment="Left" Visibility="{Binding ConcentrationSpell, Converter={StaticResource NullToCollapsedConverter}}" Margin="-30,14,0,0">
                        <Ellipse Fill="{Binding ConcentrationSpell.Icon}" Width="42" Height="42"/>
                        <Image Source="{StaticResource CharacterConcentration}" Stretch="Uniform" Width="82"/>
                        <TextBlock Margin="0,0,0,-5" TextAlignment="Center" HorizontalAlignment="Center" VerticalAlignment="Bottom" Text="{Binding ConcentrationSpell.Duration}" Foreground="{StaticResource LS_tint100}"
                                   FontWeight="Bold" FontSize="{StaticResource ScaledSmallFontSize}" noesis:Text.Stroke="Black" noesis:Text.StrokeThickness="2"/>
                    </Grid>

                    <StackPanel x:Name="PortraitIndicatorStack" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,8,24,0">
                        <Border x:Name="LevelUp" Visibility="Collapsed" Width="{StaticResource LevelUpArrowAnimationFrameBigSize}" Height="{StaticResource LevelUpArrowAnimationFrameBigSize}" Margin="-20,-12">
                            <Image x:Name="LevelUpIcon" Source="{StaticResource LevelUpArrow}" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Border>
                    </StackPanel>
                </ls:LSEntityObject>

                <DataTemplate.Triggers>
                    <Trigger SourceName="LevelUp" Property="IsVisible" Value="True">
                        <Trigger.EnterActions>
                            <BeginStoryboard x:Name="IconBounce">
                                <BeginStoryboard.Storyboard>
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="LevelUpIcon" RepeatBehavior="Forever">
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame1}" Value="{StaticResource LevelUpArrowAnimationFrameSmallSize}"/>
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame2}" Value="{StaticResource LevelUpArrowAnimationFrameSmallSize}"/>
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame3}" Value="{StaticResource LevelUpArrowAnimationFrameBigSize}"/>
                                            <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame4}" Value="{StaticResource LevelUpArrowAnimationFrameSmallSize}"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </BeginStoryboard.Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="IconBounce"/>
                        </Trigger.ExitActions>
                    </Trigger>

                    <MultiTrigger>
                        <MultiTrigger.Conditions>
                            <Condition SourceName="ConcentrationHolder" Property="IsVisible" Value="True"/>
                            <Condition SourceName="CharacterMode" Property="IsVisible" Value="True"/>
                        </MultiTrigger.Conditions>
                        <Setter TargetName="CharacterMode" Property="Margin" Value="-35,0,0,-40"/>
                    </MultiTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsVisible, ElementName=DownedStatus}" Value="False"/>
                            <Condition Binding="{Binding Stats.Level.LevelUpAvailable}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="LevelUp" Property="Visibility" Value="Visible"/>
                    </MultiDataTrigger>

                    <DataTrigger Binding="{Binding DownedInfo.Active}" Value="True">
                        <Setter TargetName="DownedStatus" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="HealthText" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DownedInfo.Active}" Value="False"/>
                            <Condition Binding="{Binding Stats.Health.Value}" Value="0"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="DownedStatus" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="DownedStatusIcon" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/ico_dead.png"/>
                        <Setter TargetName="SuccessI" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="SuccessII" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="SuccessIII" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="FailureI" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="FailureII" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="FailureIII" Property="Visibility" Value="Collapsed"/>
                    </MultiDataTrigger>
                    <DataTrigger Binding="{Binding DownedInfo.RollSuccesses, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0 }" Value="True">
                        <Setter TargetName="SuccessI" Property="Source" Value="{StaticResource SuccessActive}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DownedInfo.RollSuccesses, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1 }" Value="True">
                        <Setter TargetName="SuccessII" Property="Source" Value="{StaticResource SuccessActive}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DownedInfo.RollSuccesses, Converter={StaticResource GreaterThanConverter}, ConverterParameter=2 }" Value="True">
                        <Setter TargetName="SuccessIII" Property="Source" Value="{StaticResource SuccessActive}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DownedInfo.RollFailures, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0 }" Value="True">
                        <Setter TargetName="FailureI" Property="Source" Value="{StaticResource FailureActive}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DownedInfo.RollFailures, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1 }" Value="True">
                        <Setter TargetName="FailureII" Property="Source" Value="{StaticResource FailureActive}"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DownedInfo.RollFailures, Converter={StaticResource GreaterThanConverter}, ConverterParameter=2 }" Value="True">
                        <Setter TargetName="FailureIII" Property="Source" Value="{StaticResource FailureActive}"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Right">
                        <Setter TargetName="Frame" Property="RenderTransform">
                            <Setter.Value>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                </TransformGroup>
                            </Setter.Value>
                        </Setter>
                        <Setter TargetName="FrameHighlight" Property="RenderTransform">
                            <Setter.Value>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                </TransformGroup>
                            </Setter.Value>
                        </Setter>
                        <Setter TargetName="PortraitIndicatorStack" Property="HorizontalAlignment" Value="Left"/>
                        <Setter TargetName="PortraitIndicatorStack" Property="Margin" Value="16,8,0,0"/>
                        <Setter TargetName="PortraitIndicatorStack" Property="FlowDirection" Value="RightToLeft"/>
                        <Setter TargetName="ConcentrationHolder" Property="HorizontalAlignment" Value="Right"/>
                        <Setter TargetName="ConcentrationHolder" Property="Margin" Value="0,14,-30,0"/>
                        <Setter TargetName="CharacterMode" Property="HorizontalAlignment" Value="Right"/>
                        <Setter TargetName="CharacterMode" Property="Margin" Value="0,0,-35,0"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Dialogue"/>
                            <Condition Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Common"/>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="2"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Frame" Property="RenderTransform">
                            <Setter.Value>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                </TransformGroup>
                            </Setter.Value>
                        </Setter>
                        <Setter TargetName="FrameHighlight" Property="RenderTransform">
                            <Setter.Value>
                                <TransformGroup>
                                    <ScaleTransform ScaleX="-1" ScaleY="1"/>
                                </TransformGroup>
                            </Setter.Value>
                        </Setter>
                        <Setter TargetName="PortraitIndicatorStack" Property="HorizontalAlignment" Value="Left"/>
                        <Setter TargetName="PortraitIndicatorStack" Property="Margin" Value="16,8,0,0"/>
                        <Setter TargetName="PortraitIndicatorStack" Property="FlowDirection" Value="RightToLeft"/>
                        <Setter TargetName="ConcentrationHolder" Property="HorizontalAlignment" Value="Right"/>
                        <Setter TargetName="ConcentrationHolder" Property="Margin" Value="0,14,-30,0"/>
                        <Setter TargetName="CharacterMode" Property="HorizontalAlignment" Value="Right"/>
                        <Setter TargetName="CharacterMode" Property="Margin" Value="0,0,-35,0"/>
                    </MultiDataTrigger>

                    <DataTrigger Binding="{Binding CharacterType}" Value="Summon">
                        <Setter TargetName="CharacterMode" Property="HorizontalAlignment" Value="Right"/>
                        <Setter TargetName="CharacterMode" Property="VerticalAlignment" Value="Top"/>
                        <Setter TargetName="CharacterMode" Property="Margin" Value="0,0,-10,0"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding CharacterType}" Value="Follower">
                        <Setter TargetName="CharacterMode" Property="HorizontalAlignment" Value="Right"/>
                        <Setter TargetName="CharacterMode" Property="VerticalAlignment" Value="Top"/>
                        <Setter TargetName="CharacterMode" Property="Margin" Value="0,0,-10,0"/>
                    </DataTrigger>

                    <!-- Extended: normal frame state -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}" Value="False"/>
                            <Condition Binding="{Binding Tag, ElementName=CharacterCore}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Frame" Property="Source" Value="{DynamicResource ExtendedFrame}"/>
                        <Setter TargetName="FrameHighlight" Property="Source" Value="{DynamicResource ExtendedFrameHighlight}"/>
                    </MultiDataTrigger>

                    <!-- Collapsed: In turn frame -->
                    <DataTrigger Binding="{Binding IsCurrentTurn}" Value="True">
                        <Setter TargetName="Frame" Property="Source" Value="{DynamicResource CollapsedFrameInTurn}"/>
                        <Setter TargetName="FrameHighlight" Property="Source" Value="{DynamicResource CollapsedFrameHighlightInTurn}"/>
                    </DataTrigger>

                    <!-- Extended: In turn frame -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsCurrentTurn}" Value="True"/>
                            <Condition Binding="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}" Value="False"/>
                            <Condition Binding="{Binding Tag, ElementName=CharacterCore}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Frame" Property="Source" Value="{DynamicResource ExtendedFrameInTurn}"/>
                        <Setter TargetName="FrameHighlight" Property="Source" Value="{DynamicResource ExtendedFrameHighlightInTurn}"/>
                    </MultiDataTrigger>

                    <!-- Collapsed: Remote frame -->
                    <DataTrigger Value="False">
                        <DataTrigger.Binding>
                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="DataContext.CurrentPlayer.UserId"/>
                                <Binding Path="OwnerUserID"/>
                            </MultiBinding>
                        </DataTrigger.Binding>
                        <Setter TargetName="Frame" Property="Source" Value="{DynamicResource CollapsedFrameRemote}"/>
                        <Setter TargetName="FrameHighlight" Property="Source" Value="{DynamicResource CollapsedFrameHighlightRemote}"/>
                    </DataTrigger>

                    <!-- Extended: Remote frame -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Value="False">
                                <Condition.Binding>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="DataContext.CurrentPlayer.UserId"/>
                                        <Binding Path="OwnerUserID"/>
                                    </MultiBinding>
                                </Condition.Binding>
                            </Condition>
                            <Condition Binding="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}" Value="False"/>
                            <Condition Binding="{Binding Tag, ElementName=CharacterCore}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Frame" Property="Source" Value="{DynamicResource ExtendedFrameRemote}"/>
                        <Setter TargetName="FrameHighlight" Property="Source" Value="{DynamicResource ExtendedFrameHighlightRemote}"/>
                    </MultiDataTrigger>

                    <!-- Collapsed: Selected frame -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Value="True">
                                <Condition.Binding>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding Path="DataContext.CurrentPlayer.SelectedCharacter" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                        <Binding Path="."/>
                                    </MultiBinding>
                                </Condition.Binding>
                            </Condition>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="Frame" Property="Source" Value="{DynamicResource CollapsedFrameSelected}"/>
                            <Setter TargetName="FrameHighlight" Property="Source" Value="{DynamicResource CollapsedFrameSelectedHighlight}"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <!-- Extended: Selection frame -->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=CharacterCore}" Value="True"/>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                            <Condition Binding="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}" Value="False"/>
                            <Condition Binding="{Binding Tag, ElementName=CharacterCore}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Frame" Property="Source" Value="{DynamicResource CollapsedFrameSelected}"/>
                        <Setter TargetName="FrameHighlight" Property="Source" Value="{DynamicResource CollapsedFrameSelectedHighlight}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=CharacterCore}" Value="True"/>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                            <Condition Binding="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}" Value="False"/>
                            <Condition Binding="{Binding Tag, ElementName=CharacterCore}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Frame" Property="Source" Value="{DynamicResource ExtendedFrameSelected}"/>
                        <Setter TargetName="FrameHighlight" Property="Source" Value="{DynamicResource ExtendedFrameSelectedHighlight}"/>
                    </MultiDataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <DataTemplate x:Key="CharacterLineRight" DataType="{x:Type ls:Character}">
                <DataTemplate.Resources>
                    <ImageSource x:Key="CollapsedFrame">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_summon_d.png</ImageSource>
                    <ImageSource x:Key="CollapsedFrameHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_summon_h.png</ImageSource>
                    <ImageSource x:Key="ExtendedFrame">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_d.png</ImageSource>
                    <ImageSource x:Key="ExtendedFrameHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_h.png</ImageSource>

                    <ImageSource x:Key="CollapsedFrameSelected">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_summon_active_d.png</ImageSource>
                    <ImageSource x:Key="CollapsedFrameSelectedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_summon_active_h.png</ImageSource>
                    <ImageSource x:Key="ExtendedFrameSelected">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_d.png</ImageSource>
                    <ImageSource x:Key="ExtendedFrameSelectedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_h.png</ImageSource>

                    <ImageSource x:Key="CollapsedFrameRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_summon_d.png</ImageSource>
                    <ImageSource x:Key="CollapsedFrameHighlightRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_summon_h.png</ImageSource>
                    <ImageSource x:Key="ExtendedFrameRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_d.png</ImageSource>
                    <ImageSource x:Key="ExtendedFrameHighlightRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_h.png</ImageSource>

                    <ImageSource x:Key="CollapsedFrameInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_d.png</ImageSource>
                    <ImageSource x:Key="CollapsedFrameHighlightInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_h.png</ImageSource>
                    <ImageSource x:Key="ExtendedFrameInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_d.png</ImageSource>
                    <ImageSource x:Key="ExtendedFrameHighlightInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_h.png</ImageSource>
                </DataTemplate.Resources>
                <Grid HorizontalAlignment="Right" VerticalAlignment="Top">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <ItemsControl x:Name="Statuses" Grid.Column="0" Grid.Row="0" Grid.ColumnSpan="2" ItemsSource="{Binding StatusEffects}" HorizontalAlignment="Right"
                                  AlternationCount="{Binding StatusEffects.Count}" MinHeight="53"
                                  ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Disabled" 
                                  ItemTemplate="{StaticResource SmallStatusTemplate}" Template="{StaticResource MinimalItemsControlTemplate}"
                                  Panel.ZIndex="100">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>
                    <ItemsControl x:Name="FollowersUnlinkedItemsControl" Grid.Column="0" Grid.Row="1" 
                                  ItemsSource="{Binding FollowersUnlinked}" AlternationCount="{Binding FollowersUnlinked.Count}" 
                                  Margin="0,-26,20,-26"
                                  ItemTemplate="{StaticResource FollowerCore}" Template="{StaticResource MinimalItemsControlTemplate}">
                        <b:Interaction.Behaviors>
                            <ls:HorizontalCollapseBehavior MaxSpace="{Binding Tag, ElementName=FollowersUnlinkedItemsControl}" SideElementsSizeModifier="0.85" SideElementsSizeModifierRadius="3" HorizontalAlignment="Right"
                                                           CanCollapse="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}"
                                                           NotCollapsedMaxSpace="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}, Converter={StaticResource MultiplierConverter}, ConverterParameter=0.85}"
                                                           MoveFirst="False">
                                <ls:HorizontalCollapseBehavior.Storyboard>
                                    <Storyboard>
                                        <!-- From and To will be filled in the behavior -->
                                        <ThicknessAnimation Storyboard.TargetProperty="Margin" Duration="0:0:0.15">
                                            <ThicknessAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </ThicknessAnimation.EasingFunction>
                                        </ThicknessAnimation>
                                    </Storyboard>
                                </ls:HorizontalCollapseBehavior.Storyboard>
                            </ls:HorizontalCollapseBehavior>
                        </b:Interaction.Behaviors>
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="ContentPresenter">
                                <Setter Property="Panel.ZIndex">
                                    <Setter.Value>
                                        <MultiBinding Converter="{StaticResource SubtractionMultipleConverter}">
                                            <Binding Path="(ItemsControl.AlternationIndex)" RelativeSource="{RelativeSource Mode=Self}"/>
                                            <Binding Source="-1"/>
                                            <Binding Path="(ItemsControl.AlternationCount)"  RelativeSource="{RelativeSource Mode=Self}"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                    </ItemsControl>
                    <ItemsControl x:Name="FollowersItemsControl" Grid.Column="1" Grid.Row="1" 
                                  ItemsSource="{Binding Followers}" AlternationCount="{Binding Followers.Count}" 
                                  Tag="200"
                                  ItemTemplate="{StaticResource FollowerCore}" Template="{StaticResource MinimalItemsControlTemplate}"
                                  Margin="0,-26">
                        <b:Interaction.Behaviors>
                            <ls:HorizontalCollapseBehavior MaxSpace="{Binding Tag, ElementName=FollowersItemsControl}" SideElementsSizeModifier="0.85" SideElementsSizeModifierRadius="3" HorizontalAlignment="Right"
                                                           CanCollapse="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}"
                                                           NotCollapsedMaxSpace="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}, Converter={StaticResource MultiplierConverter}, ConverterParameter=0.85}">
                                <ls:HorizontalCollapseBehavior.Storyboard>
                                    <Storyboard>
                                        <!-- From and To will be filled in the behavior -->
                                        <ThicknessAnimation Storyboard.TargetProperty="Margin" Duration="0:0:0.15">
                                            <ThicknessAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </ThicknessAnimation.EasingFunction>
                                        </ThicknessAnimation>
                                    </Storyboard>
                                </ls:HorizontalCollapseBehavior.Storyboard>
                            </ls:HorizontalCollapseBehavior>
                        </b:Interaction.Behaviors>
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="ContentPresenter">
                                <Setter Property="Panel.ZIndex">
                                    <Setter.Value>
                                        <MultiBinding Converter="{StaticResource SubtractionMultipleConverter}">
                                            <Binding Path="(ItemsControl.AlternationIndex)" RelativeSource="{RelativeSource Mode=Self}"/>
                                            <Binding Source="-1"/>
                                            <Binding Path="(ItemsControl.AlternationCount)"  RelativeSource="{RelativeSource Mode=Self}"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                    </ItemsControl>
                    <ContentPresenter x:Name="CharacterPortrait" Grid.Column="2" Grid.Row="0" Grid.RowSpan="2" Content="{Binding .}" Panel.ZIndex="1" ContentTemplate="{StaticResource PortraitCore}">
                        <ContentPresenter.Resources>
                            <ImageSource x:Key="CollapsedFrame">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_d.png</ImageSource>
                            <ImageSource x:Key="CollapsedFrameHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_h.png</ImageSource>
                            <ImageSource x:Key="ExtendedFrame">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_d.png</ImageSource>
                            <ImageSource x:Key="ExtendedFrameHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_h.png</ImageSource>

                            <ImageSource x:Key="CollapsedFrameSelected">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_d.png</ImageSource>
                            <ImageSource x:Key="CollapsedFrameSelectedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_h.png</ImageSource>
                            <ImageSource x:Key="ExtendedFrameSelected">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_d.png</ImageSource>
                            <ImageSource x:Key="ExtendedFrameSelectedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_h.png</ImageSource>

                            <ImageSource x:Key="CollapsedFrameRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_d.png</ImageSource>
                            <ImageSource x:Key="CollapsedFrameHighlightRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_h.png</ImageSource>
                            <ImageSource x:Key="ExtendedFrameRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_d.png</ImageSource>
                            <ImageSource x:Key="ExtendedFrameHighlightRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_h.png</ImageSource>

                            <ImageSource x:Key="CollapsedFrameInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_d.png</ImageSource>
                            <ImageSource x:Key="CollapsedFrameHighlightInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_h.png</ImageSource>
                            <ImageSource x:Key="ExtendedFrameInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_d.png</ImageSource>
                            <ImageSource x:Key="ExtendedFrameHighlightInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_h.png</ImageSource>
                        </ContentPresenter.Resources>
                    </ContentPresenter>
                    <Path x:Name="Arrow" Grid.Column="3" Grid.Row="0" Grid.RowSpan="2" Width="32" Data="M 32 36 L 16 18 L 32 0 Z" Fill="{StaticResource LS_PrimaryColor}" Visibility="Hidden" VerticalAlignment="Center" Margin="0,0,6,0"/>
                </Grid>
                <DataTemplate.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Value="True">
                                <Condition.Binding>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding Path="DataContext.CurrentPlayer.SelectedCharacter" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                        <Binding Path="."/>
                                    </MultiBinding>
                                </Condition.Binding>
                            </Condition>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="Arrow" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Value="True">
                                <Condition.Binding>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding Path="DataContext.CurrentPlayer.SelectedCharacter.Owner" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                        <Binding Path="."/>
                                    </MultiBinding>
                                </Condition.Binding>
                            </Condition>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="Arrow" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding (ls:MoveFocus.IsKeyboardFocusWithin), RelativeSource={RelativeSource Self}}" Value="True"/>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="Arrow" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="CharacterPanel">
                        <Setter TargetName="FollowersItemsControl" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="FollowersUnlinkedItemsControl" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="AlchemyPanel">
                        <Setter TargetName="FollowersItemsControl" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="FollowersUnlinkedItemsControl" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="SpellBook">
                        <Setter TargetName="FollowersItemsControl" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="FollowersUnlinkedItemsControl" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Dialogue">
                        <Setter TargetName="FollowersItemsControl" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="FollowersUnlinkedItemsControl" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Followers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                            <Condition Binding="{Binding FollowersUnlinked.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="FollowersItemsControl" Property="Tag" Value="100"/>
                            <Setter TargetName="FollowersUnlinkedItemsControl" Property="Tag" Value="100"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True">
                        <Setter TargetName="Statuses" Property="Visibility" Value="Hidden"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="CharacterPanel"/>
                            <Condition Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Common"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="Statuses" Property="Visibility" Value="Hidden"/>
                    </MultiDataTrigger>
                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="AlchemyPanel">
                        <Setter TargetName="Statuses" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="SpellBook">
                        <Setter TargetName="Statuses" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Dialogue">
                        <Setter TargetName="Statuses" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <DataTemplate x:Key="CharacterLineLeft" DataType="{x:Type ls:Character}">
                <DataTemplate.Resources>
                    <ImageSource x:Key="CollapsedFrame">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_summon_d.png</ImageSource>
                    <ImageSource x:Key="CollapsedFrameHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_summon_h.png</ImageSource>
                    <ImageSource x:Key="ExtendedFrame">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_d.png</ImageSource>
                    <ImageSource x:Key="ExtendedFrameHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_h.png</ImageSource>

                    <ImageSource x:Key="CollapsedFrameSelected">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_summon_active_d.png</ImageSource>
                    <ImageSource x:Key="CollapsedFrameSelectedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_summon_active_h.png</ImageSource>
                    <ImageSource x:Key="ExtendedFrameSelected">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_d.png</ImageSource>
                    <ImageSource x:Key="ExtendedFrameSelectedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_h.png</ImageSource>

                    <ImageSource x:Key="CollapsedFrameRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_summon_d.png</ImageSource>
                    <ImageSource x:Key="CollapsedFrameHighlightRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_summon_h.png</ImageSource>
                    <ImageSource x:Key="ExtendedFrameRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_d.png</ImageSource>
                    <ImageSource x:Key="ExtendedFrameHighlightRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_h.png</ImageSource>

                    <ImageSource x:Key="CollapsedFrameInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_d.png</ImageSource>
                    <ImageSource x:Key="CollapsedFrameHighlightInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_h.png</ImageSource>
                    <ImageSource x:Key="ExtendedFrameInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_d.png</ImageSource>
                    <ImageSource x:Key="ExtendedFrameHighlightInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_h.png</ImageSource>

                    <BitmapImage x:Key="hearBtn" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/ListenIn/btn.png"/>
                    <BitmapImage x:Key="btnBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/ListenIn/listenBg_btn.png" />
                    <BitmapImage x:Key="trail" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/ListenIn/trail.png" />
                    <BitmapImage x:Key="playIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/ListenIn/ico_play.png" />
                    <BitmapImage x:Key="hearIcon" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/ListenIn/ico_ear.png" />

                </DataTemplate.Resources>
                <Grid>
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>
                    <Path x:Name="Arrow" Grid.Column="0" Grid.Row="0" Grid.RowSpan="2" Width="32" Data="M 0 36 L 18 18 L 0 0 Z" Fill="{DynamicResource LS_PrimaryColor}" Visibility="Hidden"
                          VerticalAlignment="Center" Margin="6,0,0,0"/>
                    <ContentPresenter x:Name="CharacterPortrait" Grid.Column="1" Grid.Row="0" Grid.RowSpan="2" Content="{Binding .}" Panel.ZIndex="2" ContentTemplate="{StaticResource PortraitCore}">
                        <ContentPresenter.Resources>
                            <ImageSource x:Key="CollapsedFrame">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_d.png</ImageSource>
                            <ImageSource x:Key="CollapsedFrameHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_h.png</ImageSource>
                            <ImageSource x:Key="ExtendedFrame">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_d.png</ImageSource>
                            <ImageSource x:Key="ExtendedFrameHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_h.png</ImageSource>

                            <ImageSource x:Key="CollapsedFrameSelected">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_d.png</ImageSource>
                            <ImageSource x:Key="CollapsedFrameSelectedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_h.png</ImageSource>
                            <ImageSource x:Key="ExtendedFrameSelected">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_d.png</ImageSource>
                            <ImageSource x:Key="ExtendedFrameSelectedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_h.png</ImageSource>

                            <ImageSource x:Key="CollapsedFrameRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_d.png</ImageSource>
                            <ImageSource x:Key="CollapsedFrameHighlightRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_h.png</ImageSource>
                            <ImageSource x:Key="ExtendedFrameRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_d.png</ImageSource>
                            <ImageSource x:Key="ExtendedFrameHighlightRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_h.png</ImageSource>

                            <ImageSource x:Key="CollapsedFrameInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_d.png</ImageSource>
                            <ImageSource x:Key="CollapsedFrameHighlightInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_h.png</ImageSource>
                            <ImageSource x:Key="ExtendedFrameInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_d.png</ImageSource>
                            <ImageSource x:Key="ExtendedFrameHighlightInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_h.png</ImageSource>

                        </ContentPresenter.Resources>
                    </ContentPresenter>

                    <Control x:Name="ListenInGrid" Grid.Column="1" Grid.Row="0"  HorizontalAlignment="Right" Grid.RowSpan="2" Visibility="Collapsed" Height="218" Margin="-40,0" Panel.ZIndex="5">
                        <Control.Template>
                            <ControlTemplate>
                                <Grid>
                                    <Image x:Name="BtnBackground" Source="{StaticResource btnBackground}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" RenderTransformOrigin="0.5 0.5">
                                        <Image.RenderTransform>
                                            <ScaleTransform x:Name="BtnBackgroundTransform" ScaleX="1" ScaleY="1"/>
                                        </Image.RenderTransform>
                                    </Image>

                                    <Image x:Name="BtnBg" Source="{StaticResource hearBtn}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" RenderTransformOrigin="0.5 0.5">
                                        <Image.RenderTransform>
                                            <ScaleTransform x:Name="BtnBgTransform" ScaleX="0" ScaleY="0"/>
                                        </Image.RenderTransform>
                                    </Image>

                                    <Grid x:Name="IconGrid">
                                        <Image x:Name="icon" Source="{DynamicResource hearIcon}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" RenderTransformOrigin="0.5 0.5">
                                            <Image.RenderTransform>
                                                <ScaleTransform x:Name="iconTransform" ScaleX="1" ScaleY="1"/>
                                            </Image.RenderTransform>
                                        </Image>
                                        <Image x:Name="trail" Source="{DynamicResource trail}" HorizontalAlignment="Center" VerticalAlignment="Center" Stretch="None" RenderTransformOrigin="0.5 0.5">
                                            <Image.RenderTransform>
                                                <RotateTransform x:Name="trailTransform" Angle="0"/>
                                            </Image.RenderTransform>
                                        </Image>
                                        <Image x:Name="play1" Source="{DynamicResource playIcon}" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,23,0" Stretch="None" RenderTransformOrigin="0.5 0.5">
                                            <Image.RenderTransform>
                                                <TranslateTransform x:Name="play1Transform" X="0"/>
                                            </Image.RenderTransform>
                                        </Image>
                                        <Image x:Name="play2" Source="{DynamicResource playIcon}" Opacity="0" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,23,0" Stretch="None" RenderTransformOrigin="0.5 0.5">
                                            <Image.RenderTransform>
                                                <TranslateTransform x:Name="play2Transform" X="0"/>
                                            </Image.RenderTransform>
                                        </Image>
                                    </Grid>
                                </Grid>
                                    <ControlTemplate.Triggers>
                                    <Trigger Property="IsVisible" Value="True">

                                        <Trigger.EnterActions>
                                            <BeginStoryboard x:Name="ListenButtonAnimation">
                                                <Storyboard>
                                                    <!-- Animations OnStart-->
                                                    <DoubleAnimation Storyboard.TargetName="BtnBackgroundTransform" Storyboard.TargetProperty="ScaleX" Duration="0:0:0.6" From="1.4" To="1">
                                                        <DoubleAnimation.EasingFunction>
                                                            <ElasticEase EasingMode="EaseOut" Oscillations="1"/>
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>
                                                    <DoubleAnimation Storyboard.TargetName="BtnBackgroundTransform" Storyboard.TargetProperty="ScaleY" Duration="0:0:0.6" From="1.4" To="1">
                                                        <DoubleAnimation.EasingFunction>
                                                            <ElasticEase EasingMode="EaseOut" Oscillations="1"/>
                                                        </DoubleAnimation.EasingFunction>
                                                    </DoubleAnimation>

                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BtnBgTransform" Storyboard.TargetProperty="ScaleX">
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.0"/>
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.4"/>
                                                        <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.8">
                                                            <EasingDoubleKeyFrame.EasingFunction>
                                                                <ElasticEase EasingMode="EaseOut" Oscillations="1" Springiness="8"/>
                                                            </EasingDoubleKeyFrame.EasingFunction>
                                                        </EasingDoubleKeyFrame>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BtnBgTransform" Storyboard.TargetProperty="ScaleY">
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.0"/>
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.4"/>
                                                        <EasingDoubleKeyFrame Value="1" KeyTime="0:0:0.8">
                                                            <EasingDoubleKeyFrame.EasingFunction>
                                                                <ElasticEase EasingMode="EaseOut" Oscillations="1" Springiness="8"/>
                                                            </EasingDoubleKeyFrame.EasingFunction>
                                                        </EasingDoubleKeyFrame>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BtnBg" Storyboard.TargetProperty="Opacity">
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0"/>
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.4"/>
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.55"/>
                                                    </DoubleAnimationUsingKeyFrames>

                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="BtnBackground" Storyboard.TargetProperty="Opacity">
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0"/>
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.2"/>
                                                    </DoubleAnimationUsingKeyFrames>

                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="IconGrid" Storyboard.TargetProperty="Opacity">
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0"/>
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0.6"/>
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.8"/>
                                                    </DoubleAnimationUsingKeyFrames>

                                                    <!-- Animations Forever-->
                                                    <DoubleAnimation Storyboard.TargetName="trailTransform" Storyboard.TargetProperty="Angle" From="0" To="360" RepeatBehavior="Forever" Duration="0:0:3"/>
                                                    <DoubleAnimation Storyboard.TargetName="play1Transform" Storyboard.TargetProperty="X" From="-18" To="0" RepeatBehavior="Forever" Duration="0:0:1.6"/>
                                                    <DoubleAnimation Storyboard.TargetName="play2Transform" Storyboard.TargetProperty="X" From="-18" To="0" RepeatBehavior="Forever" Duration="0:0:1.6" BeginTime="0:0:0.8"/>

                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="play1" Storyboard.TargetProperty="Opacity" RepeatBehavior="Forever">
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0"/>
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.8"/>
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:1.2"/>
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:1.6"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="play2" Storyboard.TargetProperty="Opacity" RepeatBehavior="Forever" BeginTime="0:0:0.8">
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:0"/>
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0.8"/>
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:1.2"/>
                                                        <LinearDoubleKeyFrame Value="0" KeyTime="0:0:1.6"/>
                                                    </DoubleAnimationUsingKeyFrames>

                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="iconTransform" Storyboard.TargetProperty="ScaleX" RepeatBehavior="Forever">
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0"/>
                                                        <LinearDoubleKeyFrame Value="1.05" KeyTime="0:0:0.8"/>
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:1.6"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="iconTransform" Storyboard.TargetProperty="ScaleY" RepeatBehavior="Forever">
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:0"/>
                                                        <LinearDoubleKeyFrame Value="1.05" KeyTime="0:0:0.8"/>
                                                        <LinearDoubleKeyFrame Value="1" KeyTime="0:0:1.6"/>
                                                    </DoubleAnimationUsingKeyFrames>
                                                </Storyboard>
                                            </BeginStoryboard>
                                        </Trigger.EnterActions>
                                        <Trigger.ExitActions>
                                            <StopStoryboard BeginStoryboardName="ListenButtonAnimation"/>
                                        </Trigger.ExitActions>
                                    </Trigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Control.Template>
                    </Control>

                    <ItemsControl x:Name="Statuses" Grid.Column="3" Grid.Row="0" Grid.ColumnSpan="2"
                                  ItemsSource="{Binding StatusEffects}" AlternationCount="{Binding StatusEffects.Count}"
                                  HorizontalAlignment="Left" MinHeight="53" ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Disabled"
                                  ItemTemplate="{StaticResource SmallStatusTemplate}" Template="{StaticResource MinimalItemsControlTemplate}"
                                  Panel.ZIndex="100">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>
                    <ItemsControl x:Name="FollowersItemsControl" Grid.Column="3" Grid.Row="1" 
                                  ItemsSource="{Binding Followers}" AlternationCount="{Binding Followers.Count}" 
                                  ItemTemplate="{StaticResource FollowerCore}" 
                                  Panel.ZIndex="1" Tag="200" 
                                  Template="{StaticResource MinimalItemsControlTemplate}"
                                  Margin="0,-26">
                        <b:Interaction.Behaviors>
                            <ls:HorizontalCollapseBehavior MaxSpace="{Binding Tag, ElementName=FollowersItemsControl}" SideElementsSizeModifier="0.85" SideElementsSizeModifierRadius="3"
                                                                   CanCollapse="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}"
                                                                   NotCollapsedMaxSpace="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}, Converter={StaticResource MultiplierConverter}, ConverterParameter=0.85}">
                                <ls:HorizontalCollapseBehavior.Storyboard>
                                    <Storyboard>
                                        <!-- From and To will be filled in the behavior -->
                                        <ThicknessAnimation Storyboard.TargetProperty="Margin" Duration="0:0:0.15">
                                            <ThicknessAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </ThicknessAnimation.EasingFunction>
                                        </ThicknessAnimation>
                                    </Storyboard>
                                </ls:HorizontalCollapseBehavior.Storyboard>
                            </ls:HorizontalCollapseBehavior>
                        </b:Interaction.Behaviors>
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="ContentPresenter">
                                <Setter Property="Panel.ZIndex">
                                    <Setter.Value>
                                        <MultiBinding Converter="{StaticResource SubtractionMultipleConverter}">
                                            <Binding Path="AlternationCount" RelativeSource="{RelativeSource AncestorType={x:Type ItemsControl}}"/>
                                            <Binding Path="(ItemsControl.AlternationIndex)" RelativeSource="{RelativeSource Mode=Self}"/>
                                            <Binding Source="1"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                    </ItemsControl>
                    <ItemsControl x:Name="FollowersUnlinkedItemsControl" Grid.Column="4" Grid.Row="1" 
                                  ItemsSource="{Binding FollowersUnlinked}" AlternationCount="{Binding FollowersUnlinked.Count}" 
                                  ItemTemplate="{StaticResource FollowerCore}" 
                                  Margin="20,-26,0,-26" Tag="200"
                                  Template="{StaticResource MinimalItemsControlTemplate}">
                        <b:Interaction.Behaviors>
                            <ls:HorizontalCollapseBehavior MaxSpace="{Binding Tag, ElementName=FollowersUnlinkedItemsControl}" SideElementsSizeModifier="0.85" SideElementsSizeModifierRadius="3"
                                                                   CanCollapse="{Binding DataContext.PartyLineInactive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}"
                                                                   NotCollapsedMaxSpace="{Binding ActualWidth, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}, Converter={StaticResource MultiplierConverter}, ConverterParameter=0.85}"
                                                                   MoveFirst="False">
                                <ls:HorizontalCollapseBehavior.Storyboard>
                                    <Storyboard>
                                        <!-- From and To will be filled in the behavior -->
                                        <ThicknessAnimation Storyboard.TargetProperty="Margin" Duration="0:0:0.15">
                                            <ThicknessAnimation.EasingFunction>
                                                <CubicEase EasingMode="EaseOut"/>
                                            </ThicknessAnimation.EasingFunction>
                                        </ThicknessAnimation>
                                    </Storyboard>
                                </ls:HorizontalCollapseBehavior.Storyboard>
                            </ls:HorizontalCollapseBehavior>
                        </b:Interaction.Behaviors>
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="ContentPresenter">
                                <Setter Property="Panel.ZIndex">
                                    <Setter.Value>
                                        <MultiBinding Converter="{StaticResource SubtractionMultipleConverter}">
                                            <Binding Path="AlternationCount" RelativeSource="{RelativeSource AncestorType={x:Type ItemsControl}}"/>
                                            <Binding Path="(ItemsControl.AlternationIndex)" RelativeSource="{RelativeSource Mode=Self}"/>
                                            <Binding Source="1"/>
                                        </MultiBinding>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                    </ItemsControl>
                </Grid>
                <DataTemplate.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Value="True">
                                <Condition.Binding>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding Path="DataContext.CurrentPlayer.SelectedCharacter" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                        <Binding Path="."/>
                                    </MultiBinding>
                                </Condition.Binding>
                            </Condition>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="Arrow" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Value="True">
                                <Condition.Binding>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding Path="DataContext.CurrentPlayer.SelectedCharacter.Owner" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                        <Binding Path="."/>
                                    </MultiBinding>
                                </Condition.Binding>
                            </Condition>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="Arrow" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding (ls:MoveFocus.IsKeyboardFocusWithin), RelativeSource={RelativeSource Self}}" Value="True"/>
                            <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="Arrow" Property="Visibility" Value="Visible"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="CharacterPanel">
                        <Setter TargetName="FollowersItemsControl" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="FollowersUnlinkedItemsControl" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="AlchemyPanel">
                        <Setter TargetName="FollowersItemsControl" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="FollowersUnlinkedItemsControl" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="SpellBook">
                        <Setter TargetName="FollowersItemsControl" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="FollowersUnlinkedItemsControl" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Followers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                            <Condition Binding="{Binding FollowersUnlinked.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="FollowersItemsControl" Property="Tag" Value="100"/>
                            <Setter TargetName="FollowersUnlinkedItemsControl" Property="Tag" Value="100"/>
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>
                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True">
                        <Setter TargetName="Statuses" Property="Visibility" Value="Hidden"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="CharacterPanel">
                        <Setter TargetName="Statuses" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="AlchemyPanel">
                        <Setter TargetName="Statuses" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="SpellBook">
                        <Setter TargetName="Statuses" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding CharacterMode}" Value="InDialogue"/>
                            <Condition Value="False">
                                <Condition.Binding>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="DataContext.CurrentPlayer.UserId"/>
                                        <Binding Path="OwnerUserID"/>
                                    </MultiBinding>
                                </Condition.Binding>
                            </Condition>
                            <Condition Value="False">
                                <Condition.Binding>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding Path="DataContext.Data.LocalPlayers.Count" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                        <Binding Path="DataContext.Data.Players.Count" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                    </MultiBinding>
                                </Condition.Binding>
                            </Condition>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="ListenInGrid" Property="Visibility" Value="Visible"/>
                    </MultiDataTrigger>
                    <DataTrigger Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.InAutomatedDialogueCount, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0 }" Value="True">
                        <Setter TargetName="ListenInGrid" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <Storyboard x:Key="CharacterPanelEntryStoryboard">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Root">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ExtraPortrait">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
                <ThicknessAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="Margin" Storyboard.TargetName="ExtraInfo">
                    <ThicknessAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseInOut"/>
                    </ThicknessAnimation.EasingFunction>
                </ThicknessAnimation>
            </Storyboard>

            <Storyboard x:Key="CharacterPanelExitLeftStoryboard">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Root">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ExtraPortrait">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
                <ThicknessAnimation Duration="0:0:0.3" To="-170,0,170,0" Storyboard.TargetProperty="Margin" Storyboard.TargetName="ExtraInfo">
                    <ThicknessAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseInOut"/>
                    </ThicknessAnimation.EasingFunction>
                </ThicknessAnimation>
            </Storyboard>

            <Storyboard x:Key="CharacterPanelExitRightStoryboard">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Root">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ExtraPortrait">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
                <ThicknessAnimation Duration="0:0:0.3" To="170,0,-170,0" Storyboard.TargetProperty="Margin" Storyboard.TargetName="ExtraInfo">
                    <ThicknessAnimation.EasingFunction>
                        <CubicEase EasingMode="EaseInOut"/>
                    </ThicknessAnimation.EasingFunction>
                </ThicknessAnimation>
            </Storyboard>

            <Storyboard x:Key="HideExtraInfoStoryboard" FillBehavior="Stop">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ExtraInfo">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>

            <Storyboard x:Key="ShowExtraInfoStoryboard" FillBehavior="Stop">
                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ExtraInfo">
                    <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                </DoubleAnimationUsingKeyFrames>
            </Storyboard>

            <BitmapImage x:Key="PartyLineFocusBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/c_partyLine_focusBG.png"/>
            <BitmapImage x:Key="PartyLineFocusBgEdge" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/c_partyLine_focusBG_edge.png"/>
        </DataTemplate.Resources>

        <Grid x:Name="PlayerPortraitsRoot" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" d:DataContext="{d:DesignInstance {x:Type ls:DCPartyLine}, IsDesignTimeCreatable=True}">
            <Grid.Triggers>
                <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                    <StopStoryboard BeginStoryboardName="CharacterPanelEntryStoryboard"/>
                    <StopStoryboard BeginStoryboardName="CharacterPanelExitLeftStoryboard"/>
                    <StopStoryboard BeginStoryboardName="CharacterPanelExitRightStoryboard"/>
                </EventTrigger>
            </Grid.Triggers>
            <b:Interaction.Triggers>
                <b:StoryboardCompletedTrigger Storyboard="{StaticResource ShowCharacterSelectAnim}">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding PartyLineInactive}" Operator="Equal" RightOperand="False"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:InvokeCommandAction Command="{Binding ShowCharacterSelectCommand}"/>
                    <b:InvokeCommandAction Command="{Binding DataContext.ShowTooltipOnUIElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Path=FocusedElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>

                    <!-- Push a tutorial layer when it is opened -->
                    <b:InvokeCommandAction Command="{Binding TutorialLayer}">
                        <b:InvokeCommandAction.CommandParameter>
                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                <Binding>
                                    <Binding.Source>
                                        <System:String>dda09fc0-3f43-4a84-b77e-0c49a12b1c5e</System:String>
                                    </Binding.Source>
                                </Binding>
                                <Binding>
                                    <Binding.Source>
                                        <System:String>CharacterSelect</System:String>
                                    </Binding.Source>
                                </Binding>
                                <Binding>
                                    <Binding.Source>
                                        <System:Boolean>True</System:Boolean>
                                    </Binding.Source>
                                </Binding>
                            </MultiBinding>
                        </b:InvokeCommandAction.CommandParameter>
                    </b:InvokeCommandAction>
                </b:StoryboardCompletedTrigger>

                <!-- Close on starting a dialog -->
                <b:DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InDialogue">
                    <b:InvokeCommandAction Command="{Binding DataContext.HideCharacterSelectCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                </b:DataTrigger>

                <b:DataTrigger Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="ShortcutMenu">
                    <b:InvokeCommandAction Command="{Binding DataContext.HideCharacterSelectCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                </b:DataTrigger>

                <!-- Open animation triggers -->
                <b:DataTrigger Binding="{Binding PartyLineInactive}" Value="False">
                    <b:ControlStoryboardAction Storyboard="{StaticResource HideCharacterSelectAnim}" ControlStoryboardOption="Pause"/>
                    <b:ControlStoryboardAction Storyboard="{StaticResource ShowCharacterSelectAnim}" ControlStoryboardOption="Play"/>
                    <ls:LSPlaySound Sound="UI_HUD_Controller_PartyMenu_Open" />
                </b:DataTrigger>

                <b:DataTrigger Binding="{Binding PartyLineInactive}" Value="False">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding Layout}" Operator="Equal" RightOperand="Common"/>
                                <b:ComparisonCondition LeftOperand="{Binding CurrentPlayer.UIData.ActiveState}" Operator="NotEqual" RightOperand="Dialogue"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideOutCommon}" ControlStoryboardOption="Pause"/>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideInCommon}" ControlStoryboardOption="Play"/>
                </b:DataTrigger>
                <b:DataTrigger Binding="{Binding PartyLineInactive}" Value="False">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding Layout}" Operator="Equal" RightOperand="Common"/>
                                <b:ComparisonCondition LeftOperand="{Binding CurrentPlayer.UIData.ActiveState}" Operator="Equal" RightOperand="Dialogue"/>
                                <b:ComparisonCondition LeftOperand="{Binding Data.LocalPlayers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Operator="Equal" RightOperand="True"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideOutLeft}" ControlStoryboardOption="Pause"/>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideInLeft}" ControlStoryboardOption="Play"/>
                </b:DataTrigger>

                <b:DataTrigger Binding="{Binding PartyLineInactive}" Value="False">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding Layout}" Operator="Equal" RightOperand="Left"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideOutLeft}" ControlStoryboardOption="Pause"/>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideInLeft}" ControlStoryboardOption="Play"/>
                </b:DataTrigger>

                <b:DataTrigger Binding="{Binding PartyLineInactive}" Value="False">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding Layout}" Operator="Equal" RightOperand="Right"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideOutRight}" ControlStoryboardOption="Pause"/>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideInRight}" ControlStoryboardOption="Play"/>
                </b:DataTrigger>
                <b:DataTrigger Binding="{Binding PartyLineInactive}" Value="False">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding CurrentPlayer.UIData.ActiveState}" Operator="Equal" RightOperand="Dialogue"/>
                                <b:ComparisonCondition LeftOperand="{Binding Layout}" Operator="Equal" RightOperand="Common"/>
                                <b:ComparisonCondition LeftOperand="{Binding CurrentPlayer.PlayerId}" Operator="Equal" RightOperand="2"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideOutRight}" ControlStoryboardOption="Pause"/>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideInRight}" ControlStoryboardOption="Play"/>
                </b:DataTrigger>

                <!-- Close animation triggers -->
                <b:DataTrigger Binding="{Binding PartyLineInactive}" Value="True">
                    <b:ControlStoryboardAction Storyboard="{StaticResource ShowCharacterSelectAnim}" ControlStoryboardOption="Pause"/>
                    <b:ControlStoryboardAction Storyboard="{StaticResource HideCharacterSelectAnim}" ControlStoryboardOption="Play"/>


                    <!-- Pop the tutorial layer when it is closed -->
                    <b:InvokeCommandAction Command="{Binding TutorialLayer}">
                        <b:InvokeCommandAction.CommandParameter>
                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                <Binding>
                                    <Binding.Source>
                                        <System:String>dda09fc0-3f43-4a84-b77e-0c49a12b1c5e</System:String>
                                    </Binding.Source>
                                </Binding>
                                <Binding>
                                    <Binding.Source>
                                        <System:String>CharacterSelect</System:String>
                                    </Binding.Source>
                                </Binding>
                                <Binding>
                                    <Binding.Source>
                                        <System:Boolean>False</System:Boolean>
                                    </Binding.Source>
                                </Binding>
                            </MultiBinding>
                        </b:InvokeCommandAction.CommandParameter>
                    </b:InvokeCommandAction>
                </b:DataTrigger>

                <b:DataTrigger Binding="{Binding PartyLineInactive}" Value="True">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding Layout}" Operator="Equal" RightOperand="Common"/>
                                <b:ComparisonCondition LeftOperand="{Binding CurrentPlayer.UIData.ActiveState}" Operator="NotEqual" RightOperand="Dialogue"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideInCommon}" ControlStoryboardOption="Pause"/>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideOutCommon}" ControlStoryboardOption="Play"/>
                </b:DataTrigger>
                <b:DataTrigger Binding="{Binding PartyLineInactive}" Value="False">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding Layout}" Operator="Equal" RightOperand="Common"/>
                                <b:ComparisonCondition LeftOperand="{Binding CurrentPlayer.UIData.ActiveState}" Operator="Equal" RightOperand="Dialogue"/>
                                <b:ComparisonCondition LeftOperand="{Binding Data.LocalPlayers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Operator="Equal" RightOperand="True"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideInLeft}" ControlStoryboardOption="Pause"/>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideOutLeft}" ControlStoryboardOption="Play"/>
                </b:DataTrigger>

                <b:DataTrigger Binding="{Binding PartyLineInactive}" Value="True">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding Layout}" Operator="Equal" RightOperand="Left"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideInLeft}" ControlStoryboardOption="Pause"/>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideOutLeft}" ControlStoryboardOption="Play"/>
                </b:DataTrigger>

                <b:DataTrigger Binding="{Binding PartyLineInactive}" Value="True">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding Layout}" Operator="Equal" RightOperand="Right"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideInRight}" ControlStoryboardOption="Pause"/>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideOutRight}" ControlStoryboardOption="Play"/>
                </b:DataTrigger>
                <b:DataTrigger Binding="{Binding PartyLineInactive}" Value="False">
                    <b:Interaction.Behaviors>
                        <b:ConditionBehavior>
                            <b:ConditionalExpression>
                                <b:ComparisonCondition LeftOperand="{Binding CurrentPlayer.UIData.ActiveState}" Operator="Equal" RightOperand="Dialogue"/>
                                <b:ComparisonCondition LeftOperand="{Binding Layout}" Operator="Equal" RightOperand="Common"/>
                                <b:ComparisonCondition LeftOperand="{Binding CurrentPlayer.PlayerId}" Operator="Equal" RightOperand="2"/>
                            </b:ConditionalExpression>
                        </b:ConditionBehavior>
                    </b:Interaction.Behaviors>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideInRight}" ControlStoryboardOption="Pause"/>
                    <b:ControlStoryboardAction Storyboard="{StaticResource SlideOutRight}" ControlStoryboardOption="Play"/>
                </b:DataTrigger>
            </b:Interaction.Triggers>

            <!-- Full screen overlay background -->
            <Rectangle x:Name="ScreenBg"  HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Visibility="Hidden" Opacity="0">
                <Rectangle.Fill>
                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                            <GradientStop Color="Black" Offset="0"/>
                            <GradientStop Color="{StaticResource Trade.BackgroundTransparentColor}" Offset="1"/>
                        </LinearGradientBrush>
                    </Rectangle.Fill>
                </Rectangle>


            <Grid x:Name="Root" HorizontalAlignment="Left" VerticalAlignment="Stretch" MaxHeight="1860">
                <Grid x:Name="ScalingContent">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                        <ColumnDefinition Width="Auto"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform ScaleX="{StaticResource CurrentScaleFactor}" ScaleY="{StaticResource CurrentScaleFactor}"/>
                            <SkewTransform/>
                            <RotateTransform/>
                            <TranslateTransform/>
                        </TransformGroup>
                    </Grid.RenderTransform>

                    <!-- Vertical background elements behind the portrait list -->
                    <Border Grid.Column="1" x:Name="Bg" Visibility="Hidden" HorizontalAlignment="Stretch">
                        <Border.Background>
                            <ImageBrush ImageSource="{StaticResource PartyLineFocusBg}" Stretch="Fill"/>
                        </Border.Background>
                    </Border>
                    <Image x:Name="LeftEdge" Grid.Column="0" Margin="0,0,-14,0" Visibility="Hidden" VerticalAlignment="Stretch" HorizontalAlignment="Left" Source="{StaticResource PartyLineFocusBgEdge}"/>
                    <Image x:Name="RightEdge" Grid.Column="2" Margin="-14,0,0,0" Visibility="Hidden" VerticalAlignment="Stretch" HorizontalAlignment="Right" Source="{StaticResource PartyLineFocusBgEdge}" RenderTransformOrigin="0.5 0.5">
                        <Image.RenderTransform>
                            <ScaleTransform ScaleX="-1"/>
                        </Image.RenderTransform>
                    </Image>

                    <ls:LSInputBinding x:Name="PartyLineOpenerButton" PlayerId="{Binding CurrentPlayer.PlayerId}" BoundEvent="PartyManagement"
                                       Command="{Binding ShowCharacterSelectCommand}"
                                       CommandParameter="{Binding Path=FocusedElement.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                       IsEnabled="{Binding PartyLineInactive}"/>

                    <ls:LSInputBinding x:Name="PartyLineCloserButton" PlayerId="{Binding CurrentPlayer.PlayerId}" BoundEvent="PartyManagement"
                                       Command="{Binding HideCharacterSelectCommand}"
                                       CommandParameter="{Binding Path=FocusedElement.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                       IsEnabled="{Binding PartyLineInactive, Converter={StaticResource InvertBoolConverter}}"/>

                    <!-- Party Line -->
                    <StackPanel x:Name="PartyLineUp" Grid.Column="1" VerticalAlignment="Top" Margin="0,245,0,0">
                        <Control x:Name="LTButton" Margin="-12,0,0,-200" StackPanel.ZIndex="1"  HorizontalAlignment="Left" DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='PartyManagement'}"
                                 Template="{StaticResource ControllerButton.ImageSwitcher}" Width="{StaticResource ScaledControllerHintSize}" Height="{StaticResource ScaledControllerHintSize}"/>

                        <ScrollViewer x:Name="PartyLineHolder" Margin="0 100 40 100" HorizontalAlignment="Left" VerticalScrollBarVisibility="Hidden" ls:ScrollViewerHelper.VerticalScrollOffsetMargin="50" ls:MoveFocus.FocusMovementMode="Closest">
                            <ItemsControl ItemsSource="{Binding Data.Players}" Template="{StaticResource MinimalItemsControlTemplate}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <ItemsControl x:Name="PartyLineItemControl" ItemsSource="{Binding PartyGroups}">
                                            <ItemsControl.Template>
                                                <ControlTemplate>
                                                    <ItemsPresenter/>
                                                </ControlTemplate>
                                            </ItemsControl.Template>
                                            <ItemsControl.ItemTemplate>
                                                <DataTemplate>
                                                    <ItemsControl x:Name="PortraitHolder" Margin="0,0,0,20" ItemsSource="{Binding}" Background="Transparent" BorderBrush="Transparent"
                                                                  ItemTemplate="{StaticResource CharacterLineLeft}">
                                                        <ItemsControl.Template>
                                                            <ControlTemplate>
                                                                <ItemsPresenter/>
                                                            </ControlTemplate>
                                                        </ItemsControl.Template>
                                                        <ItemsControl.ItemsPanel>
                                                            <ItemsPanelTemplate>
                                                                <StackPanel IsItemsHost="True" Orientation="Vertical"/>
                                                            </ItemsPanelTemplate>
                                                        </ItemsControl.ItemsPanel>
                                                    </ItemsControl>
                                                    <DataTemplate.Triggers>
                                                        <DataTrigger Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Right">
                                                            <Setter TargetName="PortraitHolder" Property="ItemTemplate" Value="{StaticResource CharacterLineRight}"/>
                                                        </DataTrigger>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding DataContext.CurrentPlayer.UIData.ActiveState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Dialogue"/>
                                                                <Condition Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Common"/>
                                                                <Condition Binding="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="2"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter TargetName="PortraitHolder" Property="ItemTemplate" Value="{StaticResource CharacterLineRight}"/>
                                                        </MultiDataTrigger>
                                                    </DataTemplate.Triggers>
                                                </DataTemplate>
                                            </ItemsControl.ItemTemplate>
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel Orientation="Vertical"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                        </ItemsControl>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </ScrollViewer>
                    </StackPanel>
                </Grid>
            </Grid>

            <!-- Solo Portrait when Party line is collapsed -->
            <Grid x:Name="ExtraDetails" Margin="40,0,0,40" HorizontalAlignment="Left" VerticalAlignment="Bottom" IsEnabled="False" ls:MoveFocus.Focusable="False" Opacity="0">
                <Grid.RenderTransform>
                    <TransformGroup>
                        <ScaleTransform ScaleX="{StaticResource CurrentScaleFactor}" ScaleY="{StaticResource CurrentScaleFactor}"/>
                        <SkewTransform/>
                        <RotateTransform/>
                        <TranslateTransform/>
                    </TransformGroup>
                </Grid.RenderTransform>

                <StackPanel Orientation="Vertical" VerticalAlignment="Bottom" >
                    <!-- Status Stack-->
                    <StackPanel x:Name="ExtraInfoStatusStack" VerticalAlignment="Bottom" DataContext="{Binding CurrentPlayer.SelectedCharacter}" HorizontalAlignment="Left"  Margin="-20,0,0,44">
                        <Grid x:Name="OverflowIndicator" Margin="6,0,0,0" Width="84" Height="84" VerticalAlignment="Center" HorizontalAlignment="Left" Visibility="{Binding StatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter={StaticResource MaxDisplayedStatuses}}">
                            <Ellipse Width="84" Height="84" VerticalAlignment="Center" HorizontalAlignment="Center" Fill="{StaticResource LS_PanelBackground}" />
                            <TextBlock x:Name="OverflowText" Style="{StaticResource TargetInfoTextStyle}"
                                   Margin="6,0,0,0" VerticalAlignment="Center" HorizontalAlignment="Center" />
                        </Grid>
                        <ItemsControl x:Name="ExtraInfoStatuses" ItemsSource="{Binding StatusEffects}" AlternationCount="{Binding StatusEffects.Count}" 
                                      ScrollViewer.HorizontalScrollBarVisibility="Disabled" ScrollViewer.VerticalScrollBarVisibility="Disabled"  ItemTemplate="{StaticResource NamedStatusTemplate}"
                                      Template="{StaticResource MinimalItemsControlTemplate}" >
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Vertical" VerticalAlignment="Bottom"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemContainerStyle>
                                <Style TargetType="ContentPresenter">
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Style.Triggers>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                                <Condition Binding="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource Self}, Converter={StaticResource LessThanConverter}, ConverterParameter={StaticResource MaxDisplayedStatusesLarge}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </MultiDataTrigger>
                                        
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                                                <Condition Binding="{Binding ActualHeight, ElementName=PartyLineUp, Converter={StaticResource LessThanConverter},  ConverterParameter=850}" Value="True" />
                                                <Condition Binding="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource Self}, Converter={StaticResource LessThanConverter}, ConverterParameter={StaticResource MaxDisplayedStatuses}}" Value="True" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" Value="Visible"/>

                                        </MultiDataTrigger>

                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                                                <Condition Binding="{Binding ActualHeight, ElementName=PartyLineUp, Converter={StaticResource GreaterThanConverter},  ConverterParameter=850}" Value="True" />
                                                <Condition Binding="{Binding ActualHeight, ElementName=PartyLineUp, Converter={StaticResource LessThanConverter},  ConverterParameter=1000}" Value="True" />

                                                <Condition Binding="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource Self}, Converter={StaticResource LessThanConverter}, ConverterParameter={StaticResource MaxDisplayedStatusesMedium}}" Value="True" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" Value="Visible"/>

                                        </MultiDataTrigger>

                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                                                <Condition Binding="{Binding ActualHeight, ElementName=PartyLineUp, Converter={StaticResource GreaterThanConverter},  ConverterParameter=1000}" Value="True" />
                                                <Condition Binding="{Binding ActualHeight, ElementName=PartyLineUp, Converter={StaticResource LessThanConverter},  ConverterParameter=1200}" Value="True" />
                                                <Condition Binding="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource Self}, Converter={StaticResource LessThanConverter}, ConverterParameter={StaticResource MaxDisplayedStatusesShort}}" Value="True" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" Value="Visible"/>

                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False"/>
                                                <Condition Binding="{Binding ActualHeight, ElementName=PartyLineUp, Converter={StaticResource GreaterThanConverter},  ConverterParameter=1200}" Value="True" />
                                                <Condition Binding="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource Self}, Converter={StaticResource LessThanConverter}, ConverterParameter={StaticResource MaxDisplayedStatusesVeryShort}}" Value="True" />
                                            </MultiDataTrigger.Conditions>
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </MultiDataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ItemsControl.ItemContainerStyle>
                        </ItemsControl>

                        <ContentPresenter x:Name="ConcentrationSection" Content="{Binding .}" ContentTemplate="{StaticResource DefaultConcentrationTemplate}" />

                    </StackPanel>

                    <!-- Portrait-->
                    <Grid>
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition Width="Auto"/>
                        </Grid.ColumnDefinitions>

                        <Grid Grid.Column="0" x:Name="ExtraPortrait" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="0,0,24,0">
                            <ContentControl x:Name="ExtraPortraitHolder" Content="{Binding CurrentPlayer.SelectedCharacter}" ContentTemplate="{StaticResource PortraitCore}" HorizontalAlignment="Center" VerticalAlignment="Center">
                                <ContentControl.Resources>
                                    <ImageSource x:Key="CollapsedFrame">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_summon_d.png</ImageSource>
                                    <ImageSource x:Key="CollapsedFrameHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_summon_h.png</ImageSource>
                                    <ImageSource x:Key="ExtendedFrame">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_d.png</ImageSource>
                                    <ImageSource x:Key="ExtendedFrameHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_h.png</ImageSource>

                                    <ImageSource x:Key="CollapsedFrameSelected">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_summon_active_d.png</ImageSource>
                                    <ImageSource x:Key="CollapsedFrameSelectedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_summon_active_h.png</ImageSource>
                                    <ImageSource x:Key="ExtendedFrameSelected">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_d.png</ImageSource>
                                    <ImageSource x:Key="ExtendedFrameSelectedHighlight">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_h.png</ImageSource>

                                    <ImageSource x:Key="CollapsedFrameRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_summon_d.png</ImageSource>
                                    <ImageSource x:Key="CollapsedFrameHighlightRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_summon_h.png</ImageSource>
                                    <ImageSource x:Key="ExtendedFrameRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_d.png</ImageSource>
                                    <ImageSource x:Key="ExtendedFrameHighlightRemote">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_h.png</ImageSource>

                                    <ImageSource x:Key="CollapsedFrameInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_d.png</ImageSource>
                                    <ImageSource x:Key="CollapsedFrameHighlightInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_h.png</ImageSource>
                                    <ImageSource x:Key="ExtendedFrameInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_d.png</ImageSource>
                                    <ImageSource x:Key="ExtendedFrameHighlightInTurn">pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_inTurn_h.png</ImageSource>
                                </ContentControl.Resources>
                            </ContentControl>

                            <Control x:Name="ExtraPortraitButton"  
                                     HorizontalAlignment="Left" VerticalAlignment="Top"
                                     DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='PartyManagement'}"
                                     Template="{StaticResource ControllerButton.ImageSwitcher}"
                                     Width="{StaticResource ScaledControllerHintSize}"
                                     Height="{StaticResource ScaledControllerHintSize}" 
                                     Margin="-52,-60,52,60"/>
                        </Grid>

                        <!-- Name and character info in the bottom left corner -->
                        <StackPanel x:Name="ExtraInfo" Grid.Column="1" VerticalAlignment="Bottom" Margin="0,-4,0,4">
                            <StackPanel x:Name="ExtraInfoNameSection" Orientation="Horizontal" Margin="0,-8,0,0">
                                <TextBlock x:Name="ExtraInfoName" Style="{StaticResource HUD.DefaultTextStyle}"  Foreground="{StaticResource LS_tint100}" FontWeight="SemiBold" 
                                           FontSize="{StaticResource ScaledBigFontSize}" Text="{Binding CurrentPlayer.SelectedCharacter.Name}"/>

                                <Grid x:Name="ExtraInfoLevelUp" Visibility="{Binding CurrentPlayer.SelectedCharacter.Stats.Level.LevelUpAvailable, Converter={StaticResource BoolToVisibleConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center"
                                      Width="{StaticResource LevelUpArrowAnimationFrameBigSize}" Height="{StaticResource LevelUpArrowAnimationFrameBigSize}" Margin="-10">
                                    <Image x:Name="ExtraInfoLevelUpIcon" Source="{StaticResource LevelUpArrow}" Stretch="Uniform" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                </Grid>
                            </StackPanel>

                            <TextBlock x:Name="ExtraInfoMisc" Style="{StaticResource HUD.DefaultTextStyle}" Foreground="{StaticResource LS_tint100}" FontWeight="Medium"
                                       FontSize="{StaticResource ScaledSmallishFontSize}" Margin="0,-16,0,0">
                                <Run>
                                    <Run.Text>
                                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                            <Binding Source="h5df00b79ga6acg4d9fgb8dag23340151fba7"/>
                                            <Binding Path="CurrentPlayer.SelectedCharacter.Stats.ClassList[0].Level.Value"/>
                                            <Binding Path="CurrentPlayer.SelectedCharacter.Stats.Race.DisplayName"/>
                                        </MultiBinding>
                                    </Run.Text>
                                </Run>
                                <Run Text="{Binding CurrentPlayer.SelectedCharacter.Stats.ClassList[0].ClassDisplayName}"/>
                            </TextBlock>
                        </StackPanel>
                    </Grid>
                </StackPanel>
            </Grid>

            <!-- Button prompts when the party line is active -->
            <StackPanel x:Name="ButtonHintsLeft" Opacity="1" Style="{StaticResource ButtonHint.Container.Left}">
                <ls:LSButton x:Name="ButtonSelect" VerticalAlignment="Center" Style="{StaticResource ControllerButton}" IsEnabled="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             DataContext = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
                             Content="{Binding Source='hd0c08193ga7f2g4a7eg8225g63748c7b3096',Converter={StaticResource TranslatedStringConverter}}"
                             Command="{Binding DataContext.HideCharacterSelectCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             CommandParameter="{Binding Path=FocusedElement.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" SoundID="UI_HUD_Controller_PartyMenu_CharacterConfirm"/>

                <ls:LSButton x:Name="ButtonListen" VerticalAlignment="Center" Style="{StaticResource ControllerButton}" IsEnabled="False" Visibility="Collapsed"
                             DataContext = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
                             Content="{Binding Source='he26c9a8cg0e0ag45b5ga6ddg6ddb00255b51',Converter={StaticResource TranslatedStringConverter}}"
                             Command="{Binding DataContext.ListenToDialog, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             CommandParameter="{Binding Path=FocusedElement.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="LSButtonPressed">
                            <b:InvokeCommandAction Command="{Binding DataContext.HideCharacterSelectCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                                   CommandParameter="{Binding Path=FocusedElement.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </ls:LSButton>

                <ls:LSButton VerticalAlignment="Center" x:Name="ToggleInfoButton" Style="{StaticResource ControllerButton}"
                             DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIShowInfo'}"
                             Command="{Binding DataContext.ToggleTooltipOnUIElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             CommandParameter="{Binding Path=FocusedElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             Content="{Binding Source='h2a8cab0cgbfb8g4890gbfbdg5a9426e29457', Converter={StaticResource TranslatedStringConverter}}"
                             BoundEvent="UIShowInfo" Visibility="Collapsed"/>

                <ls:LSButton VerticalAlignment="Center" x:Name="GroupingButton" Style="{StaticResource ControllerButton}"
                             DataContext ="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='GroupingSelect'}"
                             CommandParameter="{Binding Path=FocusedElement.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             Content="{Binding Source='h9c0daf6dg0ad3g4c45g937dgc5062a13e564',Converter={StaticResource TranslatedStringConverter}}"
                             Command="{Binding DataContext.CharacterToGroupSelectionCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             TapTime="{StaticResource DefaultButtonTapTime}" EatInput="False" SoundID="UI_HUD_Controller_PartyMenu_GroupConfirm"/>

                <ls:LSButton VerticalAlignment="Center" x:Name="GroupingSplitButton" Style="{StaticResource ControllerButton}"
                             DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='GroupingSplit'}"
                             Content="{Binding Source='h46143e25gdbbbg4220g9383g41525f01d0f2', Converter={StaticResource TranslatedStringConverter}}"
                             Command="{Binding DataContext.SeparateCharacterCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             CommandParameter="{Binding Path=FocusedElement.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             SoundID="UI_HUD_Controller_PartyMenu_GroupSplit" TapTime="{StaticResource DefaultButtonTapTime}" EatInput="False"/>

                <ls:LSButton VerticalAlignment="Center" x:Name="GroupingAllButton" Style="{StaticResource ControllerHoldButtonStyle}"
                             DataContext ="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='GroupingSelect'}"
                             Tag="{Binding Source='hb3756335gddeeg4f75g9561g039d94305206',Converter={StaticResource TranslatedStringConverter}}"
                             Command="{Binding DataContext.LinkAllSummonsCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             CommandParameter="{Binding Path=FocusedElement.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             Visibility="Collapsed" SoundID="UI_HUD_Controller_PartyMenu_GroupAll"/>

                <ls:LSButton VerticalAlignment="Center" x:Name="GroupingAllSplitButton" Style="{StaticResource ControllerHoldButtonStyle}"
                             DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='GroupingSplit'}"
                             Tag="{Binding Source='he8756948g1795g4047g8eb3g76956ccd07fb', Converter={StaticResource TranslatedStringConverter}}"
                             Command="{Binding DataContext.UnlinkAllSummonsCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             CommandParameter="{Binding Path=FocusedElement.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             Visibility="Collapsed" SoundID="UI_HUD_Controller_PartyMenu_SplitAll"/>

                <ls:LSButton VerticalAlignment="Center" x:Name="ConfirmGroupingButton" Style="{StaticResource ControllerButton}" Visibility="Collapsed"
                             DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='GroupingConfirm'}"
                             Content="{Binding Source='h23283673g4496g4648g9c41gadd37637d89c', Converter={StaticResource TranslatedStringConverter}}"
                             Command="{Binding DataContext.GroupCharactersCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             SoundID="UI_HUD_Controller_PartyMenu_GroupConfirm"/>

                <ls:LSInputBinding x:Name="InterruptsBinding" BoundEvent="UISort" PlayerId="{Binding CurrentPlayer.PlayerId}" IsEnabled="False"
                                   Command="{Binding CustomEvent}" CommandParameter="ToggleInterruptsPanel">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="LSInputBindingPressed">
                            <b:InvokeCommandAction Command="{Binding HideCharacterSelectCommand}" CommandParameter="{Binding Path=FocusedElement.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </ls:LSInputBinding>

                <ls:LSInputBinding x:Name="LevelUpBinding" Command="{Binding StartLevelUp}" CommandParameter="{Binding Path=FocusedElement.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                   PlayerId="{Binding CurrentPlayer.PlayerId}" BoundEvent="UITabNext" >
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="LSInputBindingPressed">
                            <b:InvokeCommandAction Command="{Binding HideCharacterSelectCommand}" CommandParameter="{Binding Path=FocusedElement.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </ls:LSInputBinding>

                <ls:LSButton VerticalAlignment="Center" x:Name="ButtonCancel" Style="{StaticResource ControllerButton}"
                             DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancel'}"
                             IsEnabled="{Binding DataContext.CurrentPlayer.UIData.IsCharacterSelectOpen, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             Content="{Binding Source='h01d5c470g61bfg498cgb17eg7be425444fa5', Converter={StaticResource TranslatedStringConverter}}"
                             Command="{Binding DataContext.HideCharacterSelectCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
            </StackPanel>
        </Grid>

        <DataTemplate.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Path=FocusedElement.DataContext.Interrupts.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.UIData.IsCharacterSelectOpen}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="InterruptsBinding" Property="IsEnabled" Value="True"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding IsVisible, ElementName=LevelUp}" Value="True">
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="IconBounce">
                        <BeginStoryboard.Storyboard>
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="LevelUpIcon" RepeatBehavior="Forever">
                                    <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame1}" Value="{StaticResource LevelUpArrowAnimationFrameSmallSize}"/>
                                    <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame2}" Value="{StaticResource LevelUpArrowAnimationFrameSmallSize}"/>
                                    <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame3}" Value="{StaticResource LevelUpArrowAnimationFrameBigSize}"/>
                                    <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame4}" Value="{StaticResource LevelUpArrowAnimationFrameSmallSize}"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="IconBounce"/>
                </DataTrigger.ExitActions>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsVisible, ElementName=ExtraInfoLevelUp}" Value="True">
                <DataTrigger.EnterActions>
                    <BeginStoryboard x:Name="ExtraInfoIconBounce">
                        <BeginStoryboard.Storyboard>
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Width" Storyboard.TargetName="ExtraInfoLevelUpIcon" RepeatBehavior="Forever">
                                    <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame1}" Value="{StaticResource LevelUpArrowAnimationFrameSmallSize}"/>
                                    <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame2}" Value="{StaticResource LevelUpArrowAnimationFrameSmallSize}"/>
                                    <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame3}" Value="{StaticResource LevelUpArrowAnimationFrameBigSize}"/>
                                    <EasingDoubleKeyFrame KeyTime="{StaticResource LevelUpArrowAnimationFrame4}" Value="{StaticResource LevelUpArrowAnimationFrameSmallSize}"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <StopStoryboard BeginStoryboardName="ExtraInfoIconBounce"/>
                </DataTrigger.ExitActions>
            </DataTrigger>

            <!--Enable "join conversation" button for mp character in dialog-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Value="False">
                        <Condition.Binding>
                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                <Binding Path="CurrentPlayer.UserId"/>
                                <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="FocusedElement.DataContext.OwnerUserID"/>
                            </MultiBinding>
                        </Condition.Binding>
                    </Condition>
                    <Condition Binding="{Binding Path=FocusedElement.DataContext.CharacterMode, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="InDialogue"/>
                    <Condition Binding="{Binding DataContext.CurrentPlayer.SelectedCharacter.InAutomatedDialogueCount, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0 }" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ButtonListen" Property="IsEnabled" Value="True"/>
                <Setter TargetName="ButtonListen" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ButtonSelect" Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding Path=CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InDialogue">
                <Setter TargetName="ButtonListen" Property="IsEnabled" Value="False"/>
            </DataTrigger>

            <DataTrigger Value="False">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource EqualConverter}">
                        <Binding Path="CurrentPlayer.UserId"/>
                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="FocusedElement.DataContext.OwnerUserID"/>
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="ButtonSelect" Property="IsEnabled" Value="False"/>
                <Setter TargetName="GroupingButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="GroupingSplitButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="GroupingAllButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="GroupingAllSplitButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="LevelUpBinding" Property="IsEnabled" Value="False"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding CurrentPlayer.AssignedCharacters.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="False">
                <Setter TargetName="GroupingButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="GroupingSplitButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="GroupingAllButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="GroupingAllSplitButton" Property="IsEnabled" Value="False"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=FocusedElement.DataContext.CharacterMode, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="InFTB">
                <Setter TargetName="GroupingButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="GroupingSplitButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="GroupingAllButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="GroupingAllSplitButton" Property="IsEnabled" Value="False"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=FocusedElement.DataContext.CharacterMode, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="InCombat">
                <Setter TargetName="GroupingButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="GroupingSplitButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="GroupingAllButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="GroupingAllSplitButton" Property="IsEnabled" Value="False"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=FocusedElement.DataContext.CharacterType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Summon">
                <Setter TargetName="GroupingButton" Property="Command" Value="{Binding LinkFollowerCommand}"/>
                <Setter TargetName="GroupingSplitButton" Property="Command" Value="{Binding UnlinkFollowerCommand}"/>
                <Setter TargetName="GroupingAllButton" Property="Visibility" Value="Visible"/>
                <Setter TargetName="GroupingAllSplitButton" Property="Visibility" Value="Visible"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding Path=FocusedElement.DataContext.CharacterType, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Follower">
                <Setter TargetName="GroupingButton" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="GroupingSplitButton" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding GroupingSelection.Count}" Value="0">
                <Setter TargetName="ConfirmGroupingButton" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding GroupingSelection.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                <Setter TargetName="GroupingSplitButton" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Layout}" Value="Right">
                <Setter TargetName="PartyLineHolder" Property="Margin" Value="35 100 0 100"/>
                <Setter TargetName="PartyLineHolder" Property="HorizontalAlignment" Value="Right"/>
                <Setter TargetName="Root" Property="HorizontalAlignment" Value="Right"/>
                <Setter TargetName="Root" Property="Margin" Value="0 300 0 0"/>
                <Setter TargetName="LTButton" Property="HorizontalAlignment" Value="Right"/>
                <Setter TargetName="LTButton" Property="Margin" Value="0 0 -12 -200"/>

                <Setter Property="Rectangle.Fill" TargetName="ScreenBg">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                            <GradientStop Color="Black" Offset="1"/>
                            <GradientStop Color="{StaticResource Trade.BackgroundTransparentColor}" Offset="0"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>


                <Setter TargetName="ButtonHintsLeft" Property="Style" Value="{StaticResource ButtonHint.Container.Right}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="Dialogue"/>
                    <Condition Binding="{Binding Layout}" Value="Common"/>
                    <Condition Binding="{Binding CurrentPlayer.PlayerId}" Value="2"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PartyLineHolder" Property="Margin" Value="35 100 0 100"/>
                <Setter TargetName="PartyLineHolder" Property="HorizontalAlignment" Value="Right"/>
                <Setter TargetName="Root" Property="HorizontalAlignment" Value="Right"/>
                <Setter TargetName="Root" Property="Margin" Value="0 300 0 0"/>
                <Setter TargetName="LTButton" Property="HorizontalAlignment" Value="Right"/>
                <Setter TargetName="LTButton" Property="Margin" Value="0 0 -12 -200"/>
                <Setter TargetName="ButtonHintsLeft" Property="Style" Value="{StaticResource ButtonHint.Container.Right}"/>

                <Setter Property="Rectangle.Fill" TargetName="ScreenBg">
                    <Setter.Value>
                        <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                            <GradientStop Color="Black" Offset="1"/>
                            <GradientStop Color="{StaticResource Trade.BackgroundTransparentColor}" Offset="0"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Layout}" Value="Left">
                <DataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource SlideOutLeft}"/>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard x:Name="LayoutChangeFromLeftToCommon" Storyboard="{StaticResource SlideOutCommon}"/>
                </DataTrigger.ExitActions>
                <Setter TargetName="Root" Property="Margin" Value="0 300 0 0"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="Dialogue"/>
                    <Condition Binding="{Binding Layout}" Value="Common"/>
                    <Condition Binding="{Binding Data.LocalPlayers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <StopStoryboard BeginStoryboardName="LayoutChangeFromLeftToCommon"/>
                </MultiDataTrigger.EnterActions>
                <Setter TargetName="Root" Property="Margin" Value="0 300 0 0"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding Layout}" Value="Right">
                <DataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource SlideOutRight}"/>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard x:Name="LayoutChangeFromRightToCommon" Storyboard="{StaticResource SlideOutCommon}"/>
                </DataTrigger.ExitActions>
                <Setter TargetName="Root" Property="Margin" Value="0 300 0 0"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="Dialogue"/>
                    <Condition Binding="{Binding Layout}" Value="Common"/>
                    <Condition Binding="{Binding CurrentPlayer.PlayerId}" Value="2"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <StopStoryboard BeginStoryboardName="LayoutChangeFromRightToCommon"/>
                </MultiDataTrigger.EnterActions>
                <Setter TargetName="Root" Property="Margin" Value="0 300 0 0"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding PartyLineInactive}" Value="True">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <BeginStoryboard.Storyboard>
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ExtraDetails">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <BeginStoryboard.Storyboard>
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ExtraDetails">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>

            <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="False">
                <DataTrigger.EnterActions>
                    <BeginStoryboard>
                        <BeginStoryboard.Storyboard>
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ExtraPortrait">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <ThicknessAnimation Duration="0:0:0.3" To="-170,0,170,0" Storyboard.TargetProperty="Margin" Storyboard.TargetName="ExtraInfo">
                                    <ThicknessAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseInOut"/>
                                    </ThicknessAnimation.EasingFunction>
                                </ThicknessAnimation>
                                <ThicknessAnimation Duration="0:0:0.3" To="-20,0,0,-80" Storyboard.TargetProperty="Margin" Storyboard.TargetName="ExtraInfoStatusStack">
                                    <ThicknessAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseInOut"/>
                                    </ThicknessAnimation.EasingFunction>
                                </ThicknessAnimation>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard>
                        <BeginStoryboard.Storyboard>
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ExtraPortrait">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                                <ThicknessAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="Margin" Storyboard.TargetName="ExtraInfo">
                                    <ThicknessAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseInOut"/>
                                    </ThicknessAnimation.EasingFunction>
                                </ThicknessAnimation>
                                <ThicknessAnimation Duration="0:0:0.3" To="-20,0,0,44" Storyboard.TargetProperty="Margin" Storyboard.TargetName="ExtraInfoStatusStack">
                                    <ThicknessAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseInOut"/>
                                    </ThicknessAnimation.EasingFunction>
                                </ThicknessAnimation>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </DataTrigger.ExitActions>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Layout}" Value="Right"/>
                    <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard>
                        <BeginStoryboard.Storyboard>
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ExtraPortrait">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                                <ThicknessAnimation Duration="0:0:0.3" To="170,0,-170,0" Storyboard.TargetProperty="Margin" Storyboard.TargetName="ExtraInfo">
                                    <ThicknessAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseInOut"/>
                                    </ThicknessAnimation.EasingFunction>
                                </ThicknessAnimation>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard>
                        <BeginStoryboard.Storyboard>
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ExtraPortrait">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                                <ThicknessAnimation Duration="0:0:0.3" To="0" Storyboard.TargetProperty="Margin" Storyboard.TargetName="ExtraInfo">
                                    <ThicknessAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseInOut"/>
                                    </ThicknessAnimation.EasingFunction>
                                </ThicknessAnimation>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>
            
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Layout}" Value="Right"/>
                    <Condition Binding="{Binding CurrentPlayer.UIData.AreRadialsOpen}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HideExtraInfoStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource ShowExtraInfoStoryboard}"/>
                </MultiDataTrigger.ExitActions>
                <Setter TargetName="ExtraInfo" Property="Opacity" Value="0" />
            </MultiDataTrigger>

            <MultiDataTrigger>
            <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding Layout}" Value="Left"/>
                <Condition Binding="{Binding CurrentPlayer.UIData.AreRadialsOpen}" Value="True"/>
                <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HideExtraInfoStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource ShowExtraInfoStoryboard}"/>
                </MultiDataTrigger.ExitActions>
                <Setter TargetName="ExtraInfo" Property="Opacity" Value="0" />
            </MultiDataTrigger>

            <!-- Hide Name and class in extra info when in split screen turn based mode -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Layout}" Value="Left"/>
                    <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HideExtraInfoStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource ShowExtraInfoStoryboard}"/>
                </MultiDataTrigger.ExitActions>
                <Setter TargetName="ExtraInfo" Property="Opacity" Value="0" />
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding Layout}" Value="Right"/>
                    <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource HideExtraInfoStoryboard}" />
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource ShowExtraInfoStoryboard}"/>
                </MultiDataTrigger.ExitActions>
                <Setter TargetName="ExtraInfo" Property="Opacity" Value="0" />
            </MultiDataTrigger>


            <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="True">
                <Setter TargetName="ExtraInfoLevelUp" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding PartyLineInactive}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard>
                        <BeginStoryboard.Storyboard>
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Root">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="0"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard>
                        <BeginStoryboard.Storyboard>
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Root">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding PartyLineInactive}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="CharacterPanel"/>
                    <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard>
                        <BeginStoryboard.Storyboard>
                            <Storyboard>
                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="Root">
                                    <EasingDoubleKeyFrame KeyTime="0:0:0.3" Value="1"/>
                                </DoubleAnimationUsingKeyFrames>
                            </Storyboard>
                        </BeginStoryboard.Storyboard>
                    </BeginStoryboard>
                </MultiDataTrigger.EnterActions>
            </MultiDataTrigger>


            <DataTrigger Binding="{Binding Layout}" Value="Left"> 
                <Setter TargetName="ExtraDetails" Property="Margin" Value="40,0,0,40"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="Dialogue"/>
                    <Condition Binding="{Binding Layout}" Value="Left"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ExtraDetails" Property="Margin" Value="40,0,0,40"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="Dialogue"/>
                    <Condition Binding="{Binding Layout}" Value="Common"/>
                    <Condition Binding="{Binding Data.LocalPlayers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ExtraDetails" Property="Margin" Value="40,0,0,40"/>
            </MultiDataTrigger>
            
            <DataTrigger Binding="{Binding Layout}" Value="Right">
                <Setter TargetName="ExtraDetails" Property="HorizontalAlignment" Value="Right"/>
                <Setter TargetName="ExtraDetails" Property="Margin" Value="0,0,40,40"/>
                <Setter TargetName="ExtraInfoStatusStack" Property="HorizontalAlignment" Value="Right"/>
                <Setter TargetName="ExtraInfoStatuses" Property="FlowDirection" Value="RightToLeft"/>
                <Setter TargetName="ExtraPortrait" Property="Grid.Column" Value="1"/>
                <Setter TargetName="ExtraPortrait" Property="Margin" Value="24,0,0,0"/>
                <Setter TargetName="ExtraPortraitButton" Property="HorizontalAlignment" Value="Right"/>
                <Setter TargetName="ExtraPortraitButton" Property="Margin" Value="52,-60,-52,60"/>
                <Setter TargetName="ExtraInfo" Property="Grid.Column" Value="0"/>
                <Setter TargetName="ExtraInfoNameSection" Property="FlowDirection" Value="RightToLeft"/>
                <Setter TargetName="ExtraInfoMisc" Property="TextAlignment" Value="Right"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="Dialogue"/>
                    <Condition Binding="{Binding Layout}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ExtraDetails" Property="Margin" Value="0,0,40,40"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="Dialogue"/>
                    <Condition Binding="{Binding Layout}" Value="Common"/>
                    <Condition Binding="{Binding CurrentPlayer.PlayerId}" Value="2"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ExtraDetails" Property="HorizontalAlignment" Value="Right"/>
                <Setter TargetName="ExtraDetails" Property="Margin" Value="0,0,40,40"/>
                <Setter TargetName="ExtraInfoStatusStack" Property="HorizontalAlignment" Value="Right"/>
                <Setter TargetName="ExtraInfoStatuses" Property="FlowDirection" Value="RightToLeft"/>
                <Setter TargetName="ExtraPortrait" Property="Grid.Column" Value="1"/>
                <Setter TargetName="ExtraPortrait" Property="Margin" Value="24,0,0,0"/>
                <Setter TargetName="ExtraPortraitButton" Property="HorizontalAlignment" Value="Right"/>
                <Setter TargetName="ExtraPortraitButton" Property="Margin" Value="52,-60,-52,60"/>
                <Setter TargetName="ExtraInfo" Property="Grid.Column" Value="0"/>
                <Setter TargetName="ExtraInfoNameSection" Property="FlowDirection" Value="RightToLeft"/>
                <Setter TargetName="ExtraInfoMisc" Property="TextAlignment" Value="Right"/>
            </MultiDataTrigger>

            <!--CHARACTER PANEL-->
            <DataTrigger Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="CharacterPanel">
                <Setter TargetName="ExtraInfo" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="ExtraInfoStatusStack" Property="Visibility" Value="Hidden"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="CharacterPanel"/>
                    <Condition Binding="{Binding Layout}" Value="Left"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitLeftStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="CharacterPanel"/>
                    <Condition Binding="{Binding Layout}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitRightStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>


            <!-- SHOWS PARTY LINE WHEN TRIGGER IS HELD IN SPLIT SCREEN ON LEFT-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding PartyLineInactive}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="CharacterPanel"/>
                    <Condition Binding="{Binding Layout}" Value="Left"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitLeftStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <!-- SHOWS PARTY LINE WHEN TRIGGER IS HELD IN SPLIT SCREEN ON RIGHT-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding PartyLineInactive}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="CharacterPanel"/>
                    <Condition Binding="{Binding Layout}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitRightStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="CharacterPanel"/>
                    <Condition Binding="{Binding Layout}" Value="Common"/>
                    <Condition Binding="{Binding Data.AspectRatio, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0.65}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitLeftStoryboard}"/>
                </MultiDataTrigger.ExitActions>
                <Setter TargetName="ExtraDetails" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <!-- HIDES AND SHOWS PARTY LINE WHEN TRIGGER IS HELD IN WHEN SCREEN IS SMALL ASPECT RATIO-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding PartyLineInactive}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="CharacterPanel"/>
                    <Condition Binding="{Binding Layout}" Value="Common"/>
                    <Condition Binding="{Binding Data.AspectRatio, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0.65}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitLeftStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <!--ALCHEMY PANEL-->
            <DataTrigger Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="AlchemyPanel">
                <Setter TargetName="ExtraInfo" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="ExtraInfoStatusStack" Property="Visibility" Value="Hidden"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="AlchemyPanel"/>
                    <Condition Binding="{Binding Layout}" Value="Left"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitLeftStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="AlchemyPanel"/>
                    <Condition Binding="{Binding Layout}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitRightStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <!-- SHOWS PARTY LINE WHEN TRIGGER IS HELD IN SPLIT SCREEN ON LEFT-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding PartyLineInactive}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="AlchemyPanel"/>
                    <Condition Binding="{Binding Layout}" Value="Left"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitLeftStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <!-- SHOWS PARTY LINE WHEN TRIGGER IS HELD IN SPLIT SCREEN ON RIGHT-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding PartyLineInactive}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="AlchemyPanel"/>
                    <Condition Binding="{Binding Layout}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitRightStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="AlchemyPanel"/>
                    <Condition Binding="{Binding Layout}" Value="Common"/>
                    <Condition Binding="{Binding Data.AspectRatio, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0.65}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitLeftStoryboard}"/>
                </MultiDataTrigger.ExitActions>
                <Setter TargetName="ExtraDetails" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <!-- HIDES AND SHOWS PARTY LINE WHEN TRIGGER IS HELD IN WHEN SCREEN IS SMALL ASPECT RATIO-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding PartyLineInactive}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="AlchemyPanel"/>
                    <Condition Binding="{Binding Layout}" Value="Common"/>
                    <Condition Binding="{Binding Data.AspectRatio, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0.65}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitLeftStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <!--SPELLBOOK-->
            <DataTrigger Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="SpellBook">
                <Setter TargetName="ExtraInfo" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="ExtraInfoStatusStack" Property="Visibility" Value="Hidden"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="SpellBook"/>
                    <Condition Binding="{Binding Layout}" Value="Left"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitLeftStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="SpellBook"/>
                    <Condition Binding="{Binding Layout}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitRightStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <!-- SHOWS PARTY LINE WHEN TRIGGER IS HELD IN SPLIT SCREEN ON LEFT-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding PartyLineInactive}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="SpellBook"/>
                    <Condition Binding="{Binding Layout}" Value="Left"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitLeftStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <!-- SHOWS PARTY LINE WHEN TRIGGER IS HELD IN SPLIT SCREEN ON RIGHT-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding PartyLineInactive}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="SpellBook"/>
                    <Condition Binding="{Binding Layout}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitRightStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="SpellBook"/>
                    <Condition Binding="{Binding Layout}" Value="Common"/>
                    <Condition Binding="{Binding Data.AspectRatio, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0.65}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitLeftStoryboard}"/>
                </MultiDataTrigger.ExitActions>
                <Setter TargetName="ExtraDetails" Property="Visibility" Value="Visible"/>
            </MultiDataTrigger>

            <!-- HIDES AND SHOWS PARTY LINE WHEN TRIGGER IS HELD IN WHEN SCREEN IS SMALL ASPECT RATIO-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding PartyLineInactive}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="SpellBook"/>
                    <Condition Binding="{Binding Layout}" Value="Common"/>
                    <Condition Binding="{Binding Data.AspectRatio, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0.65}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitLeftStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <!-- DIALOG/CINEMATIC -->
            <!-- Left placement situations (default one) -->
            <DataTrigger Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="Dialogue">
                <Setter TargetName="ExtraInfo" Property="Visibility" Value="Hidden"/>
                <Setter TargetName="ExtraInfoStatusStack" Property="Visibility" Value="Hidden"/>

                <Setter TargetName="ButtonListen" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ToggleInfoButton" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="GroupingButton" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="GroupingSplitButton" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="GroupingAllButton" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="GroupingAllSplitButton" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="InterruptsBinding" Property="IsEnabled" Value="False"/>
                <Setter TargetName="LevelUpBinding" Property="IsEnabled" Value="False"/>

                <DataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </DataTrigger.EnterActions>
                <DataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitLeftStoryboard}"/>
                </DataTrigger.ExitActions>
            </DataTrigger>

            <!-- Right placement situations -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="Dialogue"/>
                    <Condition Binding="{Binding Layout}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitRightStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="Dialogue"/>
                    <Condition Binding="{Binding Layout}" Value="Common"/>
                    <Condition Binding="{Binding CurrentPlayer.PlayerId}" Value="2"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
            </MultiDataTrigger>

            <!-- Show party line from the left on pressing the button -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding PartyLineInactive}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="Dialogue"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelExitLeftStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <!-- Show party line from the right on pressing the button -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding PartyLineInactive}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="Dialogue"/>
                    <Condition Binding="{Binding Layout}" Value="Right"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
                <MultiDataTrigger.ExitActions>
                    <BeginStoryboard x:Name="DialogueInactiveRightExit" Storyboard="{StaticResource CharacterPanelExitRightStoryboard}"/>
                </MultiDataTrigger.ExitActions>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding PartyLineInactive}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="Dialogue"/>
                    <Condition Binding="{Binding Layout}" Value="Common"/>
                    <Condition Binding="{Binding CurrentPlayer.PlayerId}" Value="2"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.EnterActions>
                    <BeginStoryboard Storyboard="{StaticResource CharacterPanelEntryStoryboard}"/>
                </MultiDataTrigger.EnterActions>
            </MultiDataTrigger>

            <!-- Do not use the whole screen on merged view -->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="Dialogue"/>
                    <Condition Binding="{Binding Layout}" Value="Common"/>
                    <Condition Binding="{Binding Data.LocalPlayers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.PlayerId}" Value="1"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ScreenBg" Property="Width" Value="{Binding ActualWidth, ElementName=PlayerPortraitsRoot, Converter={StaticResource MultiplierConverter}, ConverterParameter=0.5}"/>
                <Setter TargetName="ScreenBg" Property="HorizontalAlignment" Value="Left"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="Dialogue"/>
                    <Condition Binding="{Binding Layout}" Value="Common"/>
                    <Condition Binding="{Binding Data.LocalPlayers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                    <Condition Binding="{Binding CurrentPlayer.PlayerId}" Value="2"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="ScreenBg" Property="Width" Value="{Binding ActualWidth, ElementName=PlayerPortraitsRoot, Converter={StaticResource MultiplierConverter}, ConverterParameter=0.5}"/>
                <Setter TargetName="ScreenBg" Property="HorizontalAlignment" Value="Right"/>
            </MultiDataTrigger>


            <!--SHORTCUT MENU-->


            <DataTrigger Binding="{Binding CurrentPlayer.UIData.IsCharacterSelectOpen}" Value="True">
                <Setter TargetName="Bg" Property="Opacity" Value="1"/>
                <Setter TargetName="LeftEdge" Property="Opacity" Value="1"/>
                <Setter TargetName="RightEdge" Property="Opacity" Value="1"/>
                <Setter TargetName="ScreenBg" Property="Opacity" Value="1"/>
                <Setter TargetName="Bg" Property="Visibility" Value="Visible"/>
                <Setter TargetName="LeftEdge" Property="Visibility" Value="Visible"/>
                <Setter TargetName="RightEdge" Property="Visibility" Value="Visible"/>
                <Setter TargetName="ScreenBg" Property="Visibility" Value="Visible"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding CurrentPlayer.UIData.IsCharacterSelectOpen}" Value="False">
                <Setter TargetName="LevelUpBinding" Property="IsEnabled" Value="False"/>
                <Setter TargetName="ButtonHintsLeft" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="ButtonHintsLeft" Property="Opacity" Value="0"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=FocusedElement.DataContext.Stats.Level.LevelUpAvailable, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}" Value="False">
                <Setter TargetName="LevelUpBinding" Property="IsEnabled" Value="False"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=FocusedElement.DataContext.CharacterMode, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}" Value="InCombat">
                <Setter TargetName="LevelUpBinding" Property="IsEnabled" Value="False"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=FocusedElement.DataContext.DownedInfo.Active, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}" Value="True">
                <Setter TargetName="LevelUpBinding" Property="IsEnabled" Value="False"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding Path=FocusedElement.DataContext.Stats.IsAlive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}" Value="False">
                <Setter TargetName="LevelUpBinding" Property="IsEnabled" Value="False"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding CurrentPlayer.UIData.AllowInteraction}" Value="False">
                <Setter TargetName="LevelUpBinding" Property="IsEnabled" Value="False"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InDialogue">
                <Setter TargetName="PartyLineOpenerButton" Property="IsEnabled" Value="False"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InDialogue"/>
                    <Condition Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="Dialogue"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="PartyLineOpenerButton" Property="IsEnabled" Value="{Binding PartyLineInactive}"/>
            </MultiDataTrigger>

            <DataTrigger Binding="{Binding CurrentPlayer.UIData.CharacterCreationMode}" Value="Creation">
                <Setter TargetName="PlayerPortraitsRoot" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="PartyLineOpenerButton" Property="IsEnabled" Value="False"/>
                <Setter TargetName="PartyLineCloserButton" Property="IsEnabled" Value="False"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding HasInputEnabled, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="False">
                <Setter TargetName="ExtraPortraitButton" Property="Visibility" Value="Collapsed"/>
                <Setter TargetName="LTButton" Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <!-- Displaying the correct number of hidden statuses in the status stack-->
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter TargetName="OverflowText" Property="Text" Value="{Binding StatusEffects.Count, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource InverseMaxDisplayedStatusesLarge}, StringFormat={}+{0}}"/>
                <Setter TargetName="OverflowIndicator" Property="Visibility" Value="{Binding StatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter={StaticResource MaxDisplayedStatusesLarge}}"/>
            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="False"/>
                    <Condition Binding="{Binding ActualHeight, ElementName=PartyLineUp, Converter={StaticResource LessThanConverter}, ConverterParameter=850}" Value="True" />
                </MultiDataTrigger.Conditions>

                <Setter TargetName="OverflowText" Property="Text" Value="{Binding StatusEffects.Count, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource InverseMaxDisplayedStatuses}, StringFormat={}+{0}}"/>
                <Setter TargetName="OverflowIndicator" Property="Visibility" Value="{Binding StatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter={StaticResource MaxDisplayedStatuses}}"/>

            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="False"/>
                    <Condition Binding="{Binding ActualHeight, ElementName=PartyLineUp, Converter={StaticResource GreaterThanConverter},  ConverterParameter=850}" Value="True" />
                    <Condition Binding="{Binding ActualHeight, ElementName=PartyLineUp, Converter={StaticResource LessThanConverter},  ConverterParameter=1000}" Value="True" />
                </MultiDataTrigger.Conditions>

                <Setter TargetName="OverflowText" Property="Text" Value="{Binding StatusEffects.Count, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource InverseMaxDisplayedStatusesMedium}, StringFormat={}+{0}}"/>
                <Setter TargetName="OverflowIndicator" Property="Visibility" Value="{Binding StatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter={StaticResource MaxDisplayedStatusesMedium}}"/>

            </MultiDataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="False"/>
                    <Condition Binding="{Binding ActualHeight, ElementName=PartyLineUp, Converter={StaticResource GreaterThanConverter},  ConverterParameter=1000}" Value="True" />
                    <Condition Binding="{Binding ActualHeight, ElementName=PartyLineUp, Converter={StaticResource LessThanConverter},  ConverterParameter=1200}" Value="True" />
                </MultiDataTrigger.Conditions>

                <Setter TargetName="OverflowText" Property="Text" Value="{Binding StatusEffects.Count, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource InverseMaxDisplayedStatusesShort}, StringFormat={}+{0}}"/>
                <Setter TargetName="OverflowIndicator" Property="Visibility" Value="{Binding StatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter={StaticResource MaxDisplayedStatusesShort}}"/>

            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="False"/>
                    <Condition Binding="{Binding ActualHeight, ElementName=PartyLineUp, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1200}" Value="True" />
                </MultiDataTrigger.Conditions>

                <Setter TargetName="OverflowText" Property="Text" Value="{Binding StatusEffects.Count, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource InverseMaxDisplayedStatusesVeryShort}, StringFormat={}+{0}}"/>
                <Setter TargetName="OverflowIndicator" Property="Visibility" Value="{Binding StatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter={StaticResource MaxDisplayedStatusesVeryShort}}"/>
                
            </MultiDataTrigger>



        </DataTemplate.Triggers>
    </DataTemplate>
</ResourceDictionary>
