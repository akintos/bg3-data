<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			        xmlns:b="http://schemas.microsoft.com/xaml/behaviors"

					xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:System="clr-namespace:System;assembly=mscorlib"
                    xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
                    xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
					mc:Ignorable="d">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="OptionTemplates_Shared.xaml"/>
        <ResourceDictionary Source="NewOptionTemplates_c.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Thickness x:Key="SubOptionMargin">120,0,0,0</Thickness>

    <BitmapImage x:Key="CarouselBottomImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel_c/c_topNav_bar.png"/>

    <BitmapImage x:Key="SliderBackgroundContainerImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/c_scrollBarBG.png"/>
    <BitmapImage x:Key="SliderImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/c_scrollBar.png"/>
    <BitmapImage x:Key="ThumbImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Scrollbars/c_scrollerActive_horizontal.png"/>

    <SolidColorBrush x:Key="ValueTextColor" Color="{StaticResource accent100Color}"/>
    <SolidColorBrush x:Key="HLValueTextColor" Color="{StaticResource tint100}"/>

    <Style x:Key="LeftCarouselImage" TargetType="Image">
        <Setter Property="Source" Value="{StaticResource OptionArrow_d}"/>
        <Setter Property="Stretch" Value="None"/>
        <Setter Property="Visibility" Value="Hidden"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="RenderTransform">
            <Setter.Value>
                <ScaleTransform ScaleX="-1" CenterX="40"/>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="RightCarouselImage" TargetType="Image">
        <Setter Property="Source" Value="{StaticResource OptionArrow_d}"/>
        <Setter Property="Stretch" Value="None"/>
        <Setter Property="Visibility" Value="Hidden"/>
        <Setter Property="HorizontalAlignment" Value="Right"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <Style x:Key="SliderRepeatButtonStyle" TargetType="RepeatButton" BasedOn="{StaticResource {x:Type RepeatButton}}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="Focusable" Value="False"/>
    </Style>

    <Style x:Key="OptionSliderThumbStyle" TargetType="ls:LSThumb">
        <Style.Resources>
            <System:Double x:Key="MinWidthValue">40</System:Double>
            <System:Double x:Key="MinHeightValue">8</System:Double>
        </Style.Resources>

        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="SoundID" Value="UI_HUD_Shared_Slider_Thumb"/>
        <Setter Property="MinWidth" Value="{StaticResource MinWidthValue}"/>
        <Setter Property="MinHeight" Value="{StaticResource MinHeightValue}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ls:LSThumb">
                    <ls:LSNineSliceImage ImageSource="{StaticResource ThumbImage}" Slices="6,0" MinWidth="{StaticResource MinWidthValue}" MinHeight="{StaticResource MinHeightValue}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="DefaultSliderValueStyle" TargetType="TextBlock">
        <Setter Property="Text" Value="" />
        <Setter Property="Visibility" Value="Hidden" />
    </Style>

    <Style x:Key="FontSizeSliderValueStyle" BasedOn="{StaticResource FontSizeSliderValueSharedStyle}" TargetType="TextBlock">
        <Setter Property="Tag" Value="{Binding Value, Converter={StaticResource RoundConverter}}"/>
    </Style>

    <Style x:Key="OptionsSliderStyle" TargetType="ls:LSSlider">
        <Setter Property="StepSoundID" Value="UI_Controller_DefaultSlider"/>
    </Style>

    <Style x:Key="AutoRotateCameraSpeedSliderValueStyle" TargetType="TextBlock">
        <Setter Property="Visibility" Value="Visible"/>
        <!-- Default, 'Normal' case, less than 65, greater than 35 -->
        <Setter Property="Text" Value="{Binding Source='h6311cf93gc2fdg4dbbga861g2c7a44f394d8', Converter={StaticResource TranslatedStringConverter}}"/>

        <Style.Triggers>
            <!-- 'Slow' case: less than 35 -->
            <DataTrigger Binding="{Binding Value, Converter={StaticResource LessThanConverter}, ConverterParameter=35}" Value="True">
                <Setter Property="Text" Value="{Binding Source='hc71f7bb4g5029g4e4bg9de5g637a4a3e34f7', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <!-- 'Fast' case: more than 65 -->
            <DataTrigger Binding="{Binding Value, Converter={StaticResource GreaterThanConverter}, ConverterParameter=65}" Value="True">
                <Setter Property="Text" Value="{Binding Source='h51157197gd1b8g414bga9b8gd205000c0415', Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <ControlTemplate x:Key="OptionsSliderTemplate" TargetType="ls:LSSlider">
        <ControlTemplate.Resources>
            <System:Double x:Key="SliderHeight">8</System:Double>
            <System:Double x:Key="SliderWidth">460</System:Double>
        </ControlTemplate.Resources>

        <Grid HorizontalAlignment="Center" Width="640">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <Image Grid.Column="1" Source="{StaticResource SliderBackgroundContainerImage}" SnapsToDevicePixels="True" Stretch="Fill" Width="{StaticResource SliderWidth}" Height="{StaticResource SliderHeight}" VerticalAlignment="Bottom" HorizontalAlignment="Center"/>
            <ls:LSNineSliceImage Grid.Column="1" ImageSource="{StaticResource SliderImage}" Slices="3,2" Width="{StaticResource SliderWidth}" Height="{StaticResource SliderHeight}" VerticalAlignment="Bottom" HorizontalAlignment="Center"/>

            <ls:LSRepeatButton x:Name="PART_IncreaseRepeatButton" Grid.Column="2" Style="{StaticResource SliderRepeatButtonStyle}" HorizontalAlignment="Right" Command="Slider.IncreaseLarge" Visibility="Hidden">
                <ls:LSRepeatButton.Content>
                    <Image Stretch="None" Source="{StaticResource OptionArrow_d}"/>
                </ls:LSRepeatButton.Content>
            </ls:LSRepeatButton>

            <ls:LSRepeatButton x:Name="PART_DecreaseRepeatButton" Grid.Column="0" Style="{StaticResource SliderRepeatButtonStyle}" HorizontalAlignment="Left" Command="Slider.DecreaseLarge" Visibility="Hidden">
                <ls:LSRepeatButton.Content>
                    <Image Stretch="None" Source="{StaticResource OptionArrow_d}">
                        <Image.RenderTransform>
                            <ScaleTransform ScaleX="-1" CenterX="40"/>
                        </Image.RenderTransform>
                    </Image>
                </ls:LSRepeatButton.Content>
            </ls:LSRepeatButton>
            <ls:LSRepeatButton Visibility="Collapsed"
                               Command="Slider.DecreaseSmall" 
                               Focusable="False"
                               BoundEvent="UILeft"/>
            <ls:LSRepeatButton Visibility="Collapsed"
                               Command="Slider.IncreaseSmall"
                               Focusable="False"
                               BoundEvent="UIRight"/>

            <TextBlock x:Name="SelectedOptionText" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Center" TextAlignment="Center"
                       Text="{Binding Value, Converter={StaticResource RoundDownConverter}}"  
                       Foreground="{StaticResource ValueTextColor}" FontSize="{StaticResource ScaledDefaultFontSize}"
                       Visibility="{Binding ShowValue, Converter={StaticResource BoolToVisibleConverter}}"
                       IsHitTestVisible="False"/>

            <Track Name="PART_Track" Grid.Column="1" VerticalAlignment="Bottom" Height="{StaticResource SliderHeight}">
                <Track.Thumb>
                    <ls:LSThumb Style="{StaticResource OptionSliderThumbStyle}">
                        <ls:LSThumb.Width>
                            <MultiBinding Converter="{StaticResource DivideMultiConverter}">
                                <Binding Path="ActualWidth" ElementName="PART_Track"/>
                                <Binding Path="Max"/>
                            </MultiBinding>
                        </ls:LSThumb.Width>
                    </ls:LSThumb>
                </Track.Thumb>
            </Track>
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Enabled}" Value="False">
                <Setter Property="Opacity" Value="{DynamicResource DisabledOpacity}" />
            </DataTrigger>

            <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                <Setter TargetName="PART_DecreaseRepeatButton" Property="Visibility" Value="Visible"/>
                <Setter TargetName="PART_IncreaseRepeatButton" Property="Visibility" Value="Visible"/>
                <Setter TargetName="SelectedOptionText" Property="Foreground" Value="{StaticResource HLValueTextColor}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="CalibrationSliderThumbStyle" TargetType="ls:LSThumb">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="SoundID" Value="UI_HUD_Shared_Slider_Thumb"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Thumb">
                    <ControlTemplate.Resources>
                        <BitmapImage x:Key="ThumbImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_hudNav_d.png"/>
                        <BitmapImage x:Key="IcoImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/ico_scrubber_d.png"/>
                    </ControlTemplate.Resources>
                    <Grid>
                        <Image x:Name="img" Source="{StaticResource ThumbImage}" Stretch="None"/>
                        <Image x:Name="ico" Source="{StaticResource IcoImage}" Stretch="None"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="CalibrationSliderTemplate" TargetType="Slider">
        <ControlTemplate.Resources>
            <BitmapImage x:Key="CarouselImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_carousel_arrow.png"/>
            <BitmapImage x:Key="SliderImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/input_slider_d.png"/>
        </ControlTemplate.Resources>
        <Grid HorizontalAlignment="Center" Width="660">
            <Image HorizontalAlignment="Center" VerticalAlignment="Center" Source="{StaticResource SliderImage}" Stretch="None" />

            <ls:LSRepeatButton x:Name="PART_IncreaseRepeatButton" Style="{StaticResource SliderRepeatButtonStyle}" HorizontalAlignment="Right" Command="Slider.IncreaseLarge" BoundEvent="PanelSelect">
                <ls:LSRepeatButton.Content>
                    <Image Stretch="None" Source="{StaticResource CarouselImage}"/>
                </ls:LSRepeatButton.Content>
            </ls:LSRepeatButton>

            <ls:LSRepeatButton x:Name="PART_DecreaseRepeatButton" Style="{StaticResource SliderRepeatButtonStyle}" HorizontalAlignment="Left" Command="Slider.DecreaseLarge" BoundEvent="PartyManagement">
                <ls:LSRepeatButton.Content>
                    <Image Stretch="None" Source="{StaticResource CarouselImage}">
                        <Image.RenderTransform>
                            <ScaleTransform ScaleX="-1" CenterX="40"/>
                        </Image.RenderTransform>
                    </Image>
                </ls:LSRepeatButton.Content>
            </ls:LSRepeatButton>
            <ls:LSRepeatButton x:Name="LeftBtn"
                               Visibility="Collapsed"
                               Command="Slider.DecreaseSmall" 
                               Focusable="False"
                               IsEnabled="False"
                               BoundEvent="UILeft"/>
            <ls:LSRepeatButton x:Name="RightBtn"
                               Visibility="Collapsed"
                               Command="Slider.IncreaseSmall"
                               Focusable="False"
                               IsEnabled="False"
                               BoundEvent="UIRight"/>

            <Track Name="PART_Track" 
                               HorizontalAlignment="Stretch" VerticalAlignment="Center" Margin="80,0"
                               Height="{TemplateBinding Height}">
                <Track.Thumb>
                    <ls:LSThumb Style="{StaticResource CalibrationSliderThumbStyle}" />
                </Track.Thumb>
            </Track>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Self}}" Value="True">
                <Setter TargetName="LeftBtn" Property="IsEnabled" Value="True" />
                <Setter TargetName="RightBtn" Property="IsEnabled" Value="True" />
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="OptionsComboBoxStyle" TargetType="{x:Type ls:LSComboBox}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource ComboBoxItem}"/>
        <Setter Property="UseIndexSelection" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ls:LSComboBox}">
                    <Grid Height="80">
                        <ToggleButton Focusable="False" IsEnabled="{TemplateBinding IsEnabled}"
                                      Content="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:LSComboBox}}, Path=Text}" 
                                      IsChecked="{Binding Path=IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="ToggleButton">
                                    <StackPanel Orientation="Horizontal">
                                        <Image x:Name="prevImg" Style="{StaticResource LeftCarouselImage}"/>
                                        <TextBlock x:Name="SelectedOptionText" VerticalAlignment="Center" HorizontalAlignment="Center" Width="500" TextAlignment="Center"
                                                   Text="{TemplateBinding Content}"  
                                                   Foreground="{StaticResource ValueTextColor}" FontSize="{StaticResource ScaledDefaultFontSize}"
                                                   IsHitTestVisible="False"/>
                                        <Image x:Name="nextImg" Style="{StaticResource RightCarouselImage}"/>
                                    </StackPanel>

                                    <ControlTemplate.Triggers>
                                        <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                                            <Setter TargetName="prevImg" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="nextImg" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="SelectedOptionText" Property="Foreground" Value="{StaticResource HLValueTextColor}"/>
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </ToggleButton.Template>
                        </ToggleButton>
                        <ListBox x:Name="RectList" ItemsSource="{Binding ItemsSource, RelativeSource={RelativeSource TemplatedParent}}" 
                                 SelectedIndex="{Binding SelectedIndex, RelativeSource={RelativeSource TemplatedParent}}" 
                                 VerticalAlignment="Bottom" HorizontalAlignment="Center" Focusable="False" MaxWidth="550">
                            <ListBox.Template>
                                <ControlTemplate>
                                    <ItemsPresenter/>
                                </ControlTemplate>
                            </ListBox.Template>
                            <ListBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <WrapPanel Orientation="Horizontal"/>
                                </ItemsPanelTemplate>
                            </ListBox.ItemsPanel>
                            <ListBox.ItemTemplate>
                                <DataTemplate>
                                    <Rectangle x:Name="rect" Height="4" StrokeThickness="0" Fill="Gray" Opacity="0.75" Margin="8,0" VerticalAlignment="Center">
                                        <Rectangle.Width>
                                            <MultiBinding Converter="{StaticResource DivideMultiConverter}">
                                                <Binding Source="420"/>
                                                <Binding RelativeSource="{RelativeSource AncestorType={x:Type ListBox}}" Path="ItemsSource.Count"/>
                                            </MultiBinding>
                                        </Rectangle.Width>
                                    </Rectangle>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="True">
                                            <Setter TargetName="rect" Property="Opacity" Value="1"/>
                                            <Setter TargetName="rect" Property="Height" Value="6"/>
                                            <Setter TargetName="rect" Property="Width">
                                                <Setter.Value>
                                                    <MultiBinding Converter="{StaticResource DivideMultiConverter}">
                                                        <Binding Source="460"/>
                                                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type ListBox}}" Path="ItemsSource.Count"/>
                                                    </MultiBinding>
                                                </Setter.Value>
                                            </Setter>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                    <Setter Property="Focusable" Value="False"/>
                                    <Style.Triggers>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Background" Value="Transparent" />
                                            <Setter Property="BorderBrush" Value="Transparent" />
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </ListBox.ItemContainerStyle>
                        </ListBox>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding ItemsSource.Count, ElementName=RectList, Converter={StaticResource GreaterThanConverter}, ConverterParameter=10}" Value="True" >
                            <Setter TargetName="RectList" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Enabled}" Value="False">
                <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="TickBoxStyle" TargetType="{x:Type ls:LSTickBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ls:LSTickBox">
                    <Grid>
                    <StackPanel Orientation="Horizontal">
                        <Image x:Name="prevImg" Style="{StaticResource LeftCarouselImage}"/>
                        <TextBlock x:Name="text" VerticalAlignment="Center" HorizontalAlignment="Center" Width="500" TextAlignment="Center"
                                   Text="{Binding Source='h17adc2cag3b1ag4711ga651g7d123440625c', Converter={StaticResource TranslatedStringConverter}}" 
                                   Foreground="{StaticResource LS_accent100TxtColor}" FontSize="{StaticResource ScaledDefaultFontSize}"
                                   IsHitTestVisible="False"/>
                        <Image x:Name="nextImg" Style="{StaticResource RightCarouselImage}"/>
                    </StackPanel>
                        <StackPanel Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Center">
                            <Rectangle x:Name="offRect" Height="6" StrokeThickness="0" Fill="Gray" Width="230" Opacity="1" Margin="8,0" VerticalAlignment="Center"/>
                            <Rectangle x:Name="onRect" Height="4" StrokeThickness="0" Fill="Gray" Width="210" Opacity="0.75" Margin="8,0" VerticalAlignment="Center"/>
                        </StackPanel>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="text" Property="Text" Value="{Binding Source='hc358d80cga01ag4497gafd6gf7e066081f3e', Converter={StaticResource TranslatedStringConverter}}"/>
                            <Setter TargetName="offRect" Property="Opacity" Value="0.75"/>
                            <Setter TargetName="offRect" Property="Height" Value="4"/>
                            <Setter TargetName="offRect" Property="Width" Value ="210"/>
                            <Setter TargetName="onRect" Property="Opacity" Value="1"/>
                            <Setter TargetName="onRect" Property="Height" Value="6"/>
                            <Setter TargetName="onRect" Property="Width" Value ="230"/>
                        </Trigger>

                        <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource TemplatedParent}}" Value="True">
                            <Setter TargetName="prevImg" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="nextImg" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="text" Property="Foreground" Value="{StaticResource LS_tint100}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <ControlTemplate x:Key="ComboBoxTemplate">
        <ls:LSComboBox x:Name="comboBox" ItemsSource="{Binding ComboItems}" SelectedItem="{Binding SelectedItem}"
                       Style="{StaticResource OptionsComboBoxStyle}" Text="{Binding SelectedItem.Name, Mode=OneWay}" 
                       IsEnabled="{Binding Enabled}" Focusable="False" SoundID="UI_HUD_Options_ComboBox"
                       ActionNextEvent="UIRight" ActionPrevEvent="UILeft"/>
    </ControlTemplate>

    <ControlTemplate x:Key="TickBoxTemplate">
        <ls:LSTickBox Style="{StaticResource TickBoxStyle}" IsChecked="{Binding Value}"
                      Command="{Binding DataContext.OnChangeToggleButton, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"  
                      IsEnabled="{Binding Enabled}" Focusable="False" SoundID="UI_HUD_Options_ToggleButton"
                      ActionNextEvent="UIRight" ActionPrevEvent="UILeft"/>
    </ControlTemplate>
    
    <ControlTemplate x:Key="SliderTemplate">
        <ls:LSSlider DataContext="{Binding}"
                Style="{StaticResource OptionsSliderStyle}"
                Template="{StaticResource OptionsSliderTemplate}"
                Value="{Binding Value}" 
                Minimum="{Binding Min}" 
                Maximum="{Binding Max}" 
                IsSnapToTickEnabled="False" 
                SmallChange="1" 
                LargeChange="{Binding Max, Converter={StaticResource DivideAndRoundConverter}, ConverterParameter='10'}" 
                IsEnabled="{Binding Enabled}"
                Focusable="False"/>
    </ControlTemplate>

    <ControlTemplate x:Key="EditBoxTemplate">
        <ls:LSTextBox Text="{Binding Value}"
                      IsEnabled="True"
                      MaxLength="{Binding MaxLength}"
                      TextImmediateSourceUpdate="True"
                      Foreground="{StaticResource ValueTextColor}"
                      FontSize="{StaticResource DefaultFontSize}"
                      TextAlignment="Center"
                      Width="540"/>
    </ControlTemplate>

    <ControlTemplate x:Key="PasswordBoxTemplate">
        <ls:LSPasswordBox Text="{Binding Value}"
                          IsEnabled="True"
                          Focusable="False"
                          MaxLength="{Binding MaxLength}"
                          Foreground="{StaticResource ValueTextColor}"
                          FontSize="{StaticResource DefaultFontSize}"
                          Width="540"/>
    </ControlTemplate>


    <ControlTemplate x:Key="ButtonTemplate">
        <ls:LSButton x:Name="ButtonElement"
                     ContentTemplate="{StaticResource ControllerButtonHint}"
                     Content="{Binding DataContext.CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept', RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                     Tag=" "
                     Command="{Binding ButtonCommand.ActionCommand}"
                     BoundEvent="UIAccept"
                     IsEnabled="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:LSListBoxItem}}, Path=(ls:MoveFocus.IsFocused)}"/>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding Enabled}" Value="False">
                <Setter TargetName="ButtonElement" Property="IsEnabled" Value="False"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <DataTemplate x:Key="OptionTemplate">
        <Grid x:Name="Container" Margin="0,8" Height="104" Width="1920">
            <Grid.ColumnDefinitions>
                <ColumnDefinition x:Name="LabelColumn" Width="*"/>
                <ColumnDefinition x:Name="ContentColumn" Width="800"/>
            </Grid.ColumnDefinitions>

            <Image Grid.Column="0" Grid.ColumnSpan="2" x:Name="Box" Source="{StaticResource ListButtonBg}" Stretch="Fill"/>

            <TextBlock x:Name="label"
                       Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Left"
                       Text="{Binding Text}" 
                       FontSize="{StaticResource ScaledDefaultFontSize}" 
                       Foreground="{StaticResource LS_accent75TxtColor}"
                       TextWrapping="Wrap"
                       Margin="60,0,0,0"/>

            <TextBlock x:Name="PART_ValueLabel" Grid.Column="1" VerticalAlignment="Center" HorizontalAlignment="Right" TextAlignment="Center"
                       FontSize="{StaticResource ScaledDefaultFontSize}"
                       Style="{StaticResource DefaultSliderValueStyle}"
                       Width="640" Margin="0,0,40,0"
                       Foreground="{StaticResource ValueTextColor}" />

            <Control Grid.Column="1" x:Name="content" IsEnabled="False"
                     VerticalAlignment="Center" HorizontalAlignment="Right" Focusable="False"
                     Template="{StaticResource ComboBoxTemplate}" Margin="0,0,40,0"/>

            <Control x:Name="Frame" Grid.Column="0" Grid.ColumnSpan="2" Visibility="Hidden" Style="{StaticResource FocusableBorderStyle}" />
        </Grid>

        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding ListItemType}" Value="TickBox">
                <Setter Property="Template" Value="{StaticResource TickBoxTemplate}" TargetName="content"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ListItemType}" Value="Slider">
                <Setter Property="Template" Value="{StaticResource SliderTemplate}" TargetName="content"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ListItemType}" Value="EditBox" />
                    <Condition Binding="{Binding HideValue}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource EditBoxTemplate}" TargetName="content"/>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding ListItemType}" Value="EditBox" />
                    <Condition Binding="{Binding HideValue}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <Setter Property="Template" Value="{StaticResource PasswordBoxTemplate}" TargetName="content"/>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding ListItemType}" Value="Button">
                <Setter Property="Template" Value="{StaticResource ButtonTemplate}" TargetName="content"/>
                <Setter Property="Margin" Value="0,-8,0,-8" TargetName="content"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ls:UIWidget}}, Path=ContextName}" Value="LobbyBrowser">
                <Setter Property="Width" TargetName="LabelColumn" Value="450"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ls:UIWidget}}, Path=ContextName}" Value="Lobby">
                <Setter Property="Width" TargetName="LabelColumn" Value="450"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding OptionType}" Value="POINT_AND_CLICK_FREQUENCY">
                <Setter Property="Style" Value="{StaticResource PointNClickSliderValueSharedStyle}" TargetName="PART_ValueLabel"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding OptionType}" Value="DIALOG_FONT_SIZE">
                <Setter Property="Style" Value="{StaticResource FontSizeSliderValueStyle}" TargetName="PART_ValueLabel"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding OptionType}" Value="OVERHEAD_FONT_SIZE">
                <Setter Property="Style" Value="{StaticResource FontSizeSliderValueStyle}" TargetName="PART_ValueLabel"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding OptionType}" Value="GAME_CAMERA_AUTO_ROTATION_SPEED">
                <Setter Property="Style" Value="{StaticResource AutoRotateCameraSpeedSliderValueStyle}" TargetName="PART_ValueLabel"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding OptionType}" Value="UIScaling">
                <Setter Property="Style" Value="{StaticResource FontSizeSliderValueStyle}" TargetName="PART_ValueLabel"/>
                <Setter Property="Text" Value="{Binding Value, Converter={StaticResource EnumTranslatedStringConverter}, ConverterParameter='h2e12e1f7g7318g4704ga3efgf4121ab0027a'}" TargetName="PART_ValueLabel"/>
            </DataTrigger>

            <!-- Sub elements list -->
            <DataTrigger Binding="{Binding OptionType}" Value="AUTO_SAVES">
                <Setter Property="Margin" Value="{StaticResource SubOptionMargin}" TargetName="label"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding OptionType}" Value="PANNING_SPEED">
                <Setter Property="Margin" Value="{StaticResource SubOptionMargin}" TargetName="label"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding OptionType}" Value="FRAME_CAP">
                <Setter Property="Margin" Value="{StaticResource SubOptionMargin}" TargetName="label"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding OptionType}" Value="SHARPNESS_VALUE">
                <Setter Property="Margin" Value="{StaticResource SubOptionMargin}" TargetName="label"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding OptionType}" Value="SHOW_SPEAKER">
                <Setter Property="Margin" Value="{StaticResource SubOptionMargin}" TargetName="label"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding OptionType}" Value="TEXT_BACKGROUND_OPACITY">
                <Setter Property="Margin" Value="{StaticResource SubOptionMargin}" TargetName="label"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding OptionType}" Value="GAME_CAMERA_AUTO_ROTATION_SPEED">
                <Setter Property="Margin" Value="{StaticResource SubOptionMargin}" TargetName="label"/>
            </DataTrigger>

            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                <Setter TargetName="Box" Property="Source" Value="{StaticResource ListButtonBg_h}"/>
                <Setter TargetName="content" Property="IsEnabled" Value="True"/>
                <Setter TargetName="Frame" Property="Visibility" Value="Visible"/>
                <Setter TargetName="label" Property="Foreground" Value="{StaticResource LS_tint100}"/>
            </Trigger>

            <DataTrigger Binding="{Binding Enabled}" Value="False">
                <Setter TargetName="Box" Property="Opacity" Value="{StaticResource DisabledOpacity}" />
                <Setter TargetName="label" Property="Opacity" Value="{StaticResource DisabledOpacity}" />
                <Setter TargetName="content" Property="Opacity" Value="{StaticResource DisabledOpacity}" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="KeybindingTemplate">
        <Grid Margin="0,4,0,4">
            <Grid.Resources>
	            <Style TargetType="{x:Type ls:LSButton}" BasedOn="{StaticResource BaseButtonStyle}">
                    <Setter Property="FontSize" Value="{StaticResource ScaledBigFontSize}"/>
		            <Setter Property="ls:ButtonHelper.ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/inputBox_keybinds_1.png"/>
		            <Style.Triggers>
			            <Trigger Property="IsMouseOver" Value="True">
				            <Setter Property="ls:ButtonHelper.ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/inputBox_keybinds_1_active.png" />
			            </Trigger>
			            <Trigger Property="IsPressed" Value="True">
				            <Setter Property="ls:ButtonHelper.ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/inputBox_keybinds_1_active.png"/>
			            </Trigger>
			            <Trigger Property="IsEnabled" Value="False">
				            <Setter Property="ls:ButtonHelper.ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/inputBox_keybinds_1_active.png" />
			            </Trigger>
		            </Style.Triggers>
	            </Style>
            </Grid.Resources>
            <Image Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/entryFrame_wide.png"/>
            <Image x:Name="highlight" Stretch="None" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/selector_wide.png" Visibility="Hidden"/>
            <TextBlock VerticalAlignment="Center" HorizontalAlignment="Left" Margin="160,0,0,0" Text="{Binding Text}"
                       FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource LS_PrimaryColor}"/>
            <ItemsControl VerticalAlignment="Center" HorizontalAlignment="Right" Margin="0,0,160,0" ItemsSource="{Binding Bindings}" 
                      Background="Transparent" BorderBrush="Transparent" 
                      ScrollViewer.HorizontalScrollBarVisibility="Disabled" >

                <ItemsControl.ItemsPanel>
                    <ItemsPanelTemplate>
                        <VirtualizingStackPanel IsItemsHost="True" Orientation="Horizontal"/>
                    </ItemsPanelTemplate>
                </ItemsControl.ItemsPanel>
                <ItemsControl.ItemTemplate>
                    <DataTemplate>
                        <ls:LSButton Content="{Binding BindingString}" 
                                     Command="{Binding DataContext.RequestKeybindingChange, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                                     CommandParameter="{Binding}"/>
                    </DataTemplate>
                </ItemsControl.ItemTemplate>

            </ItemsControl>
        </Grid>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}}, Path=IsSelected}" Value="True">
                <Setter Property="Visibility" TargetName="highlight" Value="Visible"/>
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="OptionButton">
        <StackPanel Orientation="Horizontal">
            <ls:LSButton Style="{StaticResource ControllerButton}" Content="" Focusable="False"
                         DataContext="{Binding DataContext.CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIMessageBoxX', RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                         Command="{Binding DataContext.ButtonCommand.ActionCommand, RelativeSource={RelativeSource AncestorType={x:Type ListBoxItem}}}"
                         Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:LSListBoxItem}}, Path=(ls:MoveFocus.IsFocused), Converter={StaticResource BoolToVisibleConverter}, ConverterParameter=True}"
                         IsEnabled="{Binding RelativeSource={RelativeSource AncestorType={x:Type ls:LSListBoxItem}}, Path=(ls:MoveFocus.IsFocused), Converter={StaticResource BoolToVisibleConverter}, ConverterParameter=True}"/>
            <TextBlock Text="{Binding Text}" Margin="0,8" VerticalAlignment="Center" FontSize="{StaticResource ScaledMediumFontSize}" Foreground="{StaticResource LS_tint100}"/>
        </StackPanel>
    </DataTemplate>

    <DataTemplate x:Key="OptionTitle">
        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" TextAlignment="Center"
                   Margin="0,40,0,20"
                   Text="{Binding Text}" 
                   FontSize="{StaticResource ScaledDefaultFontSize}"
                   Foreground="{StaticResource LS_baseTxtColor}"
                   FontWeight="DemiBold"/>
    </DataTemplate>

    <!-- Options -->
    <Style x:Key="OptionStyle" TargetType="ContentPresenter">
        <Setter Property="ContentTemplate" Value="{StaticResource OptionTemplate}" />
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Focusable" Value="True"/>
        <Setter Property="ls:MoveFocus.Focusable" Value="True"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ListItemType}" Value="Keybinding">
                <Setter Property="ContentTemplate" Value="{StaticResource KeybindingTemplate}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ListItemType}" Value="String">
                <Setter Property="ContentTemplate" Value="{StaticResource OptionTitle}"/>
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="Margin" Value="0,8"/>
                <!-- The titles are not selectable, so they are disabled to skip the selection.-->
                <Setter Property="IsEnabled" Value="False"/>
                <Setter Property="Focusable" Value="False"/>
                <Setter Property="ls:MoveFocus.Focusable" Value="False"/>
            </DataTrigger>

            <!-- Controller doesn't have tooltip pinning yet so we hide the option and force the description to always show in the Tooltips.xaml -->
            <DataTrigger Binding="{Binding OptionType}" Value="EXTRA_TOOLTIP_DESCRIPTIONS">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <!-- Disabled show pings option, until front-end part is done -->
            <DataTrigger Binding="{Binding OptionType}" Value="SHOW_PINGS">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <!-- Option is hidden until we focus on task -->
            <DataTrigger Binding="{Binding OptionType}" Value="UIScaling">
                <Setter Property="Visibility" Value="Collapsed"/>
            </DataTrigger>

            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding DataContext.IsConsolePlatform, RelativeSource={RelativeSource AncestorType={x:Type ls:Widget}}}" Value="True"/>
                    <Condition Binding="{Binding OptionType}" Value="InputMode"/>
                </MultiDataTrigger.Conditions>

                <Setter Property="Visibility" Value="Collapsed"/>
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="PreviewTextStyle" TargetType="TextBlock">
        <Setter Property="TextAlignment" Value="Center" />
        <Setter Property="FontSize" Value="{StaticResource ScaledMediumFontSize}" />
        <Setter Property="Foreground" Value="{StaticResource LS_accent75TxtColor}" />
    </Style>

    <Style x:Key="OptionPreviewGridMarginStyle" TargetType="Grid">
        <Setter Property="Margin" Value="0,8,0,0"/>
    </Style>

    <ControlTemplate x:Key="OptionTopButtons">
        <Grid VerticalAlignment="Top" HorizontalAlignment="Center" Focusable="False">
            <Image Source="{StaticResource CarouselBottomImage}" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,-4"/>
            
            <DockPanel HorizontalAlignment="Center">
                <ls:LSButton ContentTemplate="{StaticResource ControllerButtonHint}"
                             VerticalAlignment="Center"
                             DockPanel.Dock="Left"
                             ls:LSButton.EatInput="False"
                             BoundEvent="UITabPrev"
                             Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UITabPrev'}"
                             Tag=" "/>
                <ls:LSButton Style="{DynamicResource ControllerButton}" 
                             VerticalAlignment="Center"
                             DockPanel.Dock="Right"
                             ls:LSButton.EatInput="False"
                             BoundEvent="UITabNext"
                             DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UITabNext'}"
                             Content=" "/>
                <ls:LSListBox x:Name="HeaderCarouselList"
                              IsEnabled="{Binding IsEnabled, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                              VerticalAlignment="Center"
                              ActionPrevEvent="UITabPrev" ActionNextEvent="UITabNext"
                              ItemContainerStyle="{StaticResource CarouselItemContainerStyle}"
                              Margin="40,0">
                    <ls:LSListBox.ItemsPanel>
                        <ItemsPanelTemplate>
                            <StackPanel Orientation="Horizontal"/>
                        </ItemsPanelTemplate>
                    </ls:LSListBox.ItemsPanel>
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="SelectionChanged">
                            <b:InvokeCommandAction Command="{Binding CustomEvent}" 
                                                   CommandParameter="{Binding ElementName=HeaderCarouselList, Path=SelectedItem.DataContext.EventString}"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>

                    <ls:LSListBoxItem Content="{Binding Label}" DataContext="{Binding Source={StaticResource gameplayOptionInfo}}"/>
                    <ls:LSListBoxItem Content="{Binding Label}" DataContext="{Binding Source={StaticResource keybindingOptionInfo}}" Visibility="Collapsed"/>
                    <ls:LSListBoxItem Content="{Binding Label}" DataContext="{Binding Source={StaticResource controllerOptionInfo}}"/>
                    <ls:LSListBoxItem Content="{Binding Label}" DataContext="{Binding Source={StaticResource videoOptionInfo}}"/>
                    <ls:LSListBoxItem Content="{Binding Label}" DataContext="{Binding Source={StaticResource audioOptionInfo}}"/>
                    <ls:LSListBoxItem Content="{Binding Label}" DataContext="{Binding Source={StaticResource interfaceOptionInfo}}"/>
                    <ls:LSListBoxItem Content="{Binding Label}" DataContext="{Binding Source={StaticResource accessibilityOptionInfo}}"/>
                </ls:LSListBox>
            </DockPanel>
        </Grid>
        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ActiveOptionsID}" Value="GameOptions">
                <Setter TargetName="HeaderCarouselList" Property="SelectedIndex" Value="0"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActiveOptionsID}" Value="KeybindingOptions">
                <Setter TargetName="HeaderCarouselList" Property="SelectedIndex" Value="1"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActiveOptionsID}" Value="ControllerOptions">
                <Setter TargetName="HeaderCarouselList" Property="SelectedIndex" Value="2"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActiveOptionsID}" Value="VideoOptions">
                <Setter TargetName="HeaderCarouselList" Property="SelectedIndex" Value="3"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActiveOptionsID}" Value="AudioOptions">
                <Setter TargetName="HeaderCarouselList" Property="SelectedIndex" Value="4"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActiveOptionsID}" Value="InterfaceOptions">
                <Setter TargetName="HeaderCarouselList" Property="SelectedIndex" Value="5"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActiveOptionsID}" Value="AccessibilityOptions">
                <Setter TargetName="HeaderCarouselList" Property="SelectedIndex" Value="6"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <ControlTemplate x:Key="OptionBottomButtons">
        <StackPanel Orientation="Horizontal">
            <ls:LSButton x:Name="RestoreToDefaultButton"
                         Style="{StaticResource ControllerHoldButtonStyle}"
                         DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICreate'}"
                         BoundEvent="UICreate"
                         Tag="{Binding Source='h0dcd297egde63g4e44g820dg07c21a2346d3',Converter={StaticResource TranslatedStringConverter}}" 
                         Command="{Binding DataContext.ResetOptionsToDefaultCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>

            <ls:LSButton ContentTemplate="{StaticResource ControllerButtonHint}" 
                         Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancel'}"
                         BoundEvent="UICancel"
                         Margin="20,0" 
                         Tag="{Binding Source='h6fefa28bg2149g4cacga071gd95b236b2d0b',Converter={StaticResource TranslatedStringConverter}}" 
                         Command="{Binding CustomEvent}"
                         SoundID="UI_Shared_Cancel"
                         CommandParameter="CloseWidget"/>
        </StackPanel>
    </ControlTemplate>

    <ControlTemplate x:Key="PreviewOptionsTemplate">
        <Grid Background="{StaticResource LS_PanelBackground}">
            <b:Interaction.Triggers>
                <b:EventTrigger EventName="MoveFocusUp">
                    <ls:LSPlaySound Sound="UI_Shared_Hover" />
                </b:EventTrigger>

                <b:EventTrigger EventName="MoveFocusDown">
                    <ls:LSPlaySound Sound="UI_Shared_Hover" />
                </b:EventTrigger>
            </b:Interaction.Triggers>

            <Image Source="{StaticResource OptionsBackground}" Stretch="Fill"/>

            <Control Template="{StaticResource OptionTopButtons}"/>

            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,260,0,0">
                <StackPanel Orientation="Vertical" VerticalAlignment="Top">
                    <TextBlock x:Name="ListTitle" FontSize="{StaticResource ScaledHugeFontSize}" Foreground="{StaticResource LS_tint100}" FontWeight="DemiBold" Margin="0,0,0,28"/>

                    <ItemsControl x:Name="Options"
                                  AlternationCount="{Binding Options.Count}" 
                                  ItemsSource="{Binding Options}" 
                                  ItemContainerStyle="{StaticResource OptionStyle}" 
                                  Background="Transparent" BorderBrush="Transparent" 
                                  Height="1400"
                                  ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel />
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                        <ItemsControl.Template>
                            <ControlTemplate>
                                <ScrollViewer Template="{StaticResource MinimalisticScrollViewerTemplate}" Padding="64,0,0,0" Focusable="False">
                                    <ItemsPresenter/>
                                </ScrollViewer>
                            </ControlTemplate>
                        </ItemsControl.Template>
                    </ItemsControl>
                </StackPanel>

                <!--begin preview-->
                <StackPanel x:Name="PreviewHolder" DataContext="{Binding FocusedElement.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" VerticalAlignment="Top" Margin="160,0,0,0" Width="1280" Height="1600">

                    <TextBlock Text="{Binding Text}"
                               HorizontalAlignment="Left" Margin="0,80,0,0"
                               FontSize="{StaticResource ScaledBigFontSize}" 
                               Foreground="{StaticResource LS_tint100}"
                               TextAlignment="Left" TextWrapping="Wrap"
                               Width="1280"/>

                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Description}"
                               HorizontalAlignment="Left" Width="1280" Margin="0,28,0,0"
                               FontSize="{StaticResource ScaledDefaultFontSize}" 
                               Foreground="{StaticResource LS_accent75TxtColor}"
                               TextAlignment="Left" TextWrapping="Wrap"
                               Visibility="{Binding Description, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}"/>

                    <Control Template="{StaticResource OptionPreview}" HorizontalAlignment="Center" Margin="0,40,0,0"/>


                    <ListBox ItemsSource="{Binding ComboItems}" SelectedItem="{Binding SelectedItem}" Visibility="{Binding ShowComboItemsDescriptions, Converter={StaticResource BoolToVisibleConverter}}">
                        <ListBox.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Vertical" Width="1280"/>
                            </ItemsPanelTemplate>
                        </ListBox.ItemsPanel>

                        <ListBox.ItemTemplate>
                            <DataTemplate DataType="{x:Type ls:VMEnumData}">
                                <DataTemplate.Resources>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="TextWrapping" Value="Wrap"/>
                                        <Setter Property="HorizontalAlignment" Value="Left"/>
                                    </Style>

                                    <ImageSource x:Key="SelectedOptionIcon">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_bullet_d.png</ImageSource>
                                </DataTemplate.Resources>

                                <StackPanel Orientation="Vertical" HorizontalAlignment="Left" Width="1280">
                                    <StackPanel Orientation="Horizontal">
                                        <Image x:Name="SelectedIcon" Source="{StaticResource SelectedOptionIcon}" Stretch="None" Visibility="Collapsed" VerticalAlignment="Center" Margin="-60,0,0,0"/>
                                        <TextBlock x:Name="Title" ls:TextBlockFormatter.SourceText="{Binding Name}" Foreground="{StaticResource LS_tint100}" FontSize="{StaticResource ScaledIntermediateFontSize}"/>
                                    </StackPanel>

                                    <TextBlock ls:TextBlockFormatter.SourceText="{Binding Description}" Foreground="{StaticResource LS_baseTxtColor}" FontSize="{StaticResource ScaledDefaultFontSize}" Margin="0,0,0,40"/>
                                </StackPanel>

                                <DataTemplate.Triggers>
                                    <DataTrigger Value="True">
                                        <DataTrigger.Binding>
                                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                                <Binding Path=""/>
                                                <Binding Path="DataContext.SelectedItem" RelativeSource="{RelativeSource AncestorType={x:Type ListBox}}" />
                                            </MultiBinding>
                                        </DataTrigger.Binding>
                                        <Setter TargetName="SelectedIcon" Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ListBox.ItemTemplate>
                    </ListBox>

                    <StackPanel.Style>
                        <Style TargetType="{x:Type StackPanel}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding HasPreview}" Value="False">
                                    <Setter Property="Visibility" Value="Hidden"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ListItemType}" Value="None">
                                    <Setter Property="Visibility" Value="Hidden"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ListItemType}" Value="Keybinding">
                                    <Setter Property="Visibility" Value="Hidden"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding ListItemType}" Value="String">
                                    <Setter Property="Visibility" Value="Hidden"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </StackPanel.Style>
                </StackPanel>
            </StackPanel>

            <Control Template="{StaticResource OptionBottomButtons}" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
        </Grid>

        <ControlTemplate.Triggers>
            <DataTrigger Binding="{Binding ActiveOptionsID}" Value="GameOptions">
                <Setter TargetName="ListTitle" Property="Text" Value="{Binding Source='h3ddb094ag78e8g4433gb3ebg257085a592aa',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActiveOptionsID}" Value="VideoOptions">
                <Setter TargetName="ListTitle" Property="Text" Value="{Binding Source='hfcf0e084gab3ag4595g9250gc263a0fef8a3',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActiveOptionsID}" Value="AudioOptions">
                <Setter TargetName="ListTitle" Property="Text" Value="{Binding Source='h72051010g546eg466dg8d1cge8f632c968d1',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActiveOptionsID}" Value="InterfaceOptions">
                <Setter TargetName="ListTitle" Property="Text" Value="{Binding Source='h1f95cde8g8ec6g422ag80a3gc6cc23eb21a7',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActiveOptionsID}" Value="AccessibilityOptions">
                <Setter TargetName="ListTitle" Property="Text" Value="{Binding Source='h484a1fbcg1a96g4ca8g8efbgc44754c3dd2d',Converter={StaticResource TranslatedStringConverter}}"/>
            </DataTrigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
</ResourceDictionary>