<ls:UIWidget x:Name="Pickpocket"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors" 
             
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d"
             d:DesignHeight="2160" d:DesignWidth="3840"
             ls:UIWidget.UseCustomDC="True"
             ls:UIWidget.ContextName="Pickpocket">

    <ls:UIWidget.Resources>
        <Storyboard x:Key="AnimatePie">
            <DoubleAnimation Storyboard.TargetName="chancePie" Storyboard.TargetProperty="Value" To="{Binding ElementName=chancePie , Path=Tag}" Duration="0:0:0.3" >
                <DoubleAnimation.EasingFunction>
                    <CubicEase EasingMode="EaseOut"/>
                </DoubleAnimation.EasingFunction>
            </DoubleAnimation>
        </Storyboard>

        <BitmapImage x:Key="topBarBackdrop" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Pickpocket/pickpocket_topBar.png" />
        <BitmapImage x:Key="targetRing" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Pickpocket/pickpocket_circle_small.png" />
        <BitmapImage x:Key="resultRing" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Pickpocket/pickpocket_circle_big.png" />
        <BitmapImage x:Key="inventoryBackdrop" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Pickpocket/pickpocket_containerBG.png" />
        <BitmapImage x:Key="d20" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Pickpocket/ico_pickpocket_d20.png" />

    </ls:UIWidget.Resources>

    <Border ls:TooltipExtender.Owner="{Binding CurrentPlayer.SelectedCharacter}" VerticalAlignment="Center" HorizontalAlignment="Center">

        <b:Interaction.Behaviors>
            <ls:LSMouseDragElementBehavior HitArea="{Binding ElementName=DragHit,Mode=OneWay}"/>
        </b:Interaction.Behaviors>

        <ls:LSNineSliceImage x:Name="backdrop" IconWidth="480" Slices="48 40 48 100" VerticalAlignment="Top" HorizontalAlignment="Center" MinHeight="732" MinWidth="1036" ImageSource="{StaticResource inventoryBackdrop}">
            <Grid>
                <Border x:Name="DragHit" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" CornerRadius="26,26,0,0" Background="Transparent">
                </Border>

                <ls:LSButton Style="{StaticResource PopUpCloseButton}" x:Name="CloseBtn" 
                             Command="{Binding CloseWidgetCommand}"
                             VerticalAlignment="Top" HorizontalAlignment="Right"  Margin="0,30,-16,0"/>

                <Grid Name="Inventory" HorizontalAlignment="Center" VerticalAlignment="Top">

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                    <b:Interaction.Behaviors>
                        <ls:CollectionFilterBehavior x:Name="PlayerInventoryFiltered" ItemsSource="{Binding Container.Inventory.Slots}" Predicate="{Binding Container.Inventory.TabFiltersPredicate}"/>
                    </b:Interaction.Behaviors>

                    <ListBox ItemsSource="{Binding Path=(b:Interaction.Behaviors)[0].FilteredItems, ElementName=Inventory}" ItemTemplate="{StaticResource Template.ContainerCell}" DataContext="{Binding Container.Inventory}" Padding="0,0,10,0" x:Name="inventoryListBox" Height="456" ScrollViewer.VerticalScrollBarVisibility="Visible" ScrollViewer.HorizontalScrollBarVisibility="Disabled" Grid.Row="0" Margin="0,86,0,0" VerticalAlignment="Top" HorizontalAlignment="Center" Background="Transparent" BorderThickness="0">
                    <ListBox.ItemContainerStyle>
                        <Style TargetType="ListBoxItem"  BasedOn="{StaticResource {x:Type ListBoxItem}}">
                            <Setter Property="Padding" Value="0"/>
                            <Setter Property="BorderThickness" Value="0"/>
                            <Setter Property="Template">
                                <Setter.Value>
                                    <ControlTemplate TargetType="ListBoxItem">
                                        <ContentControl ToolTipService.Placement="Right" DataContext="{Binding Object}">
                                            <ContentControl.ToolTip>
                                                <ls:LSTooltip Content="{Binding DataContext.Object,RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                                            </ContentControl.ToolTip>
                                            <Grid>
                                                <ContentPresenter />
                                                <Image  x:Name="SelectedImg" Source="{StaticResource InvSlot_Selector}" IsHitTestVisible="False" Visibility="Hidden" Opacity="1.0" Stretch="None"/>
                                            </Grid>
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="MouseDoubleClick" >
                                                    <b:InvokeCommandAction Command="{Binding Path=DataContext.TakeItemCommand,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding .}" />
                                                </b:EventTrigger>
                                            </b:Interaction.Triggers>
                                        </ContentControl>
                                    
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsSelected" Value="True">
                                                <Setter TargetName="SelectedImg" Property="Visibility" Value="Visible"/>
                                                <Setter TargetName="SelectedImg" Property="Opacity" Value="0.8"/>
                                            </Trigger>
                                            <Trigger Property="IsMouseOver" Value="True">
                                                <Setter TargetName="SelectedImg" Property="Visibility" Value="Visible" />
                                                <Setter TargetName="SelectedImg" Property="Opacity" Value="1.0"/>
                                            </Trigger>

                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </Setter.Value>
                            </Setter>

                        </Style>
                    </ListBox.ItemContainerStyle>
                    <ListBox.Resources>
                            <Style TargetType="ScrollBar" BasedOn="{StaticResource GoldScrollBar}">
                            <Setter Property="Margin" Value="20,0,-20,0"/>
                        </Style>
                    </ListBox.Resources>
                    <ListBox.ItemsPanel>
                        <ItemsPanelTemplate>
                            <ls:LSGrid x:Name="ContainerGrid" Columns="8" Rows="4"  ContainerData="{Binding .}" CellWidth="{StaticResource InvSlotSize}" CellHeight="{StaticResource InvSlotSize}" 
                                       VerticalSpacing="{StaticResource InvSpacing}" HorizontalSpacing="{StaticResource InvSpacing}" Background="{StaticResource InventoryCell2x2Brush}" AllowDrop="True">
                                <b:Interaction.Behaviors>
                                    <ls:DropOnInventoryGridBehavior DropCommand="{Binding DataContext.DropOnInventorySlotCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                </b:Interaction.Behaviors>
                            </ls:LSGrid>
                        </ItemsPanelTemplate>
                    </ListBox.ItemsPanel>
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="SelectionChanged">
                            <b:InvokeCommandAction Command="{Binding DataContext.SelectItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Path=SelectedItem, ElementName=inventoryListBox}"/>
                            <b:ControlStoryboardAction Storyboard="{StaticResource AnimatePie}" />
                        </b:EventTrigger>
                    </b:Interaction.Triggers>
                </ListBox>

                <Grid x:Name="topBar" Grid.Row="1" VerticalAlignment="Bottom" HorizontalAlignment="Center" DataContext="{Binding Roll}">
                    <Grid.Resources>
                        <Style TargetType="TextBlock">
                            <Setter Property="Foreground" Value="{StaticResource LS_PrimaryColor}" />
                        </Style>
                        <KeyTime x:Key="AnimStealTime">0:0:0.5</KeyTime>
                    </Grid.Resources>

                        <Image Source="{StaticResource topBarBackdrop}" Stretch="None"/>
                    
                        <Grid VerticalAlignment="Center">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <StackPanel Grid.Column="0" HorizontalAlignment="Right" Orientation="Horizontal">
                                <TextBlock Text="{Binding Source='hea70fbd3g7598g424egb3bfg7cbe03bbdc09', Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Center" HorizontalAlignment="Center"  Foreground="{StaticResource LS_SecondaryColor}" FontSize="{StaticResource ScaledDefaultFontSize}"/>
                            <Grid>
                                <Image Source="{StaticResource targetRing}" Stretch="None"/>
                                <TextBlock Text="{Binding DifficultyCheck}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Grid>
                        </StackPanel>

                        <Grid HorizontalAlignment="Center" Grid.Column="1" >
                            <Image Source="{StaticResource resultRing}" Stretch="None"/>
                                <Image x:Name="d20Img" Source="{StaticResource d20}" Stretch="None">
                                <Image.Style>
                                    <Style TargetType="Image">
                                        <Setter Property="Opacity" Value="1.0" />
                                        <Setter Property="RenderTransform">
                                            <Setter.Value>
                                                <TransformGroup>
                                                    <ScaleTransform/>
                                                    <SkewTransform/>
                                                    <RotateTransform CenterX="30" CenterY="30"/>
                                                    <TranslateTransform/>
                                                </TransformGroup>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Finished}" Value="True">
                                                <DataTrigger.EnterActions>
                                                    <BeginStoryboard >
                                                        <Storyboard >
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0"/>
                                                                <EasingDoubleKeyFrame KeyTime="{StaticResource AnimStealTime}" Value="0.3">
                                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                                        <CubicEase EasingMode="EaseOut"/>
                                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                                </EasingDoubleKeyFrame>
                                                                <EasingDoubleKeyFrame KeyTime="{StaticResource AnimStealTime}" Value="0.0"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0"/>
                                                                <EasingDoubleKeyFrame KeyTime="{StaticResource AnimStealTime}" Value="0.2">
                                                                </EasingDoubleKeyFrame>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0"/>
                                                                <EasingDoubleKeyFrame KeyTime="{StaticResource AnimStealTime}" Value="0.2">
                                                                </EasingDoubleKeyFrame>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                                                                <EasingDoubleKeyFrame KeyTime="{StaticResource AnimStealTime}" Value="-180">
                                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                                        <CubicEase EasingMode="EaseOut"/>
                                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                                </EasingDoubleKeyFrame>
                                                            </DoubleAnimationUsingKeyFrames>

                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding Finished}" Value="False">
                                                <DataTrigger.EnterActions>
                                                    <!--Reset-->
                                                    <BeginStoryboard >
                                                        <Storyboard >
                                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0.0" >
                                                            </DoubleAnimation>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock x:Name="resultTxt" Text="{Binding RolledNumber}" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{DynamicResource LS_PrimaryColor}">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Visible" />
                                        <Setter Property="RenderTransform">
                                            <Setter.Value>
                                                <TransformGroup>
                                                    <ScaleTransform/>
                                                    <SkewTransform/>
                                                    <RotateTransform/>
                                                    <TranslateTransform/>
                                                </TransformGroup>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RolledNumber}" Value="0">
                                                <Setter Property="Visibility" Value="Hidden" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Finished}" Value="True">
                                                <DataTrigger.EnterActions>
                                                    <!--Steal-->
                                                    <BeginStoryboard >
                                                        <Storyboard >
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0.3"/>
                                                                <EasingDoubleKeyFrame KeyTime="{StaticResource AnimStealTime}" Value="1.0">
                                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                                        <CubicEase EasingMode="EaseOut"/>
                                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                                </EasingDoubleKeyFrame>
                                                            </DoubleAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding Finished}" Value="False">
                                                <DataTrigger.EnterActions>
                                                    <!--Reset-->
                                                    <BeginStoryboard >
                                                        <Storyboard >
                                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.0" Duration="0:0:0.0" >
                                                            </DoubleAnimation>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <ls:LSPie x:Name="chancePie" Tag="{Binding Chance}" SweepDirection="Counterclockwise" Width="120" Height="120" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <ls:LSPie.Style>
                                    <Style TargetType="ls:LSPie">
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Chance}" Value="-1">
                                                <Setter Property="Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ls:LSPie.Style>
                                <Ellipse Width="92" Height="92" StrokeThickness="4" Fill="Transparent">
                                    <Ellipse.Style>
                                        <Style TargetType="Ellipse">
                                            <Setter Property="Stroke" Value="{StaticResource LS_tint100}"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Chance, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0.7}" Value="True">
                                                    <Setter Property="Stroke" Value="{StaticResource LS_bonusTxtColor}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Chance, Converter={StaticResource LessThanConverter}, ConverterParameter=0.3}" Value="True">
                                                    <Setter Property="Stroke" Value="{StaticResource LS_alertTxtColor}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Ellipse.Style>
                                </Ellipse>

                            </ls:LSPie>
                        </Grid>
                        <Grid Grid.Column="2">
                            <StackPanel Orientation="Horizontal">
                                <Image Margin="0,0,0,8" Stretch="None">
                                    <Image.Style>
                                        <Style TargetType="Image">
                                            <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/check_green.png"/>
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Success}" Value="False">
                                                    <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/removeFromSlot_overlay.png"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Finished}" Value="True">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Image.Style>
                                </Image>
                                <TextBlock  VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{StaticResource LS_SecondaryColor}">
                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Setter Property="Visibility" Value="Visible" />
                                            <Setter Property="Text" Value="{Binding Source='h6c38d243gd613g45e7g899fgb3943d3212b3', Converter={StaticResource TranslatedStringConverter}}" />
                                            <Style.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Finished}" Value="True" />
                                                        <Condition Binding="{Binding Success}" Value="False" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Text" Value="{Binding Source='h2b186f92gd814g4802g8ef1g906b47bfc6bb', Converter={StaticResource TranslatedStringConverter}}" />
                                                    <Setter Property="Foreground" Value="{DynamicResource LS_alertTxtColor}" />
                                                </MultiDataTrigger>

                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Finished}" Value="True" />
                                                        <Condition Binding="{Binding Success}" Value="True" />
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Text" Value="{Binding Source='hd736d0ccgf370g4232gba8bg2caa09a18a1f', Converter={StaticResource TranslatedStringConverter}}" />
                                                    <Setter Property="Foreground" Value="{DynamicResource LS_bonusTxtColor}" />
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </StackPanel>
                        </Grid>
                    </Grid>

                        <ContentControl x:Name="rollInfoTooltip" >
                        <ContentControl.Template>
                            <ControlTemplate>
                                    <Grid ToolTip="{StaticResource ManagedTooltip}" ToolTipService.Placement="Left" Background="Transparent" MinWidth="10" MinHeight="10" >
                                        <Grid.Style>
                                            <Style TargetType="Grid">
                                                <Setter Property="Visibility" Value="{Binding Path=SelectedItem, ElementName=inventoryListBox, Converter={StaticResource NullToHiddenConverter}}" />
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding Finished}" Value="True">
                                                        <Setter Property="Visibility" Value="Visible" />
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Grid.Style>
                                    </Grid>
                            </ControlTemplate>
                        </ContentControl.Template>
                    </ContentControl>
                </Grid>

                <!-- Don't add a sound id event to the take all, it's already handled.-->
                <StackPanel HorizontalAlignment="Center" Orientation="Horizontal" VerticalAlignment="Top" Grid.Row="2" Margin="0 0 0 50" >
                    <ls:LSButton Style="{StaticResource BrownButtonStyle}"
                             Content="{Binding Source='hff1685e4g3845g4846g99bfg219ae73ce55d', Converter={StaticResource TranslatedStringConverter}}"
                             Command="{Binding CloseWidgetCommand}"
                             BoundEvent="UICancel" SoundID="UI_Shared_Cancel"
                             Margin="56,0,0,-6"/>
                    <ls:LSButton Style="{StaticResource BlueButtonStyle}"
                             Content="{Binding Source='h921e0841g7727g48b4g980eg3d45267ee8e0', Converter={StaticResource TranslatedStringConverter}}"
                             Command="{Binding TakeItemCommand}" CommandParameter="{Binding  Path=SelectedItem ,ElementName=inventoryListBox}"
                             IsEnabled="{Binding CanSteal}"
                             BoundEvent="UIAccept" SoundID="UI_Shared_Accept" 
                             Margin="0,0,56,-6"/>
                </StackPanel>

            </Grid>
            </Grid>
        </ls:LSNineSliceImage>

    </Border>
    <b:Interaction.Triggers>
        <b:EventTrigger EventName="Loaded">
            <ls:LSPlaySound Sound="UI_HUD_Pickpocket_Open"/>
        </b:EventTrigger>
        <b:EventTrigger EventName="Unloaded">
            <ls:LSPlaySound Sound="UI_HUD_Pickpocket_Close"/>
        </b:EventTrigger>
    </b:Interaction.Triggers>
</ls:UIWidget>