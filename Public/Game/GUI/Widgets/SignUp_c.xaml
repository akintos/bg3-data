<ls:UIWidget x:Name="SignUp_c"
             ls:UIWidget.ContextName="SignUp"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance {x:Type ls:DCSignUp}, IsDesignTimeCreatable=True}"
             d:DesignHeight="2160" d:DesignWidth="3840"
             FocusDown="UIDown" FocusLeft="UILeft" FocusRight="UIRight" FocusUp="UIUp" ls:MoveFocus.FocusMovementMode="Closest" CanCacheFocusSurroundingElements="False">
    <ls:UIWidget.Template>
        <ControlTemplate TargetType="{x:Type ls:UIWidget}">
            <ControlTemplate.Resources>
                <ResourceDictionary>
                    <BitmapImage x:Key="PanelBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_menuPanelBG.png"/>
                    <BitmapImage x:Key="LarianLogo" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SignUp/LarianLogo.png"/>
                    <BitmapImage x:Key="BG3Background" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SignUp/STUB_BG3_background.png"/>
                    <BitmapImage x:Key="SMSBell" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SignUp/ico_SMSbell.png"/>

                    <BitmapImage x:Key="CheckBoxHolder" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_checkHolder_d.png"/>
                    <BitmapImage x:Key="CheckBoxHolderActive" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_checkHolder_active_d.png"/>

                    <Style x:Key="TitleText" TargetType="TextBlock">
                        <Setter Property="FontSize" Value="{StaticResource ScaledTitleFontSize}"/>
                        <Setter Property="Foreground" Value="{StaticResource LS_tint100}"/>
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                        <Setter Property="TextAlignment" Value="Center"/>
                        <Setter Property="Margin" Value="10,60"/>
                    </Style>

                    <Style x:Key="BodyText" TargetType="TextBlock">
                        <Setter Property="FontSize" Value="{StaticResource ScaledDefaultFontSize}"/>
                        <Setter Property="Foreground" Value="{StaticResource LS_baseTxtColor}"/>
                        <Setter Property="TextWrapping" Value="Wrap"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                        <Setter Property="TextAlignment" Value="Center"/>
                        <Setter Property="Margin" Value="180, 30"/>
                    </Style>

                    <SolidColorBrush x:Key="BoxErrorBg" Opacity="0.2" Color="{StaticResource accent100Color}"/>
                    <SolidColorBrush x:Key="BoxErrorFocusedBg" Opacity="0.6" Color="{StaticResource accent100Color}"/>

                    <ControlTemplate x:Key="SignUpTextBoxErrorTemplate" TargetType="{x:Type ls:LSTextBox}">
                        <Border x:Name="Root" BorderThickness="2" BorderBrush="{StaticResource LS_alertTxtColor}" Background="{StaticResource BoxErrorBg}">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" IsEnabled="False" Margin="4,17,4,16" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                      Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}"
                                      VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                                <Setter TargetName="Root" Property="Background" Value="{StaticResource BoxErrorFocusedBg}"/>
                                <Setter TargetName="PART_ContentHost" Property="IsEnabled" Value="True"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                    <ControlTemplate x:Key="SignUpPasswordBoxTemplate" TargetType="{x:Type ls:LSPasswordBox}">
                        <ls:LSNineSliceImage x:Name="Bg" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="110"
                                             ImageSource="{StaticResource ButtonBg}" Slices="24,40,24,24">
                            <Grid>
                                <ScrollViewer x:Name="PART_ContentHost" Focusable="False" IsEnabled="False" Margin="4" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                              Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}"
                                              VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                                <Grid x:Name="Frame" Visibility="Hidden" Margin="-18">
                                    <Grid.Triggers>
                                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                            <BeginStoryboard Storyboard="{StaticResource SelectorStoryboard}"/>
                                        </EventTrigger>
                                    </Grid.Triggers>
                                    <ls:LSNineSliceImage x:Name="Img1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="110"
                                                         ImageSource="{StaticResource ButtonBg_h1}" Slices="34" Opacity="1"/>
                                    <ls:LSNineSliceImage x:Name="Img2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="110"
                                                         ImageSource="{StaticResource ButtonBg_h2}" Slices="34" Opacity="0"/>
                                </Grid>
                            </Grid>
                        </ls:LSNineSliceImage>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                                <Setter TargetName="Bg" Property="ImageSource" Value="{StaticResource ButtonBg_h}"/>
                                <Setter TargetName="PART_ContentHost" Property="IsEnabled" Value="True"/>
                                <Setter TargetName="Frame" Property="Visibility" Value="Visible"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                    <ControlTemplate x:Key="SignUpPasswordBoxErrorTemplate" TargetType="{x:Type ls:LSPasswordBox}">
                        <Border x:Name="Root" BorderThickness="2" BorderBrush="{StaticResource LS_alertTxtColor}" Background="{StaticResource BoxErrorBg}">
                            <ScrollViewer x:Name="PART_ContentHost" Focusable="False" IsEnabled="False" Margin="4,17,4,16" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                          Padding="{TemplateBinding Padding}" Foreground="{TemplateBinding Foreground}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"/>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                                <Setter TargetName="Root" Property="Background" Value="{StaticResource BoxErrorFocusedBg}"/>
                                <Setter TargetName="PART_ContentHost" Property="IsEnabled" Value="True"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                    <Style x:Key="DefaultSignUpPasswordBoxStyle" TargetType="{x:Type ls:LSPasswordBox}" BasedOn="{StaticResource {x:Type ls:LSPasswordBox}}">
                        <Setter Property="Template" Value="{StaticResource SignUpPasswordBoxTemplate}"/>
                        <Setter Property="Focusable" Value="True"/>
                        <Setter Property="ls:MoveFocus.Focusable" Value="True"/>
                        <Setter Property="ToolTipService.IsEnabled" Value="True"/>
                        <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
                        <Setter Property="HorizontalAlignment" Value="Stretch"/>
                        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
                        <Setter Property="VerticalContentAlignment" Value="Center"/>
                        <Setter Property="Foreground" Value="{StaticResource LS_accent75TxtColor}"/>
                        <Setter Property="Padding" Value="10,4"/>
                        <Setter Property="Margin" Value="180, 30"/>
                        <Setter Property="PasswordChar" Value="•"/>
                        <Style.Triggers>
                            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                                <Setter Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                    <ControlTemplate x:Key="SignUpCheckBoxTemplate" TargetType="{x:Type ls:LSCheckBox}">
                        <ls:LSNineSliceImage x:Name="Bg" Grid.Column="0" Grid.ColumnSpan="2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="110"
                                             ImageSource="{StaticResource ButtonBg}" Slices="24,40,24,24">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>
                                <Image x:Name="CheckHolder" Grid.Column="0" Margin="10,0" Source="{StaticResource CheckBoxHolder}" Stretch="None"/>

                                <TextBlock x:Name="Content" Grid.Column="1" IsEnabled="False" VerticalAlignment="Center" HorizontalAlignment="Stretch" TextAlignment="Left" Margin="4,4, 20, 4"
                                           TextWrapping="Wrap" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}"/>

                                <Grid x:Name="Frame" Grid.Column="0" Grid.ColumnSpan="2" Visibility="Hidden" Margin="-18">
                                    <Grid.Triggers>
                                        <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                            <BeginStoryboard Storyboard="{StaticResource SelectorStoryboard}"/>
                                        </EventTrigger>
                                    </Grid.Triggers>
                                    <ls:LSNineSliceImage x:Name="Img1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="110"
                                                         ImageSource="{StaticResource ButtonBg_h1}" Slices="34" Opacity="1"/>
                                    <ls:LSNineSliceImage x:Name="Img2" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" MinHeight="110"
                                                         ImageSource="{StaticResource ButtonBg_h2}" Slices="34" Opacity="0"/>
                                </Grid>
                            </Grid>
                        </ls:LSNineSliceImage>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                                <Setter TargetName="Bg" Property="ImageSource" Value="{StaticResource ButtonBg_h}"/>
                                <Setter TargetName="Content" Property="IsEnabled" Value="True"/>
                                <Setter TargetName="Frame" Property="Visibility" Value="Visible"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="CheckHolder" Property="Source" Value="{StaticResource CheckBoxHolderActive}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                    <ControlTemplate x:Key="SignUpCheckBoxErrorTemplate" TargetType="{x:Type ls:LSCheckBox}">
                        <Border x:Name="Root" BorderThickness="2" BorderBrush="{StaticResource LS_alertTxtColor}" Background="{StaticResource BoxErrorBg}">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                </Grid.ColumnDefinitions>

                                <Image x:Name="CheckHolder" Grid.Column="0" Margin="10,0" Source="{StaticResource CheckBoxHolder}" Stretch="None"/>

                                <TextBlock x:Name="Content" Grid.Column="1" IsEnabled="False" VerticalAlignment="Center" HorizontalAlignment="Stretch" TextAlignment="Left" Margin="4,4, 20, 4"
                                           TextWrapping="Wrap" Foreground="{TemplateBinding Foreground}" Text="{TemplateBinding Content}"/>
                            </Grid>
                        </Border>
                        <ControlTemplate.Triggers>
                            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                                <Setter TargetName="Root" Property="Background" Value="{StaticResource BoxErrorFocusedBg}"/>
                                <Setter TargetName="Content" Property="IsEnabled" Value="True"/>
                            </Trigger>
                            <Trigger Property="IsChecked" Value="True">
                                <Setter TargetName="CheckHolder" Property="Source" Value="{StaticResource CheckBoxHolderActive}"/>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                    <Style x:Key="DefaultSignUpCheckBoxStyle" TargetType="{x:Type ls:LSCheckBox}">
                        <Setter Property="Template" Value="{StaticResource SignUpCheckBoxTemplate}"/>
                        <Setter Property="Focusable" Value="True"/>
                        <Setter Property="ls:MoveFocus.Focusable" Value="True"/>
                        <Setter Property="ToolTipService.IsEnabled" Value="True"/>
                        <Setter Property="ToolTipService.ShowOnDisabled" Value="True"/>
                        <Setter Property="HorizontalAlignment" Value="Stretch"/>
                        <Setter Property="Foreground" Value="{StaticResource LS_accent75TxtColor}"/>
                        <Setter Property="Margin" Value="180, 30"/>
                        <Style.Triggers>
                            <Trigger Property="ls:MoveFocus.IsFocused" Value="True">
                                <Setter Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>

                    <ControlTemplate x:Key="EmailTemplate">
                        <StackPanel x:Name="EmailRoot" VerticalAlignment="Top" HorizontalAlignment="Stretch">
                            <TextBlock x:Name="Email" Style="{StaticResource BodyText}"
                                       Text="{Binding Source='h94e957aega94cg4ed8g9138gfe77980182af', Converter={StaticResource TranslatedStringConverter}}"/>
                            <ls:LSTextBox x:Name="EmailEdit" Style="{StaticResource FocusableTextBoxStyle}"
                                          Text="{Binding Email, Mode=TwoWay}">
                                <ls:LSTextBox.ToolTip>
                                    <ls:LSTooltip x:Name="EmailEditToolTip" CanBePinned="False" Placement="Right" VerticalOffset="-10" HorizontalOffset="100" PlayerId="{Binding Path=DataContext.CurrentPlayer.PlayerId, ElementName=SignUp_c}">
                                        <TextBlock x:Name="EmailEditToolTipContent" TextAlignment="Left" MaxWidth="800" TextWrapping="Wrap"/>
                                    </ls:LSTooltip>
                                </ls:LSTextBox.ToolTip>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <b:Interaction.Behaviors>
                                            <b:ConditionBehavior>
                                                <b:ConditionalExpression>
                                                    <b:ComparisonCondition LeftOperand="{Binding FocusedElement, ElementName=SignUp_c}" Operator="Equal" RightOperand="{x:Null}"/>
                                                </b:ConditionalExpression>
                                            </b:ConditionBehavior>
                                        </b:Interaction.Behaviors>
                                        <ls:SetMoveFocusAction TargetName="SignUp_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSTextBox>
                            <b:Interaction.Triggers>
                                <b:DataTrigger Binding="{Binding LastError}" Value="None">
                                    <b:InvokeCommandAction Command="{Binding HideTooltipOnUIElement}" CommandParameter="{Binding ElementName=EmailEdit}"/>
                                </b:DataTrigger>
                                <b:DataTrigger Binding="{Binding LastError}" Value="EmailFormat">
                                    <b:InvokeCommandAction Command="{Binding EnableTooltipOnUIElement}" CommandParameter="{Binding ElementName=EmailEdit}"/>
                                    <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding ElementName=EmailEdit}"/>
                                </b:DataTrigger>
                                <b:DataTrigger Binding="{Binding LastError}" Value="EmailExists">
                                    <b:InvokeCommandAction Command="{Binding EnableTooltipOnUIElement}" CommandParameter="{Binding ElementName=EmailEdit}"/>
                                    <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding ElementName=EmailEdit}"/>
                                </b:DataTrigger>
                            </b:Interaction.Triggers>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding LastError}" Value="EmailFormat">
                                <Setter TargetName="EmailEdit" Property="Template" Value="{StaticResource SignUpTextBoxErrorTemplate}"/>
                                <Setter TargetName="EmailEditToolTipContent" Property="Text" Value="{Binding Source='h430734afgc5ecg4567g9a89g0e83b864ec71', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding LastError}" Value="EmailExists">
                                <Setter TargetName="EmailEdit" Property="Template" Value="{StaticResource SignUpTextBoxErrorTemplate}"/>
                                <Setter TargetName="EmailEditToolTipContent" Property="Text" Value="{Binding Source='h8507397fg761ag4bb3g87eag0aca0e4647cd', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                    <ControlTemplate x:Key="PasswordTemplate">
                        <StackPanel x:Name="PasswordRoot" VerticalAlignment="Top" HorizontalAlignment="Stretch">
                            <TextBlock x:Name="Password" Style="{StaticResource BodyText}"
                                       Text="{Binding Source='hef04d4c2g1862g4ebfg9aabg7dc764288126', Converter={StaticResource TranslatedStringConverter}}"/>
                            <ls:LSPasswordBox x:Name="PasswordEdit" Style="{StaticResource DefaultSignUpPasswordBoxStyle}"
                                              Text="{Binding Password, Mode=TwoWay}">
                                <ls:LSPasswordBox.ToolTip>
                                    <ls:LSTooltip x:Name="PasswordEditToolTip" CanBePinned="False" Placement="Right" VerticalOffset="-10" HorizontalOffset="100" PlayerId="{Binding Path=DataContext.CurrentPlayer.PlayerId, ElementName=SignUp_c}">
                                        <TextBlock x:Name="PasswordEditToolTipContent" TextAlignment="Left" MaxWidth="800" TextWrapping="Wrap"/>
                                    </ls:LSTooltip>
                                </ls:LSPasswordBox.ToolTip>
                            </ls:LSPasswordBox>
                            <b:Interaction.Triggers>
                                <b:DataTrigger Binding="{Binding LastError}" Value="None">
                                    <b:InvokeCommandAction Command="{Binding HideTooltipOnUIElement}" CommandParameter="{Binding ElementName=PasswordEdit}"/>
                                </b:DataTrigger>
                                <b:DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), ElementName=PasswordEdit}" Value="False">
                                    <b:InvokeCommandAction Command="{Binding HideTooltipOnUIElement}" CommandParameter="{Binding ElementName=PasswordEdit}"/>
                                </b:DataTrigger>
                                <b:DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), ElementName=PasswordEdit}" Value="True">
                                    <b:InvokeCommandAction Command="{Binding EnableTooltipOnUIElement}" CommandParameter="{Binding ElementName=PasswordEdit}"/>
                                    <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding ElementName=PasswordEdit}"/>
                                </b:DataTrigger>
                                <b:DataTrigger Binding="{Binding LastError}" Value="PasswordFormat">
                                    <b:InvokeCommandAction Command="{Binding EnableTooltipOnUIElement}" CommandParameter="{Binding ElementName=PasswordEdit}"/>
                                    <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding ElementName=PasswordEdit}"/>
                                </b:DataTrigger>
                                <b:DataTrigger Binding="{Binding LastError}" Value="Login">
                                    <b:InvokeCommandAction Command="{Binding EnableTooltipOnUIElement}" CommandParameter="{Binding ElementName=PasswordEdit}"/>
                                    <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding ElementName=PasswordEdit}"/>
                                </b:DataTrigger>
                                <!--Password's Text property doesn't get automatically updated from its binding, so we directly update the password when it's cleaned. I do it this way because a normal DataTrigger-Setter on Text removes the Binding for some reason-->
                                <b:DataTrigger Binding="{Binding Password}" Value="">
                                    <b:InvokeCommandAction Command="{Binding ClearPassword, ElementName=PasswordEdit}"/>
                                </b:DataTrigger>
                            </b:Interaction.Triggers>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger SourceName="PasswordEdit" Property="ls:MoveFocus.IsFocused" Value="True">
                                <Setter TargetName="PasswordEditToolTipContent" Property="Text" Value="{Binding Source='hec58a7b2gde8bg48e8gbdb5g60f89ecd1a17', Converter={StaticResource TranslatedStringConverter}}"/>
                            </Trigger>
                            <DataTrigger Binding="{Binding LastError}" Value="PasswordFormat">
                                <Setter TargetName="PasswordEdit" Property="Template" Value="{StaticResource SignUpPasswordBoxErrorTemplate}"/>
                                <Setter TargetName="PasswordEditToolTipContent" Property="Text" Value="{Binding Source='hec58a7b2gde8bg48e8gbdb5g60f89ecd1a17', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding LastError}" Value="Login">
                                <Setter TargetName="PasswordEdit" Property="Template" Value="{StaticResource SignUpPasswordBoxErrorTemplate}"/>
                                <Setter TargetName="PasswordEditToolTipContent" Property="Text" Value="{Binding Source='h9f6a521fg8870g4005g8710gef05efed2f37', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                    <ControlTemplate x:Key="SpinnerTemplate">
                        <StackPanel x:Name="SpinnerRoot" VerticalAlignment="Top" HorizontalAlignment="Stretch">
                            <TextBlock x:Name="PleaseWait" Style="{StaticResource BodyText}"
                                       Text="{Binding Source='h18414d2cg5e53g41dag8f35g774de89faaf8', Converter={StaticResource TranslatedStringConverter}}"/>
                            <Control VerticalAlignment="Top" HorizontalAlignment="Center" Template="{StaticResource BusyElement}"/>
                        </StackPanel>
                    </ControlTemplate>

                    <Style x:Key="SignUpScrollViewer" TargetType="{x:Type ls:LSScrollViewer}">
                        <Setter Property="Template" Value="{StaticResource StretchingScrollViewerTemplate}"/>
                        <Setter Property="VerticalScrollBarVisibility" Value="Visible"/>
                        <Setter Property="VerticalAlignment" Value="Stretch"/>
                        <Setter Property="Margin" Value="0,0,0,40"/>
                        <Setter Property="BoundScrollUpEvent" Value="UIScrollUp"/>
                        <Setter Property="BoundScrollDownEvent" Value="UIScrollDown"/>
                        <Setter Property="GamepadScrollMultiplier" Value="600"/>
                    </Style>

                    <ControlTemplate x:Key="LarianAccount">
                        <StackPanel x:Name="ScreenContainer" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                            
                            <Image x:Name="LarianLogo" Source="{StaticResource LarianLogo}" Stretch="None" HorizontalAlignment="Center" Margin="0,180,0,10"/>
                            <TextBlock x:Name="Title" Style="{StaticResource TitleText}"
                                       Text="{Binding Source='h2d0dcfb7g5a4bg4c0fg9a2fgefa48557c453', Converter={StaticResource TranslatedStringConverter}}"/>
                            <TextBlock x:Name="Subtitle" Style="{StaticResource BodyText}" HorizontalAlignment="Center"
                                       Text="{Binding Source='h3c895f7fg70c9g4584g8a02g83c63a313cb7', Converter={StaticResource TranslatedStringConverter}}"/>
                            <ls:LSButton x:Name="CreateAccountBtn" Style="{StaticResource FocusableButtonStyle}"
                                         Command="{Binding GoToCreateAccount}"
                                         Content="{Binding Source='h81fa45a1gcee1g482dgb2bcge83b4bd783f7',Converter={StaticResource TranslatedStringConverter}}">
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="SignUp_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSButton>
                            <TextBlock x:Name="ExistingAccount" Style="{StaticResource BodyText}" HorizontalAlignment="Center"
                                       Text="{Binding Source='hd2d9b28dgd33ag4d13gbf5bgcc87f90ca311', Converter={StaticResource TranslatedStringConverter}}"/>
                            <ls:LSButton x:Name="LoginBtn" Style="{StaticResource FocusableButtonStyle}"
                                         Command="{Binding GoToLogin}"
                                         Content="{Binding Source='h224af12cg943dg40ebg9298g0166926b2f82',Converter={StaticResource TranslatedStringConverter}}"/>
                            <ls:LSButton x:Name="SkipBtn" Margin="180,110,180,0" Style="{StaticResource FocusableButtonStyle}"
                                         Command="{Binding Skip}" HorizontalAlignment="Center" Padding="120,0"
                                         Content="{Binding Source='h566118f2g4237g40e5gbd6agfa6a91271470',Converter={StaticResource TranslatedStringConverter}}"/>
                        </StackPanel>

                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding ShowFirstTimeSetup}" Value="True">
                                <Setter TargetName="SkipBtn" Property="Command" Value="{Binding CustomEvent}"/>
                                <Setter TargetName="SkipBtn" Property="CommandParameter" Value="OpenSensitiveSettings"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                    <ControlTemplate x:Key="CreateAccount">
                        <StackPanel x:Name="ScreenContainer" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                            <b:Interaction.Triggers>
                                <b:DataTrigger Binding="{Binding LastError}" Value="None">
                                    <b:InvokeCommandAction Command="{Binding HideTooltipOnUIElement}" CommandParameter="{Binding ElementName=UsernameEdit}"/>
                                    <b:InvokeCommandAction Command="{Binding HideTooltipOnUIElement}" CommandParameter="{Binding ElementName=ConfirmPasswordEdit}"/>
                                    <b:InvokeCommandAction Command="{Binding HideTooltipOnUIElement}" CommandParameter="{Binding ElementName=TermsCheck}"/>
                                </b:DataTrigger>
                                <b:DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), ElementName=UsernameEdit}" Value="False">
                                    <b:InvokeCommandAction Command="{Binding HideTooltipOnUIElement}" CommandParameter="{Binding ElementName=UsernameEdit}"/>
                                </b:DataTrigger>
                                <b:DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), ElementName=UsernameEdit}" Value="True">
                                    <b:InvokeCommandAction Command="{Binding EnableTooltipOnUIElement}" CommandParameter="{Binding ElementName=UsernameEdit}"/>
                                    <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding ElementName=UsernameEdit}"/>
                                </b:DataTrigger>
                                <b:DataTrigger Binding="{Binding LastError}" Value="UsernameFormat">
                                    <b:InvokeCommandAction Command="{Binding EnableTooltipOnUIElement}" CommandParameter="{Binding ElementName=UsernameEdit}"/>
                                    <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding ElementName=UsernameEdit}"/>
                                </b:DataTrigger>
                                <b:DataTrigger Binding="{Binding LastError}" Value="UsernameExists">
                                    <b:InvokeCommandAction Command="{Binding EnableTooltipOnUIElement}" CommandParameter="{Binding ElementName=UsernameEdit}"/>
                                    <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding ElementName=UsernameEdit}"/>
                                </b:DataTrigger>
                                <b:DataTrigger Binding="{Binding LastError}" Value="ConfirmPassword">
                                    <b:InvokeCommandAction Command="{Binding EnableTooltipOnUIElement}" CommandParameter="{Binding ElementName=ConfirmPasswordEdit}"/>
                                    <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding ElementName=ConfirmPasswordEdit}"/>
                                </b:DataTrigger>
                                <b:DataTrigger Binding="{Binding LastError}" Value="CheckTerms">
                                    <b:InvokeCommandAction Command="{Binding EnableTooltipOnUIElement}" CommandParameter="{Binding ElementName=TermsCheck}"/>
                                    <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding ElementName=TermsCheck}"/>
                                </b:DataTrigger>
                                <!--Password's Text property doesn't get automatically updated from its binding, so we directly update the password when it's cleaned. I do it this way because a normal DataTrigger-Setter on Text removes the Binding for some reason-->
                                <b:DataTrigger Binding="{Binding ConfirmPassword}" Value="">
                                    <b:InvokeCommandAction Command="{Binding ClearPassword, ElementName=ConfirmPasswordEdit}"/>
                                </b:DataTrigger>
                            </b:Interaction.Triggers>
                            <TextBlock x:Name="Title" Style="{StaticResource TitleText}"
                                       Text="{Binding Source='hf88d69ccg846fg41a5g9413gcf6cb09d609b', Converter={StaticResource TranslatedStringConverter}}"/>
                            <TextBlock x:Name="Username" Style="{StaticResource BodyText}"
                                       Text="{Binding Source='hfac7c8f2g905dg470eg9810g70b9a710b585', Converter={StaticResource TranslatedStringConverter}}"/>
                            <ls:LSTextBox x:Name="UsernameEdit" Style="{StaticResource FocusableTextBoxStyle}"
                                          Text="{Binding UserName, Mode=TwoWay}" ProfanityFilter="True">
                                <ls:LSTextBox.ToolTip>
                                    <ls:LSTooltip x:Name="UsernameEditToolTip" CanBePinned="False" Placement="Right" VerticalOffset="-10" HorizontalOffset="100" PlayerId="{Binding Path=DataContext.CurrentPlayer.PlayerId, ElementName=SignUp_c}">
                                        <TextBlock x:Name="UsernameEditToolTipContent" TextAlignment="Left" MaxWidth="800" TextWrapping="Wrap"/>
                                    </ls:LSTooltip>
                                </ls:LSTextBox.ToolTip>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="SignUp_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSTextBox>
                            <Control x:Name="Email" VerticalAlignment="Top" HorizontalAlignment="Stretch" Template="{StaticResource EmailTemplate}"/>
                            <Control x:Name="Password" VerticalAlignment="Top" HorizontalAlignment="Stretch" Template="{StaticResource PasswordTemplate}"/>
                            <TextBlock x:Name="ConfirmPassword" Style="{StaticResource BodyText}"
                                       Text="{Binding Source='hb27434b8gcc29g44b6gbf23g945880c4f859', Converter={StaticResource TranslatedStringConverter}}"/>
                            <ls:LSPasswordBox x:Name="ConfirmPasswordEdit" Style="{StaticResource DefaultSignUpPasswordBoxStyle}"
                                              Text="{Binding ConfirmPassword, Mode=TwoWay}">
                                <ls:LSPasswordBox.ToolTip>
                                    <ls:LSTooltip x:Name="ConfirmPasswordEditToolTip" CanBePinned="False" Placement="Right" VerticalOffset="-10" HorizontalOffset="100" PlayerId="{Binding Path=DataContext.CurrentPlayer.PlayerId, ElementName=SignUp_c}">
                                        <TextBlock x:Name="ConfirmPasswordEditToolTipContent" TextAlignment="Left" MaxWidth="800" TextWrapping="Wrap"/>
                                    </ls:LSTooltip>
                                </ls:LSPasswordBox.ToolTip>
                            </ls:LSPasswordBox>
                            <ls:LSCheckBox x:Name="TermsCheck" Style="{StaticResource DefaultSignUpCheckBoxStyle}"
                                           IsChecked="{Binding CheckTerms}" Command="{Binding ToggleCheckTerms}"
                                           Content="{Binding Source='h69ef4704g3027g4a0egb31ag5016bc528bd4',Converter={StaticResource TranslatedStringConverter}}">
                                <ls:LSCheckBox.ToolTip>
                                    <ls:LSTooltip x:Name="TermsCheckToolTip" CanBePinned="False" Placement="Right" VerticalOffset="-10" HorizontalOffset="100" PlayerId="{Binding Path=DataContext.CurrentPlayer.PlayerId, ElementName=SignUp_c}">
                                        <TextBlock x:Name="TermsCheckToolTipContent" TextAlignment="Left" MaxWidth="800" TextWrapping="Wrap"/>
                                    </ls:LSTooltip>
                                </ls:LSCheckBox.ToolTip>
                            </ls:LSCheckBox>
                            <ls:LSCheckBox x:Name="SubscribeCheck" Style="{StaticResource DefaultSignUpCheckBoxStyle}"
                                           IsChecked="{Binding Subscribe}" Command="{Binding ToggleSubscribe}"
                                           Content="{Binding Source='hcb35a7e4g4ebbg4245gb800g8cddab337d22',Converter={StaticResource TranslatedStringConverter}}"/>
                            <ls:LSButton x:Name="CreateAccountBtn" Style="{StaticResource FocusableButtonStyle}"
                                         Command="{Binding DataContext.CreateAccount, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                         Content="{Binding Source='h7b591ae5g10b0g47deg991bgf3bca82abe96',Converter={StaticResource TranslatedStringConverter}}"/>
                            <Control x:Name="Spinner" VerticalAlignment="Top" HorizontalAlignment="Center" Template="{StaticResource SpinnerTemplate}" Visibility="Collapsed"/>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <Trigger SourceName="UsernameEdit" Property="ls:MoveFocus.IsFocused" Value="True">
                                <Setter TargetName="UsernameEditToolTipContent" Property="Text" Value="{Binding Source='hc030ac78g94cag4c3cgb82egfeb45b5a1304', Converter={StaticResource TranslatedStringConverter}}"/>
                            </Trigger>
                            <DataTrigger Binding="{Binding LastError}" Value="UsernameFormat">
                                <Setter TargetName="UsernameEdit" Property="Template" Value="{StaticResource SignUpTextBoxErrorTemplate}"/>
                                <Setter TargetName="UsernameEditToolTipContent" Property="Text" Value="{Binding Source='hc030ac78g94cag4c3cgb82egfeb45b5a1304', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding LastError}" Value="UsernameExists">
                                <Setter TargetName="UsernameEdit" Property="Template" Value="{StaticResource SignUpTextBoxErrorTemplate}"/>
                                <Setter TargetName="UsernameEditToolTipContent" Property="Text" Value="{Binding Source='h33cf87ecg3494g4420gbfb0g76461b2c48ed', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding LastError}" Value="ConfirmPassword">
                                <Setter TargetName="ConfirmPasswordEdit" Property="Template" Value="{StaticResource SignUpPasswordBoxErrorTemplate}"/>
                                <Setter TargetName="ConfirmPasswordEditToolTipContent" Property="Text" Value="{Binding Source='h59fcc107g7667g4a70gb7dcg8359ef26b9f6', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding LastError}" Value="CheckTerms">
                                <Setter TargetName="TermsCheck" Property="Template" Value="{StaticResource SignUpCheckBoxErrorTemplate}"/>
                                <Setter TargetName="TermsCheckToolTipContent" Property="Text" Value="{Binding Source='h847a3182g6cffg463bga590gb1b57c33a54c', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsWaiting}" Value="True">
                                <Setter TargetName="Spinner" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="CreateAccountBtn" Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                    <ControlTemplate x:Key="Login">
                        <StackPanel x:Name="ScreenContainer" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                            <Image x:Name="LarianLogo" Source="{StaticResource LarianLogo}" Stretch="None" HorizontalAlignment="Center" Margin="0,180,0,10"/>
                            <TextBlock x:Name="Title" Style="{StaticResource TitleText}"
                                       Text="{Binding Source='hb015b40eg3748g4fd3gbc77g92967ec3582e', Converter={StaticResource TranslatedStringConverter}}"/>
                            <Control x:Name="Email" VerticalAlignment="Top" HorizontalAlignment="Stretch" Template="{StaticResource EmailTemplate}">
                                
                            </Control>
                            <Control x:Name="Password" VerticalAlignment="Top" HorizontalAlignment="Stretch" Template="{StaticResource PasswordTemplate}"/>
                            <ls:LSButton x:Name="LoginBtn" Style="{StaticResource FocusableButtonStyle}" Margin="180, 80, 180, 30"
                                         Command="{Binding DataContext.Login, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                         Content="{Binding Source='h224af12cg943dg40ebg9298g0166926b2f82',Converter={StaticResource TranslatedStringConverter}}"/>
                            <Control x:Name="Spinner" VerticalAlignment="Top" HorizontalAlignment="Center" Template="{StaticResource SpinnerTemplate}" Visibility="Collapsed"/>
                            <ls:LSButton x:Name="ForgotPwdBtn" Style="{StaticResource FocusableButtonStyle}" HorizontalAlignment="Center" Margin="180, 200, 180, 0" Padding="40,0"
                                         Command="{Binding DataContext.ForgotPassword, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                         Content="{Binding Source='h238dc92egc516g4566gb9e9gb8731223fa04',Converter={StaticResource TranslatedStringConverter}}"/>
                            <TextBlock x:Name="ForgotPasswordMessage" Style="{StaticResource BodyText}" VerticalAlignment="Top" HorizontalAlignment="Center" Visibility="Collapsed"
                                       Text="{Binding Source='hf62d6904g1afeg4a02g9c5ag20abe4745e56', Converter={StaticResource TranslatedStringConverter}}"/>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding IsWaiting}" Value="True">
                                <Setter TargetName="Spinner" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="LoginBtn" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="ForgotPwdBtn" Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding ShowForgottenPasswordMessage}" Value="True">
                                <Setter TargetName="ForgotPasswordMessage" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="ForgotPwdBtn" Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding LastError}" Value="ForgotMessage">
                                <Setter TargetName="ForgotPasswordMessage" Property="Text" Value="{Binding Source='h52ea6fa7g90d8g47c4g9957g07fda25f6fa1', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                    <ControlTemplate x:Key="TwoFactor">
                        <StackPanel x:Name="ScreenContainer" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                            <b:Interaction.Triggers>
                                <b:DataTrigger Binding="{Binding LastError}" Value="None">
                                    <b:InvokeCommandAction Command="{Binding HideTooltipOnUIElement}" CommandParameter="{Binding ElementName=CodeEdit}"/>
                                </b:DataTrigger>
                                <b:DataTrigger Binding="{Binding LastError}" Value="MFA">
                                    <b:InvokeCommandAction Command="{Binding EnableTooltipOnUIElement}" CommandParameter="{Binding ElementName=CodeEdit}"/>
                                    <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding ElementName=CodeEdit}"/>
                                </b:DataTrigger>
                            </b:Interaction.Triggers>

                            <Image x:Name="LarianLogo" Source="{StaticResource LarianLogo}" Stretch="None" HorizontalAlignment="Center" Margin="0,180,0,10"/>
                            <TextBlock x:Name="Title" Style="{StaticResource TitleText}"
                                       Text="{Binding Source='ha51a57beg4923g4fabga23eg3126d472efd6', Converter={StaticResource TranslatedStringConverter}}"/>
                            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0, 30">
                                <Image x:Name="Bell" Source="{StaticResource SMSBell}" Stretch="None" HorizontalAlignment="Left" Margin="10"/>
                                <TextBlock x:Name="SMS" Style="{StaticResource BodyText}" Margin="0,10"
                                           Text="{Binding Source='h0f722781g29dcg47cfgbaafg33c0698e131e', Converter={StaticResource TranslatedStringConverter}}"/>
                            </StackPanel>
                            <TextBlock x:Name="CodeHeader" Style="{StaticResource BodyText}"
                                       Text="{Binding Source='hc560d851g8d31g4b79ga5cdge370b1d9c88d', Converter={StaticResource TranslatedStringConverter}}"/>
                            <ls:LSTextBox x:Name="CodeEdit" Style="{StaticResource FocusableTextBoxStyle}"
                                          Text="{Binding SMSCode, Mode=TwoWay}">
                                <ls:LSTextBox.ToolTip>
                                    <ls:LSTooltip x:Name="CodeEditToolTip" CanBePinned="False" Placement="Right" VerticalOffset="-10" HorizontalOffset="100" PlayerId="{Binding Path=DataContext.CurrentPlayer.PlayerId, ElementName=SignUp_c}">
                                        <TextBlock x:Name="CodeEditToolTipContent" TextAlignment="Left" MaxWidth="800" TextWrapping="Wrap"/>
                                    </ls:LSTooltip>
                                </ls:LSTextBox.ToolTip>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="SignUp_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSTextBox>
                            <ls:LSButton x:Name="ContinueBtn" Style="{StaticResource FocusableButtonStyle}"
                                         Command="{Binding DataContext.TwoFactorContinue, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                         Content="{Binding Source='h45db0d8cg465fg4c1dg8c21gc894286fa41e',Converter={StaticResource TranslatedStringConverter}}"/>
                            <Control x:Name="Spinner" VerticalAlignment="Top" HorizontalAlignment="Center" Template="{StaticResource SpinnerTemplate}" Visibility="Collapsed"/>
                        </StackPanel>
                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding LastError}" Value="MFA">
                                <Setter TargetName="CodeEdit" Property="Template" Value="{StaticResource SignUpTextBoxErrorTemplate}"/>
                                <Setter TargetName="CodeEditToolTipContent" Property="Text" Value="{Binding Source='h9f6a521fg8870g4005g8710gef05efed2f37', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>
                            <DataTrigger Binding="{Binding IsWaiting}" Value="True">
                                <Setter TargetName="Spinner" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="ContinueBtn" Property="Visibility" Value="Collapsed"/>
                            </DataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>

                    <ControlTemplate x:Key="LoginSuccessful">
                        <StackPanel x:Name="ScreenContainer" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                            <Image x:Name="LarianLogo" Source="{StaticResource LarianLogo}" Stretch="None" HorizontalAlignment="Center" Margin="0,180,0,10"/>
                            <TextBlock x:Name="Title" Style="{StaticResource TitleText}"
                                       Text="{Binding Source='h12f73a3cg7931g4658gaf2cga24899483674', Converter={StaticResource TranslatedStringConverter}}"/>
                            <TextBlock x:Name="Username" Style="{StaticResource BodyText}" FontSize="{StaticResource ScaledIntermediateFontSize}" Foreground="{StaticResource LS_specialTxtColor}"
                                       HorizontalAlignment="Center" Text="{Binding UserName}"/>
                            <ls:LSButton x:Name="ContinueBtn" Style="{StaticResource FocusableButtonStyle}" Margin="180,200,180,0"
                                         Command="{Binding DataContext.CustomEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                         CommandParameter="CloseWidget"
                                         Content="{Binding Source='h45db0d8cg465fg4c1dg8c21gc894286fa41e',Converter={StaticResource TranslatedStringConverter}}">
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="SignUp_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSButton>
                        </StackPanel>
                    </ControlTemplate>

                    <ControlTemplate x:Key="AccountCreated">
                        <StackPanel x:Name="ScreenContainer" VerticalAlignment="Stretch" HorizontalAlignment="Stretch">
                            <Image x:Name="LarianLogo" Source="{StaticResource LarianLogo}" Stretch="None" HorizontalAlignment="Center" Margin="0,180,0,10"/>
                            <TextBlock x:Name="Title" Style="{StaticResource TitleText}"
                                       Text="{Binding Source='h0dc8f947gd342g4444g976bgb0804026c147', Converter={StaticResource TranslatedStringConverter}}"/>
                            <TextBlock x:Name="Description" Style="{StaticResource BodyText}"
                                       ls:TextBlockFormatter.SourceText="{Binding Source='h65f20938g3de0g4700ga713gf080b6c6ba3b',Converter={StaticResource TranslatedStringConverter}}"/>
                            <ls:LSButton x:Name="ContinueBtn" Style="{StaticResource FocusableButtonStyle}" Margin="180,200,180,0"
                                         Command="{Binding DataContext.GoToLogin, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                         Content="{Binding Source='h45db0d8cg465fg4c1dg8c21gc894286fa41e',Converter={StaticResource TranslatedStringConverter}}">
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="Loaded">
                                        <ls:SetMoveFocusAction TargetName="SignUp_c"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSButton>
                        </StackPanel>
                    </ControlTemplate>
                </ResourceDictionary>
            </ControlTemplate.Resources>

            <Grid x:Name="Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ls:TooltipExtender.Owner="{Binding CurrentPlayer.SelectedCharacter}" Background="Black">
                <Image x:Name="Background" Source="{StaticResource BG3Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Stretch="UniformToFill"/>

                <StackPanel x:Name="LegalButtons" VerticalAlignment="Bottom" HorizontalAlignment="Left" Margin="80,0,0,600" Visibility="Collapsed">
                    <ls:LSButton x:Name="PrivacyPolicyBtn" 
                                 Style="{StaticResource FocusableButtonStyle}" 
                                 Margin="10" 
                                 VerticalAlignment="Top" 
                                 HorizontalAlignment="Left"
                                 MinWidth="600"
                                 MaxWidth="1000"
                                 Command="{Binding OpenURLInBrowserCommand}"
                                 CommandParameter="https://larian.com/privacy/"
                                 Content="{Binding Source='heac761eegcce8g442ag85ecg8e4afc61d015',Converter={StaticResource TranslatedStringConverter}}"/>
                    <ls:LSButton x:Name="ToSBtn" 
                                 Style="{StaticResource FocusableButtonStyle}" 
                                 Margin="10" 
                                 VerticalAlignment="Top" 
                                 HorizontalAlignment="Left"
                                 MinWidth="600"
                                 MaxWidth="1000"
                                 Command="{Binding OpenURLInBrowserCommand}"
                                 CommandParameter="https://larian.com/tos/"
                                 Content="{Binding Source='hfaf35985g4e3ag4c70gb53fg90746142e56a',Converter={StaticResource TranslatedStringConverter}}"/>
                </StackPanel>

                <ls:LSNineSliceImage VerticalAlignment="Stretch" HorizontalAlignment="Center" Width="1500" Slices="16,0" ImageSource="{StaticResource PanelBackground}">
                    <Control x:Name="CurrentTab" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                </ls:LSNineSliceImage>

                <Grid x:Name="BottomArea" VerticalAlignment="Bottom" HorizontalAlignment="Stretch">
                    <TextBlock x:Name="RequiredField" HorizontalAlignment="Left" Style="{StaticResource  BodyText}" Visibility="Collapsed" Margin="{StaticResource ButtonHint.Margin.Left}" VerticalAlignment="Bottom"
                               Text="{Binding Source='h7000d355g30c0g425aga3a5gf0b07b6c7d83', Converter={StaticResource TranslatedStringConverter}}" />

                    <StackPanel Orientation="Horizontal" VerticalAlignment="Bottom" HorizontalAlignment="Center">
                        <ls:LSButton x:Name="CancelBackBtn" Style="{StaticResource ControllerButton}" Visibility="Collapsed" Margin="{StaticResource ButtonHint.Margin.Right}" VerticalAlignment="Bottom"
                                     DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancel'}"
                                     Content="{Binding Source='h01d5c470g61bfg498cgb17eg7be425444fa5',Converter={StaticResource TranslatedStringConverter}}"
                                     Command="{Binding DataContext.CancelBack, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}"
                                     SoundID="UI_Shared_Cancel"/>

                        <ls:LSButton x:Name="SelectBtn" Style="{StaticResource ControllerButton}" Visibility="Collapsed" TapTime="{StaticResource DefaultButtonTapTime}" Margin="{StaticResource ButtonHint.Margin}" VerticalAlignment="Bottom"
                                     DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
                                     Content="{Binding Source='hd0c08193ga7f2g4a7eg8225g63748c7b3096',Converter={StaticResource TranslatedStringConverter}}"
                                     Command="{Binding Path=FocusedElement.Command ,ElementName=SignUp_c}" 
                                     CommandParameter="{Binding Path=FocusedElement.CommandParameter ,ElementName=SignUp_c}"/>
                    </StackPanel>
                </Grid>

                <Grid x:Name="NoInternet" IsHitTestVisible="True" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Visibility="Collapsed">
                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="IsVisibleChanged">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding Visibility, ElementName=NoInternet}" Operator="Equal" RightOperand="{x:Static Visibility.Visible}"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <ls:SetMoveFocusAction TargetName="SignUp_c"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>

                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Top" Width="1800" Margin="0,400,0,0">
                        <StackPanel.Background>
                            <SolidColorBrush Color="Black" Opacity="0.95"/>
                        </StackPanel.Background>
                        <TextBlock x:Name="Title" Style="{StaticResource TitleText}" Margin="100,200,100,200" HorizontalAlignment="Stretch"
                                   Text="{Binding Source='h4c6a6f55gbb78g4a76g928cg77e6d9944abb', Converter={StaticResource TranslatedStringConverter}}"/>
                        <ls:LSButton x:Name="TryAgainBtn" Style="{StaticResource FocusableButtonStyle}" HorizontalAlignment="Center" Margin="100,60"
                                     MinWidth="800"
                                     Command="{Binding DataContext.InternetConnectionTryAgain, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                     Content="{Binding Source='h0ab67992g5f7cg4402gbd1dg07ea74fa5309',Converter={StaticResource TranslatedStringConverter}}"/>
                        <ls:LSButton x:Name="BackBtn" Style="{StaticResource FocusableButtonStyle}" HorizontalAlignment="Center" Margin="0,60, 0, 500" Padding="30,0"
                                     Command="{Binding DataContext.CancelBack, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                     Content="{Binding Source='h9d3b37a6gf7e3g40a8g87d3g21b1d1732512',Converter={StaticResource TranslatedStringConverter}}"/>
                    </StackPanel>
                </Grid>
            </Grid>

            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding CurrentScreen}" Value="LarianAccount">
                    <Setter TargetName="SelectBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="CancelBackBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="CurrentTab" Property="Template" Value="{StaticResource LarianAccount}"/>
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentScreen}" Value="LarianAccount"/>
                        <Condition Binding="{Binding ShowFirstTimeSetup}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="CancelBackBtn" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding CurrentScreen}" Value="CreateAccount">
                    <Setter TargetName="SelectBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="RequiredField" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="CancelBackBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="LegalButtons" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="CurrentTab" Property="Template" Value="{StaticResource CreateAccount}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentScreen}" Value="Login">
                    <Setter TargetName="SelectBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="RequiredField" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="CancelBackBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="CurrentTab" Property="Template" Value="{StaticResource Login}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentScreen}" Value="TwoFactor">
                    <Setter TargetName="SelectBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="RequiredField" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="CancelBackBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="CurrentTab" Property="Template" Value="{StaticResource TwoFactor}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentScreen}" Value="LoginSuccessful">
                    <Setter TargetName="SelectBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="SelectBtn" Property="Margin" Value="0,0,40,20"/>
                    <Setter TargetName="CurrentTab" Property="Template" Value="{StaticResource LoginSuccessful}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentScreen}" Value="AccountCreated">
                    <Setter TargetName="SelectBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="SelectBtn" Property="Margin" Value="0,0,40,40"/>
                    <Setter TargetName="CurrentTab" Property="Template" Value="{StaticResource AccountCreated}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding InternetConnection}" Value="False">
                    <Setter TargetName="NoInternet" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="CurrentTab" Property="IsEnabled" Value="False"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Template>
    <b:Interaction.Triggers>
        <b:EventTrigger EventName="MoveFocusUp">
            <ls:LSPlaySound Sound="UI_Shared_Hover" />
        </b:EventTrigger>

        <b:EventTrigger EventName="MoveFocusDown">
            <ls:LSPlaySound Sound="UI_Shared_Hover" />
        </b:EventTrigger>
    </b:Interaction.Triggers>
</ls:UIWidget>
