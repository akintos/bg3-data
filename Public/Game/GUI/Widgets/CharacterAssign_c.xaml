<ls:UIWidget x:Name="CharacterAssign_c"
             ls:UIWidget.ContextName="CharacterAssign"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d"
             Focusable="False"
             d:DesignHeight="2160" d:DesignWidth="3840"
             d:DataContext="{d:DesignInstance {x:Type ls:DCCharacterAssign}, IsDesignTimeCreatable=True}"
             FocusLeft="UILeft" FocusRight="UIRight" FocusUp="UIUp" FocusDown="UIDown" ls:MoveFocus.FocusMovementMode="Closest" CanCacheFocusSurroundingElements="False">

    <ls:UIWidget.Template>
        <ControlTemplate TargetType="ls:UIWidget">
            <ControlTemplate.Resources>
                <ResourceDictionary>
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="pack://application:,,,/GustavNoesisGUI;component/Library/LobbyTemplates_c.xaml"/>
                        <ResourceDictionary Source="pack://application:,,,/GustavNoesisGUI;component/Library/NewOptionTemplates_c.xaml"/>
                    </ResourceDictionary.MergedDictionaries>

                    <BitmapImage x:Key="EnabledArrow" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_carousel_arrow_d.png"/>
                    <BitmapImage x:Key="DisabledArrow" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Lobby_c/c_lobby_arrow_d.png"/>
                    <BitmapImage x:Key="EmptyCharacter" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Lobby_c/c_lobby_characterSlotBG.png"/>

                    <Style x:Key="CharacterSlotStyle" TargetType="ContentPresenter">
                        <Setter Property="Focusable" Value="True"/>
                        <Setter Property="ls:MoveFocus.Focusable" Value="True"/>
                        <Setter Property="DockPanel.Dock" Value="Bottom"/>
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                        <Setter Property="Margin" Value="0,10"/>
                        <Setter Property="ContentTemplate">
                            <Setter.Value>
                                <DataTemplate DataType="{x:Type ls:VMCharacterAssignCharacterSlot}">
                                    <StackPanel Orientation="Horizontal">
                                        <Image x:Name="ArrowLeft" Source="{StaticResource EnabledArrow}" VerticalAlignment="Center" Margin="0,0,56,0" Stretch="None" Visibility="Hidden">
                                            <Image.RenderTransform>
                                                <ScaleTransform ScaleX="-1" CenterX="40"/>
                                            </Image.RenderTransform>
                                        </Image>

                                        <ContentControl x:Name="CharBtn" Style="{StaticResource FocusableContentControlStyle}" Focusable="False" ls:MoveFocus.Focusable="False" Width="196" Height="278">
                                            <Grid>
                                                <ls:LSNineSliceImage x:Name="IconContainer" HorizontalAlignment="Center"
                                                                     ImageSource="{StaticResource EmptyCharacter}" Slices="24,24,24,24" Width="186" Height="264">
                                                    <Canvas x:Name="CharacterPortrait" Background="{Binding Character.Icon}" Width="138" Height="216" Visibility="Hidden"/>
                                                </ls:LSNineSliceImage>
                                                <Control x:Name="MoveCharHint" VerticalAlignment="Center" HorizontalAlignment="Center" Width="{StaticResource ScaledControllerHintSize}" Height="{StaticResource ScaledControllerHintSize}" Visibility="Collapsed"
                                                         DataContext="{Binding DataContext.CurrentPlayer.UIData.InputEvents, ElementName=CharacterAssign_c, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIMoveChar'}"
                                                         Template="{StaticResource ControllerButton.ImageSwitcher}"/>
                                            </Grid>
                                        </ContentControl>

                                        <Image x:Name="ArrowRight" Source="{StaticResource EnabledArrow}" VerticalAlignment="Center" Margin="42,0,8,0" Stretch="None" Visibility="Hidden"/>
                                        <b:Interaction.Triggers>
                                            <b:DataTrigger Value="True">
                                                <b:DataTrigger.Binding>
                                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                                        <Binding Path="DataContext.SelectedCharacterSlot" ElementName="CharacterAssign_c"/>
                                                        <Binding Path="."/>
                                                    </MultiBinding>
                                                </b:DataTrigger.Binding>
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding DataContext.SelectedCharacterSlot, ElementName=CharacterAssign_c, Converter={StaticResource NullToBoolFalseConverter}}" Operator="Equal" RightOperand="True"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <ls:SetMoveFocusAction TargetName="CharacterAssign_c" FocusElement="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContentPresenter}}"/>
                                            </b:DataTrigger>
                                            <b:DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ContentPresenter}}" Value="True">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding DataContext.SelectedCharacterSlot, ElementName=CharacterAssign_c, Converter={StaticResource NullToBoolFalseConverter}}" Operator="Equal" RightOperand="True"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:InvokeCommandAction Command="{Binding DataContext.SelectCharacterCommand.ActionCommand, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}}"
                                                                       CommandParameter="{Binding .}"/>
                                            </b:DataTrigger>
                                        </b:Interaction.Triggers>
                                    </StackPanel>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding ., Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                                            <Setter TargetName="CharacterPortrait" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="IconContainer" Property="ImageSource" Value="{StaticResource LobbyPortraitFrame}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), RelativeSource={RelativeSource Mode=Self}}" Value="True">
                                            <Setter TargetName="IconContainer" Property="ImageSource" Value="{StaticResource LobbyPortraitFrameSelected}"/>
                                            <Setter TargetName="CharBtn" Property="ls:MoveFocus.IsFocused" Value="True"/>
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Value="True">
                                                    <Condition.Binding>
                                                        <MultiBinding Converter="{StaticResource EqualConverter}">
                                                            <Binding Path="DataContext.SelectedCharacterSlot" ElementName="CharacterAssign_c"/>
                                                            <Binding Path="."/>
                                                        </MultiBinding>
                                                    </Condition.Binding>
                                                </Condition>
                                                <Condition Binding="{Binding ., Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="IconContainer" Property="ImageSource" Value="{StaticResource LobbyPortraitFrameSelected}"/>
                                            <Setter TargetName="ArrowLeft" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="ArrowRight" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="MoveCharHint" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="CharBtn" Property="ls:MoveFocus.IsFocused" Value="True"/>
                                        </MultiDataTrigger>
                                        <DataTrigger Binding="{Binding DataContext.CanMoveSelectedCharacterLeft, ElementName=CharacterAssign_c}" Value="False">
                                            <Setter TargetName="ArrowLeft" Property="Source" Value="{StaticResource DisabledArrow}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding DataContext.CanMoveSelectedCharacterRight, ElementName=CharacterAssign_c}" Value="False">
                                            <Setter TargetName="ArrowRight" Property="Source" Value="{StaticResource DisabledArrow}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding DataContext.CurrentPlayer.UIData.CharacterCreationMode, ElementName=CharacterAssign_c}" Value="Creation">
                                            <!-- Do NOT show assigned characters in CC -->
                                            <Setter TargetName="IconContainer" Property="ImageSource" Value="{StaticResource EmptyCharacter}"/>
                                            <Setter TargetName="CharacterPortrait" Property="Visibility" Value="Collapsed"/>
                                            <Setter TargetName="ArrowLeft" Property="Visibility" Value="Collapsed"/>
                                            <Setter TargetName="ArrowRight" Property="Visibility" Value="Collapsed"/>
                                            <Setter Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </Setter.Value>
                        </Setter>
                        <Style.Triggers>
                            <Trigger Property="Content" Value="{x:Null}">
                                <Setter Property="Focusable" Value="False"/>
                                <Setter Property="ls:MoveFocus.Focusable" Value="False"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ResourceDictionary>
            </ControlTemplate.Resources>

            <Grid x:Name="GridRoot" Background="{StaticResource LS_PanelBackground}">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition/>
                    <RowDefinition x:Name="BottomButtonsRow" Height="Auto"/>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="WidgetLeftColumn" Width="700"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition x:Name="WidgetRightColumn" Width="700"/>
                </Grid.ColumnDefinitions>

                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Loaded">
                        <ls:SetMoveFocusAction TargetName="CharacterAssign_c"/>
                    </b:EventTrigger>
                    <b:DataTrigger Binding="{Binding SelectedCharacterSlot, Converter={StaticResource NullToBoolFalseConverter}}" Value="False">
                        <ls:SetMoveFocusAction TargetName="CharacterAssign_c"/>
                    </b:DataTrigger>
                </b:Interaction.Triggers>

                <!-- Background -->
                <Image x:Name="Bg" Grid.Row="0" Grid.Column="0" Grid.RowSpan="5" Grid.ColumnSpan="3" Source="{StaticResource OptionsBackground}" VerticalAlignment="Top" HorizontalAlignment="Center" Stretch="Uniform" StretchDirection="UpOnly" />

                <TextBlock x:Name="Title" Grid.Row="0" Grid.Column="1" FontSize="{StaticResource ScaledTitleFontSize}" Foreground="{StaticResource LS_tint100}"
                           HorizontalAlignment="Center" TextAlignment="Center" Margin="10,60,10,10" Text="{Binding Source='h6f7cfd79ga91eg4db4g9440gbfb9be43f9ca', Converter={StaticResource TranslatedStringConverter}}"/>

                <TextBlock x:Name="Description" Grid.Row="1" Grid.Column="1" FontSize="{StaticResource ScaledDefaultFontSize}" Foreground="{StaticResource LS_baseTxtColor}"
                           HorizontalAlignment="Center" TextAlignment="Center" TextWrapping="Wrap" Margin="10"
                           Text="{Binding Source='h6ef4c690g9d9dg42acg90dfgfad99e0f42c2', Converter={StaticResource TranslatedStringConverter}}"/>

                <Viewbox Grid.Row="2" Grid.Column="1" StretchDirection="DownOnly" Margin="16">
                    <ItemsControl x:Name="Slots" Margin="0,10" HorizontalAlignment="Center" ItemsSource="{Binding PlayerSlots}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="ls:VMCharacterAssignPlayerSlot">
                                <Border x:Name="Root" Style="{StaticResource PanelBorderStyle}" Width="460" VerticalAlignment="Stretch" Margin="10"
                                        Tag="{Binding DataContext.SelectedCharacterSlot, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=ls:UIWidget}, Converter={StaticResource NullToBoolTrueConverter}}">
                                    <DockPanel VerticalAlignment="Stretch" HorizontalAlignment="Stretch" LastChildFill="False" Margin="0,-38,0,10">
                                        <Control x:Name="PlayerImage" DockPanel.Dock="Top" Template="{StaticResource PlayerImageTemplate}"
                                                 Focusable="{Binding ElementName=Root, Path=Tag}" ls:MoveFocus.Focusable="{Binding ElementName=Root, Path=Tag}"/>

                                        <ContentPresenter x:Name="Character3" Content="{Binding AssignedCharacters[3]}" Style="{StaticResource CharacterSlotStyle}"/>
                                        <ContentPresenter x:Name="Character2" Content="{Binding AssignedCharacters[2]}" Style="{StaticResource CharacterSlotStyle}"/>
                                        <ContentPresenter x:Name="Character1" Content="{Binding AssignedCharacters[1]}" Style="{StaticResource CharacterSlotStyle}"/>
                                        <ContentPresenter x:Name="Character0" Content="{Binding AssignedCharacters[0]}" Style="{StaticResource CharacterSlotStyle}"/>
                                    </DockPanel>
                                </Border>
                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding (ls:MoveFocus.IsFocused), ElementName=PlayerImage}" Value="True">
                                        <Setter TargetName="Root" Property="BorderBrush" Value="{StaticResource LS_PanelSelectedBorder}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding HasPlayer}" Value="False">
                                        <Setter TargetName="PlayerImage" Property="Focusable" Value="False"/>
                                        <Setter TargetName="PlayerImage" Property="ls:MoveFocus.Focusable" Value="False"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding DataContext.Layout, ElementName='CharacterAssign_c'}" Value="Common">
                                        <Setter TargetName="Root" Property="Margin" Value="10"/>
                                        <Setter TargetName="Root" Property="Width" Value="480"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>
                </Viewbox>

                <!-- Bottom section-->
                <ls:AlignableWrapPanel x:Name="LobbyBottomButtons" Grid.Row="3" Grid.Column="0" Grid.ColumnSpan="3" Style="{StaticResource ButtonHint.Container.CenterWrap}" VerticalAlignment="Top" >
                    <ls:LSButton x:Name="SelectBtn" Focusable="False" BoundEvent="UIAccept" VerticalAlignment="Bottom"
                                 Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
                                 Tag="{Binding Source='h3b2e74b1g38ffg4109g9f13gfefb9cb0b79d',Converter={StaticResource TranslatedStringConverter}}"
                                 ContentTemplate="{StaticResource ControllerButtonHint}"
                                 Command="{Binding ViewProfile}"
                                 CommandParameter="{Binding Path=FocusedElement.DataContext, ElementName=CharacterAssign_c}"
                                 SoundID="UI_Shared_Accept"/>
                    <ls:LSButton x:Name="InviteBtn" Focusable="False" BoundEvent="UICreate" VerticalAlignment="Bottom"
                                 Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICreate'}"
                                 Tag="{Binding Source='h5bacb1e0geecag4473g9aa1g3f3ed207377e',Converter={StaticResource TranslatedStringConverter}}"
                                 ContentTemplate="{StaticResource ControllerButtonHint}"
                                 Command="{Binding InvitePlayer}"/>
                    <ls:LSButton x:Name="KickBtn" Style="{StaticResource ControllerHoldButtonStyle}" Focusable="False" VerticalAlignment="Bottom"
                                 Visibility="Collapsed" IsEnabled="False"
                                 DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIKickPlayer'}"
                                 Tag="{Binding Source='h0487803bgd9e5g4e29gbcf3gfefce7a32e52',Converter={StaticResource TranslatedStringConverter}}"
                                 Command="{Binding DataContext.KickPlayer, ElementName=CharacterAssign_c}"
                                 CommandParameter="{Binding Path=FocusedElement.DataContext.Player, ElementName=CharacterAssign_c}"/>
                    <ls:LSButton x:Name="MuteBtn" Focusable="False" BoundEvent="UIMutePlayer" VerticalAlignment="Bottom"
                                 Visibility="Collapsed" IsEnabled="False"
                                 Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIMutePlayer'}"
                                 Tag="{Binding Source='hcb913d85g7404g4f40gbda7g914ee60b0008',Converter={StaticResource TranslatedStringConverter}}"
                                 ContentTemplate="{StaticResource ControllerButtonHint}"
                                 Command="{Binding ToggleMuteCommand}"
                                 CommandParameter="{Binding Path=FocusedElement.DataContext, ElementName=CharacterAssign_c}"/>
                    <ls:LSButton x:Name="EditBtn" Focusable="False" BoundEvent="ToggleInGameMenu" VerticalAlignment="Bottom"
                                 Visibility="Collapsed" IsEnabled="False"
                                 Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='ToggleInGameMenu'}"
                                 Tag="{Binding Source='h79e25b8eg922dg421egbb45gf52e3f0273ba',Converter={StaticResource TranslatedStringConverter}}"
                                 ContentTemplate="{StaticResource ControllerButtonHint}"
                                 Command="{Binding ConnectivityMenuOpenCommand}"/>
                    <ls:LSButton x:Name="MoveCharBtn" Focusable="False" BoundEvent="UIMoveChar" VerticalAlignment="Bottom" EatInput="False"
                                 Visibility="Collapsed" IsEnabled="False"
                                 Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIMoveChar'}"
                                 Tag="{Binding Source='h8d686cffg5d06g4d96g8e59geeccd1024436',Converter={StaticResource TranslatedStringConverter}}"
                                 ContentTemplate="{StaticResource ControllerButtonHint}"/>
                    <ls:LSButton x:Name="BackCancelBtn" Focusable="False" BoundEvent="UICancel" VerticalAlignment="Bottom"
                                 Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancel'}"
                                 Tag="{Binding Source='h9d3b37a6gf7e3g40a8g87d3g21b1d1732512',Converter={StaticResource TranslatedStringConverter}}"
                                 ContentTemplate="{StaticResource ControllerButtonHint}"
                                 Command="{Binding Back}"
                                 SoundID="UI_Shared_Cancel"/>
                </ls:AlignableWrapPanel>

                <ls:LSInputBinding x:Name="MoveCharacterRight" BoundEvent="UIRight" TriggerOnRelease="True"
                                   IsEnabled="{Binding SelectedCharacterSlot, Converter={StaticResource NullToBoolFalseConverter}}"
                                   Command="{Binding DataContext.MoveSelectedRightCommand.ActionCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                <ls:LSInputBinding x:Name="MoveCharacterLeft" BoundEvent="UILeft" TriggerOnRelease="True"
                                   IsEnabled="{Binding SelectedCharacterSlot, Converter={StaticResource NullToBoolFalseConverter}}"
                                   Command="{Binding DataContext.MoveSelectedLeftCommand.ActionCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>

            </Grid>
            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding Layout}" Value="Left">
                    <Setter TargetName="WidgetLeftColumn" Property="Width" Value="0"/>
                    <Setter TargetName="WidgetRightColumn" Property="Width" Value="0"/>
                    <Setter TargetName="BottomButtonsRow" Property="MinHeight" Value="248"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Layout}" Value="Right">
                    <Setter TargetName="WidgetLeftColumn" Property="Width" Value="0"/>
                    <Setter TargetName="WidgetRightColumn" Property="Width" Value="0"/>
                    <Setter TargetName="BottomButtonsRow" Property="MinHeight" Value="248"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding IsHost}" Value="True">
                    <Setter TargetName="KickBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="KickBtn" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="MuteBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="MuteBtn" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="EditBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="EditBtn" Property="IsEnabled" Value="True"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding FocusedElement.DataContext.IsCurrentPlayer, ElementName=CharacterAssign_c, FallbackValue=False}" Value="True">
                    <Setter TargetName="KickBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="KickBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding FocusedElement.DataContext.Player, Converter={StaticResource NullToBoolTrueConverter}, ElementName=CharacterAssign_c, FallbackValue=True}" Value="True">
                    <Setter TargetName="SelectBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="SelectBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="KickBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="KickBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="MuteBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="MuteBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding FocusedElement.DataContext.Player.IsLocalPlayer, ElementName=CharacterAssign_c, FallbackValue=True}" Value="True">
                    <Setter TargetName="KickBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="KickBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="MuteBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="MuteBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Data.IsMultiplayerAllowed}" Value="False">
                    <Setter TargetName="SelectBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="SelectBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="InviteBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="InviteBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="EditBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="EditBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="KickBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="KickBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="MuteBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="MuteBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="Description" Property="Text" Value="{Binding Source='h996ecd7fgf595g43bagaa5fg141ebb10a8a3', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding Data.LobbyVisibility}" Value="Offline">
                    <Setter TargetName="InviteBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="InviteBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding FocusedElement.DataContext.Character, Converter={StaticResource NullToBoolFalseConverter}, ElementName=CharacterAssign_c, FallbackValue=False}" Value="True">
                    <Setter TargetName="SelectBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="SelectBtn" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="SelectBtn" Property="Tag" Value="{Binding Source='h8d686cffg5d06g4d96g8e59geeccd1024436',Converter={StaticResource TranslatedStringConverter}}"/>
                    <Setter TargetName="SelectBtn" Property="Command" Value="{Binding SelectCharacterCommand.ActionCommand}"/>
                    <Setter TargetName="SelectBtn" Property="CommandParameter" Value="{Binding FocusedElement.DataContext, ElementName=CharacterAssign_c}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding PlayerSlots.Count}" Value="1">
                    <Setter TargetName="SelectBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="SelectBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding SelectedCharacterSlot, Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                    <Setter TargetName="SelectBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="SelectBtn" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="SelectBtn" Property="Tag" Value="{Binding Source='h7a174735g0099g4ca9ga1f7ga53ad66b1aa4',Converter={StaticResource TranslatedStringConverter}}"/>
                    <Setter TargetName="SelectBtn" Property="Command" Value="{Binding ConfirmChangesCommand.ActionCommand}"/>
                    <Setter TargetName="SelectBtn" Property="CommandParameter" Value="DontClose"/>
                    <Setter TargetName="InviteBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="InviteBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="EditBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="EditBtn" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="MoveCharBtn" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="MoveCharBtn" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="BackCancelBtn" Property="Tag" Value="{Binding Source='h01d5c470g61bfg498cgb17eg7be425444fa5',Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Template>

    <b:Interaction.Triggers>
        <b:EventTrigger EventName="MoveFocusUp">
            <ls:LSPlaySound Sound="UI_Shared_Hover" />
        </b:EventTrigger>

        <b:EventTrigger EventName="MoveFocusDown">
            <ls:LSPlaySound Sound="UI_Shared_Hover" />
        </b:EventTrigger>

        <b:EventTrigger EventName="MoveFocusLeft">
            <ls:LSPlaySound Sound="UI_Shared_Hover" />
        </b:EventTrigger>

        <b:EventTrigger EventName="MoveFocusRight">
            <ls:LSPlaySound Sound="UI_Shared_Hover" />
        </b:EventTrigger>
    </b:Interaction.Triggers>
</ls:UIWidget>
