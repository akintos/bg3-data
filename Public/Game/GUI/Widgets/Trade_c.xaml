<ls:UIWidget x:Name="Trade_c"
             ls:UIWidget.ContextName="Trade"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
    		 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
			 mc:Ignorable="d"
             IsHitTestVisible="False"
             d:DesignWidth="3840" d:DesignHeight="2160"
             ls:UIWidget.Focusable="False"
             FocusDown="UIDown" FocusLeft="UILeft" FocusRight="UIRight" FocusUp="UIUp"
             CanCacheFocusSurroundingElements="False"
             ls:MoveFocus.FocusMovementMode="MainAxisTunnel"
             d:DataContext="{d:DesignInstance Type=ls:DCTrade}" ls:TooltipExtender.Owner="{Binding CurrentPlayer.SelectedCharacter}">

    <ls:UIWidget.Resources>

        <!--overriding these to keep the old sizes since this ui doesn't support cell scaling yet-->
        <System:Double x:Key="ScaledNewItemIconSize">94</System:Double>
        <System:Double x:Key="ScaledNewItemIconSizeHighlight">96</System:Double>
        <System:Double x:Key="ScaledNewSlotSize">104</System:Double>

        <BitmapImage x:Key="SideArrowChunky" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CC_c/c_ico_arrow_chunky.png"/>
        <BitmapImage x:Key="CarouselBottomImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel_c/c_topNav_bar.png"/>
        <BitmapImage x:Key="ConfirmBarterBackgroundImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_primaryButtonBG.png"/>
        <BitmapImage x:Key="TradeBackgroundBrush" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_standardPanelBG.png" />
        <BitmapImage x:Key="BarterBackgroundBrush" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_offerPanelBG.png" />
        <BitmapImage x:Key="BackgroundHeader" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_inventoryButton.png"/>
        <BitmapImage x:Key="HeaderArrowCollapsed" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_arrowCollapsed_d.png"/>
        <ImageBrush x:Key="GridBackgroundBrush" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_frame_grid116.png" TileMode="Tile" Stretch="Uniform" ViewportUnits="Absolute" Viewport="0,0,240,240"  />

        <System:Double x:Key="HeaderWidthFullscreen">2844</System:Double>
        <System:Double x:Key="HeaderWidthSplitscreen">1852</System:Double>
        <System:Double x:Key="ItemIconSize">104</System:Double>
        <System:Double x:Key="ScrollViewerHeight">1324</System:Double>
        <System:Double x:Key="ScrollViewerShorterHeight">1100</System:Double>

        <Thickness x:Key="HeaderPortraitLeftSideMagin">8,0,0,0</Thickness>
        <Thickness x:Key="HeaderPortraitRightSideMagin">0,0,0,0</Thickness>
        <Thickness x:Key="HeaderTextRightSideMagin">0,0,8,0</Thickness>

        <LinearGradientBrush x:Key="TradeGridOpacityMask" StartPoint="0,0" EndPoint="0,1">
            <GradientStop Color="#FFFFFFFF" Offset="0.95"/>
            <GradientStop Color="#00FFFFFF" Offset="1"/>
        </LinearGradientBrush>

        <ControlTemplate x:Key="FilterContainerTemplate" TargetType="ContentControl">
            <ControlTemplate.Resources>
                <BitmapImage x:Key="FiltersBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel_c/c_equipmentSelectionGrid_filtersBG.png" />
                <BitmapImage x:Key="ProficiencyOff" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel_c/c_ico_proficiencyFilter_off.png" />
                <BitmapImage x:Key="ProficiencyOn" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel_c/c_ico_proficiencyFilter_on.png" />
                <BitmapImage x:Key="Divider" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel_c/c_equipmentSelectionGrid_filters_divider.png" />
                <BitmapImage x:Key="PartyOff" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel_c/c_ico_partyFilter_off.png" />
                <BitmapImage x:Key="PartyOn" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/CharacterPanel_c/c_ico_partyFilter_on.png" />
            </ControlTemplate.Resources>

            <ls:LSNineSliceImage ImageSource="{StaticResource FiltersBg}" Slices="42" MaxHeight="92" Padding="-12,0" HorizontalAlignment="Right">
                <StackPanel Orientation="Horizontal" HorizontalAlignment="Right">
                    <Image x:Name="ProficiencyIndicator" Source="{StaticResource ProficiencyOff}" Stretch="None" VerticalAlignment="Center" Margin="32,0,0,0" Visibility="Collapsed"/>

                    <Image x:Name="ProficiencySeparator" Source="{StaticResource Divider}" Stretch="None" VerticalAlignment="Center" Margin="8,0" Visibility="{Binding Visibility, ElementName=ProficiencyIndicator}"/>

                    <Image x:Name="PartyIndicator" Source="{StaticResource PartyOff}" Stretch="None" VerticalAlignment="Center" Margin="32,0,0,0"/>

                    <Image Source="{StaticResource Divider}" Stretch="None" VerticalAlignment="Center" Margin="8,0" Visibility="{Binding Visibility, ElementName=FilterNameText}"/>

                    <TextBlock x:Name="FilterNameText" Text="{Binding DataContext.CurrentInventoryTab.Name.Str, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" VerticalAlignment="Center" FontSize="{StaticResource ScaledSmallishFontSize}" Visibility="{Binding DataContext.CurrentInventoryTab.Name.Str, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}"/>

                    <ContentPresenter Margin="-8,0,0,0" VerticalAlignment="Center"/>
                </StackPanel>
            </ls:LSNineSliceImage>

            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding UseProficiencyFilter}" Value="True">
                    <Setter TargetName="ProficiencyIndicator" Property="Source" Value="{StaticResource ProficiencyOn}"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding UsePartyInventory}" Value="True">
                    <Setter TargetName="PartyIndicator" Property="Source" Value="{StaticResource PartyOn}"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding Converter={StaticResource TypeConverter}}" Value="ls.VMEquipment">
                    <Setter TargetName="ProficiencyIndicator" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="PartyIndicator" Property="Margin" Value="0"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <Style x:Key="TradeDefaultFontStyle" TargetType="TextBlock" BasedOn="{StaticResource baseStyle}">
            <Style.Resources>
                <Style TargetType="ls:LSSpan" BasedOn="{StaticResource {x:Type ls:LSSpan}}">
                    <Style.Triggers>
                        <Trigger Property="TagType" Value="hl">
                            <Setter Property="Foreground" Value="{StaticResource LS_accent75TxtColor}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Style.Resources>
            <Setter Property="FontSize" Value="{StaticResource ScaledIntermediateFontSize}" />
            <Setter Property="Foreground" Value="{StaticResource LS_extraspecialTxtColor}" />
            <Setter Property="VerticalAlignment" Value="Center"/>
            <Setter Property="TextWrapping" Value="Wrap"/>
        </Style>

        <Style x:Key="TradeScoreModifierFontStyle" TargetType="TextBlock" BasedOn="{StaticResource TradeDefaultFontStyle}">
            <Setter Property="Foreground" Value="{StaticResource LS_accent75TxtColor}" />
            <Setter Property="FontWeight" Value="DemiBold"/>
            <Setter Property="Margin" Value="8,0,0,0"/>
        </Style>

        <Storyboard x:Key="ShowInventoryFilterAnimation">
            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="InventoryFilter">
                <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
            </ObjectAnimationUsingKeyFrames>
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="InventoryFilter">
                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="1"/>
            </DoubleAnimationUsingKeyFrames>
        </Storyboard>

        <Storyboard x:Key="HideInventoryFilterAnimation">
            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="InventoryFilter">
                <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                <EasingDoubleKeyFrame KeyTime="0:0:0.1" Value="0"/>
            </DoubleAnimationUsingKeyFrames>
            <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="InventoryFilter">
                <DiscreteObjectKeyFrame KeyTime="0:0:0.1" Value="{x:Static Visibility.Collapsed}"/>
            </ObjectAnimationUsingKeyFrames>
        </Storyboard>

        <ControlTemplate x:Key="PortraitTemplate">
            <ControlTemplate.Resources>
                <ImageSource x:Key="FrameImage">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/character_image_frame.png</ImageSource>
            </ControlTemplate.Resources>
            <Grid VerticalAlignment="Bottom">
                <!-- Portrait, fitted into frame -->
                <Path Stretch="None" VerticalAlignment="Center" HorizontalAlignment="Center" Width="134" Height="200" Fill="{Binding Icon}" RenderTransformOrigin="0.5,0.534">
                    <Path.Data>
                        <Geometry >M0,27 A90,90 0 0 1 27,0 H105 A90,90 0 0 1 134,27 V171 A90,90 0 0 1 105,200 H27 A90,90 0 0 1 0,171 V42 Z</Geometry>
                    </Path.Data>
                </Path>

                <!-- Frame -->
                <Image Stretch="None" Source="{StaticResource FrameImage}"/>
            </Grid>
        </ControlTemplate>

        <DataTemplate x:Key="GoldDisplay">
            <DataTemplate.Resources>
                <ImageSource x:Key="GoldIcon">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_gold.png</ImageSource>
            </DataTemplate.Resources>
            <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Focusable="False" Height="80">
                <Image VerticalAlignment="Center" Source="{StaticResource GoldIcon}" Stretch="None"/>
                <TextBlock Text="{Binding Path=Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" 
                           Foreground="{StaticResource LS_specialTxtColor}" 
                           Style="{StaticResource TradeDefaultFontStyle}"
                           FontSize="{StaticResource ScaledLargeFontSize}"
                           Margin="0,-4,0,0"/>
            </StackPanel>
        </DataTemplate>

        <ControlTemplate x:Key="HoveredItemInfoTemplate">
            <ControlTemplate.Resources>
                <ImageSource x:Key="BackgroundImg">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_labelHolder.png</ImageSource>
            </ControlTemplate.Resources>

            <Grid x:Name="root" Visibility="Hidden" Focusable="False">
                <Image Source="{StaticResource BackgroundImg}" Stretch="None"/>
                <StackPanel Orientation="Horizontal" VerticalAlignment="Center" HorizontalAlignment="Center">
                    <TextBlock Text="{Binding Path=FocusedElement.DataContext.Name, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Style="{StaticResource TradeDefaultFontStyle}" TextTrimming="CharacterEllipsis" MaxWidth="1000" MaxHeight="100"/>
                    <TextBlock Text="~" Style="{StaticResource TradeDefaultFontStyle}" Margin="16,0,8,0"/>
                    <ContentPresenter ContentTemplate="{StaticResource GoldDisplay}" Content="{Binding FocusedElement.DataContext.TradePrice, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, StringFormat={}{0:N0}}" HorizontalAlignment="Right"/>
                </StackPanel>
            </Grid>

            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding FocusedElement.DataContext, Converter={StaticResource TypeConverter}, ElementName=Trade_c}" Value="ls.VMItem">
                    <Setter TargetName="root" Property="Visibility" Value="Visible"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <ControlTemplate x:Key="DividerTemplate" TargetType="Control">
            <ControlTemplate.Resources>
                <ImageSource x:Key="DividerSide">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_divider.png</ImageSource>
                <ImageSource x:Key="DividerCenter">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_dividerChainDetail.png</ImageSource>
            </ControlTemplate.Resources>
            <StackPanel Orientation="Horizontal" Focusable="False">
                <Image Source="{StaticResource DividerSide}" Stretch="None" VerticalAlignment="Center"/>
                <Image Source="{StaticResource DividerCenter}" Stretch="None" VerticalAlignment="Center"/>
                <Image Source="{StaticResource DividerSide}" Stretch="None" VerticalAlignment="Center">
                    <Image.RenderTransform>
                        <ScaleTransform ScaleX="-1" CenterX="4"/>
                    </Image.RenderTransform>
                </Image>
            </StackPanel>
        </ControlTemplate>

        <DataTemplate x:Key="BarterCellTemplate">
            <Grid x:Name="SlotRoot" Tag="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" ToolTipService.Placement="Right" ToolTipService.VerticalOffset="110" DataContext="{Binding Object}" Focusable="True" ls:MoveFocus.Focusable="True">
                <Grid.ToolTip>
                    <ls:LSTooltip IsHitTestVisible="False" Content="{Binding DataContext.Object, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                </Grid.ToolTip>
                <Grid Width="{StaticResource ItemIconSize}" Height="{StaticResource ItemIconSize}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="8,8,0,0">
                    
                    <ls:LSEntityObject x:Name="entityObject" EntityRef="{Binding EntityHandle}" Background="Transparent" Context="Inventory" Style="{StaticResource BaseLSEntityObject}">
                        <ContentPresenter Content="{Binding}" ContentTemplate="{StaticResource Template.GameObject}" IsHitTestVisible="False"/>
                    </ls:LSEntityObject>
                    <Control Template="{StaticResource EquippedItemIndicatorTemplate}" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="4,-8,0,0"/>
                    <ContentPresenter ContentTemplate="{StaticResource EquippedTorchIcon}" Content="{Binding .}" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="0,10,10,0"/>
                </Grid>
                <Image x:Name="Selector" Stretch="UniformToFill" Source="{StaticResource SelectorImage}" Visibility="Collapsed" Margin="-16,-16,-24,-24"/>
            </Grid>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding Tag, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Value="Trader">
                    <Setter TargetName="entityObject" Property="Context" Value="None"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=SlotRoot}" Value="True">
                    <Setter Property="Panel.ZIndex" Value="1"/>
                    <Setter TargetName="Selector" Property="Visibility" Value="Visible"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>

        <ControlTemplate x:Key="FilterCheckBoxTemplate" TargetType="ls:LSCheckBox">
            <Grid x:Name="CheckBoxButtonRoot" Focusable="True" ls:MoveFocus.Focusable="True" Tag="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}" ls:AttachedProperties.InheritedTag="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <Image Grid.Column="0" Grid.ColumnSpan="3" Source="{StaticResource ListItemBg_d}" Stretch="Fill"/>

                <Image x:Name="MarkerBg" Grid.Column="0" VerticalAlignment="Center" Margin="0,0,16,0" Source="{DynamicResource Bg}" Stretch="None"/>

                <TextBlock x:Name="Text" Grid.Column="1" Text="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}" VerticalAlignment="Center" Foreground="{StaticResource LS_baseTxtColor}" FontSize="{StaticResource ScaledDefaultFontSize}"/>

                <Image x:Name="Icon" Grid.Column="2" VerticalAlignment="Center" Margin="16,0,0,0" Source="{DynamicResource IconOff}" Stretch="None"/>

                <Image x:Name="Selector" Grid.Column="0" Grid.ColumnSpan="3" Source="{StaticResource ListItemBg_h}" Stretch="Fill" Visibility="Collapsed"/>
            </Grid>

            <ControlTemplate.Triggers>
                <Trigger SourceName="CheckBoxButtonRoot" Property="Tag" Value="Sort">
                    <Setter TargetName="Text" Property="Text" Value="{Binding Content.Name, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                </Trigger>
                
                <Trigger SourceName="CheckBoxButtonRoot" Property="ls:MoveFocus.IsFocused" Value="True">
                    <Setter Property="Panel.ZIndex" Value="1"/>
                    <Setter TargetName="Selector" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="Icon" Property="Source" Value="{DynamicResource IconOn}"/>
                    <Setter TargetName="Text" Property="Foreground" Value="{StaticResource LS_extraspecialTxtColor}"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition SourceName="CheckBoxButtonRoot" Property="ls:MoveFocus.IsFocused" Value="True"/>
                        <Condition Property="IsChecked" Value="False"/>
                    </MultiTrigger.Conditions>
                    <Setter TargetName="MarkerBg" Property="Source" Value="{DynamicResource BgH}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition SourceName="CheckBoxButtonRoot" Property="ls:MoveFocus.IsFocused" Value="False"/>
                        <Condition Property="IsChecked" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter TargetName="MarkerBg" Property="Source" Value="{DynamicResource BgActive}"/>
                </MultiTrigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition SourceName="CheckBoxButtonRoot" Property="ls:MoveFocus.IsFocused" Value="True"/>
                        <Condition Property="IsChecked" Value="True"/>
                    </MultiTrigger.Conditions>
                    <Setter TargetName="MarkerBg" Property="Source" Value="{DynamicResource BgActiveH}"/>
                </MultiTrigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter TargetName="MarkerBg" Property="Source" Value="{DynamicResource BgDisabled}"/>
                    <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <DataTemplate x:Key="FilterListTemplate">
            <DataTemplate.Resources>
                <BitmapImage x:Key="FiltersPanelBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_filtersPanel_bg.png" />
            </DataTemplate.Resources>
            <ls:LSNineSliceImage x:Name="FilterRoot" ImageSource="{StaticResource FiltersPanelBg}" Slices="40" Padding="60, 40">
                <StackPanel>
                    <ItemsControl x:Name="InventoryFilters" ItemsSource="{Binding DataContext.TradeTabList, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Margin="0,0,0,40">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Vertical"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>

                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type ls:VMInventoryTab}">
                                <ls:LSCheckBox x:Name="Button" IsChecked="False" Content="{Binding Name}" Template="{StaticResource FilterCheckBoxTemplate}" Tag="InventoryFilter">
                                    <ls:LSCheckBox.Resources>
                                        <ImageSource x:Key="Bg">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_radioButton_d.png</ImageSource>
                                        <ImageSource x:Key="BgH">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_radioButton_h.png</ImageSource>
                                        <ImageSource x:Key="BgActive">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_radioButton_active_d.png</ImageSource>
                                        <ImageSource x:Key="BgActiveH">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_radioButton_active_h.png</ImageSource>
                                        <ImageSource x:Key="BgDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_radioButton_disabled.png</ImageSource>
                                    </ls:LSCheckBox.Resources>
                                </ls:LSCheckBox>

                                <DataTemplate.Triggers>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding EnumId}" Value="BuyBack" />
                                            <Condition Binding="{Binding DataContext.HasBuyBack, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="False" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="Button" Property="IsEnabled" Value="False"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding EnumId}" Value="Wares" />
                                            <Condition Binding="{Binding DataContext.HasWares, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Value="False" />
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="Button" Property="IsEnabled" Value="False"/>
                                    </MultiDataTrigger>
                                    <DataTrigger Value="True">
                                        <DataTrigger.Binding>
                                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                                <Binding Path="DataContext.CurrentInventoryTab" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                <Binding Path="."/>
                                            </MultiBinding>
                                        </DataTrigger.Binding>
                                        <Setter TargetName="Button" Property="IsChecked" Value="True"/>
                                    </DataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <TextBlock Text="{Binding Source='h9414328dgbabeg4602g82c1g4c947c1c8e34',Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_accent00TxtColor}" FontSize="{StaticResource ScaledDefaultFontSize}"/>

                    <ItemsControl x:Name="SortOptions" ItemsSource="{Binding DataContext.CurrentPlayer.SelectedCharacter.TradeSortOptions, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Vertical"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>

                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <ls:LSCheckBox x:Name="Button" IsChecked="False" Content="{Binding .}" Template="{StaticResource FilterCheckBoxTemplate}" Tag="Sort" IsEnabled="{Binding IsEnabled}">
                                    <ls:LSCheckBox.Resources>
                                        <ImageSource x:Key="Bg">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_radioButton_d.png</ImageSource>
                                        <ImageSource x:Key="BgH">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_radioButton_h.png</ImageSource>
                                        <ImageSource x:Key="BgActive">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_radioButton_active_d.png</ImageSource>
                                        <ImageSource x:Key="BgActiveH">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_radioButton_active_h.png</ImageSource>
                                        <ImageSource x:Key="BgDisabled">pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_radioButton_disabled.png</ImageSource>
                                    </ls:LSCheckBox.Resources>
                                </ls:LSCheckBox>

                                <DataTemplate.Triggers>
                                    <DataTrigger Binding="{Binding IsEnabled}" Value="False">
                                        <Setter Property="Opacity" Value="{StaticResource DisabledOpacity}"/>
                                    </DataTrigger>

                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Value="True">
                                                <Condition.Binding>
                                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                                        <Binding Path="DataContext.CurrentPlayer.SelectedCharacter.CurrentTradeSortOption.Name" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                        <Binding Path="Name"/>
                                                    </MultiBinding>
                                                </Condition.Binding>
                                            </Condition>
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="Button" Property="IsChecked" Value="True"/>
                                    </MultiDataTrigger>
                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>
                </StackPanel>
            </ls:LSNineSliceImage>
        </DataTemplate>
        
        <Style x:Key="InventoryGridStyle" TargetType="ItemsControl">
            <Setter Property="ItemsSource" Value="{Binding Slots}"/>
            <Setter Property="ItemTemplate" Value="{StaticResource BarterCellTemplate}"/>
            <Setter Property="OpacityMask" Value="{DynamicResource TradeGridOpacityMask}"/>
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <ls:LSGrid x:Name="InvGrid" 
                                   Columns="{DynamicResource invCols}"  
                                   Rows="{DynamicResource invRows}" 
                                   ContainerData="{Binding }" 
                                   CellWidth="{StaticResource InvSlotSize}" 
                                   CellHeight="{StaticResource InvSlotSize}"
                                   VerticalSpacing="4" 
                                   HorizontalSpacing="4"
                                   Background="{StaticResource GridBackgroundBrush}"
                                   ExtendedRows="False"
                                   UseWidgetNavigation="True"
                                   ls:MoveFocus.InternalFocusable="True"
                                   WidgetChainedNavigation="True"
                                   Focusable="False"
                                   AutoIndex="True"
                                   ViewportExtension="8,8"/>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>

            <Style.Triggers>
                <DataTrigger Binding="{Binding (ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                    <Setter Property="ItemsSource" Value="{Binding (ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource Mode=Self}}"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>

        <ControlTemplate x:Key="CharacterPanelTemplate">
            <Grid>
                <ls:LSPaperdoll HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,120,0,0"
                                Width="520" Height="1500" 
                                RenderScale="{Binding DataContext.Data.RenderScale, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                EntityRef="{Binding EntityHandle}" 
                                RotationSpeed="0.5"
                                UseCombatPose="False"/>
                <TextBlock HorizontalAlignment="Center"
                           VerticalAlignment="Bottom"
                           Margin="0,0,0,104"
                           Text="{Binding Name}"
                           Style="{StaticResource TradeDefaultFontStyle}" 
                           FontSize="{StaticResource ScaledTitleFontSize}"
                           MaxWidth="500" 
                           TextTrimming="CharacterEllipsis"/>
            </Grid>
        </ControlTemplate>

        <ControlTemplate x:Key="WeightIconTemplate">
            <Image x:Name="IconHolder" Source="{StaticResource NormalWeightIcon}" Stretch="None"/>

            <ControlTemplate.Triggers>
                <!-- Light encumbrance -->
                <DataTrigger Value="True">
                    <DataTrigger.Binding>
                        <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                            <Binding Path="EncumbranceStats.CurrentWeight"/>
                            <Binding Path="EncumbranceStats.WeightLight"/>
                        </MultiBinding>
                    </DataTrigger.Binding>
                    <Setter TargetName="IconHolder" Property="Source" Value="{StaticResource IconWeightEncumbered}"/>
                </DataTrigger>

                <!-- Heavy encumbrance -->
                <DataTrigger Value="True">
                    <DataTrigger.Binding>
                        <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                            <Binding Path="EncumbranceStats.CurrentWeight"/>
                            <Binding Path="EncumbranceStats.WeightHeavy"/>
                        </MultiBinding>
                    </DataTrigger.Binding>
                    <Setter TargetName="IconHolder" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/Weight_Encumbrance/ico_weight_heavilyEncumbered.png"/>
                </DataTrigger>

                <!-- Over encumbrance -->
                <DataTrigger Value="True">
                    <DataTrigger.Binding>
                        <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                            <Binding Path="EncumbranceStats.CurrentWeight"/>
                            <Binding Path="EncumbranceStats.WeightMaximum"/>
                        </MultiBinding>
                    </DataTrigger.Binding>
                    <Setter TargetName="IconHolder" Property="Source" Value="{StaticResource IconWeightEncumbered}"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <ControlTemplate x:Key="WeightDisplayTemplate">
            <StackPanel Orientation="Horizontal" Focusable="False" Height="70">
                <Control Template="{StaticResource WeightIconTemplate}" VerticalAlignment="Center"/>
                <TextBlock Text="{Binding EncumbranceStats.CurrentWeight, Converter={StaticResource UnitConverter}, ConverterParameter='Weight N2'}" Style="{StaticResource TradeDefaultFontStyle}"/>
                <TextBlock Text="{Binding Source='hd64bfe4cgadadg4468g8b0ag70330ffc717c', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TradeDefaultFontStyle}"/>
                <TextBlock Text="{Binding EncumbranceStats.WeightMaximum, Converter={StaticResource UnitConverter}, ConverterParameter='Weight N2'}" Style="{StaticResource TradeDefaultFontStyle}"/>
            </StackPanel>
        </ControlTemplate>

        <Style x:Key="PartyHolderStyle" TargetType="ItemsControl" BasedOn="{StaticResource baseStyle}">
            <Style.Resources>
                <!-- No fade for the party inventories -->
                <SolidColorBrush x:Key="TradeGridOpacityMask" Color="White"/>
            </Style.Resources>

            <Setter Property="ItemsSource" Value="{Binding PartyCharacterInventories}"/>
            <Setter Property="AlternationCount" Value="{Binding PartyCharacterInventories.Count}"/>
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility" Value="Hidden"/>
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility" Value="Hidden"/>
            <Setter Property="VerticalAlignment" Value="Top"/>
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Vertical"/>
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Setter Property="ItemTemplate">
                <Setter.Value>
                    <DataTemplate>
                        <Expander x:Name="SingleInventoryRoot" HorizontalAlignment="Center" VerticalAlignment="Top" Tag="False" Margin="0,0,0,20" IsExpanded="True" Width="{DynamicResource invWidth}">
                            <b:Interaction.Behaviors>
                                <ls:InventoriesMergerBehavior x:Name="PlayerInventoriesMerged" Inventories="{Binding TradeInventories}"/>
                                <ls:CollectionFilterBehavior x:Name="PlayerInventoryFiltered" ItemsSource="{Binding InventoriesSlots, ElementName=PlayerInventoriesMerged}" Predicate="{Binding TradeInventories[0].TabFiltersPredicate}"/>
                                <ls:CollectionSortBehavior x:Name="PlayerInventoryFilteredSorted" ItemsSource="{Binding FilteredItems, ElementName=PlayerInventoryFiltered}" Comparer="{Binding DataContext.CurrentPlayer.SelectedCharacter.TradeSortComparer, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                            </b:Interaction.Behaviors>
                            <Expander.Resources>
                                <System:UInt32 x:Key="invRows">1</System:UInt32>
                            </Expander.Resources>
                            <Expander.Template>
                                <ControlTemplate TargetType="{x:Type Expander}">
                                    <DockPanel x:Name="DockRoot">
                                        <Grid DockPanel.Dock="Top">
                                            <ls:LSToggleButton x:Name="ExpanderButton" IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}" Focusable="True" ls:MoveFocus.Focusable="True" Tag="PartyExpanded">
                                                <ToggleButton.Template>
                                                    <ControlTemplate TargetType="ToggleButton">
                                                        <ContentPresenter/>
                                                    </ControlTemplate>
                                                </ToggleButton.Template>
                                                <ContentPresenter ContentSource="Header"/>
                                            </ls:LSToggleButton>
                                            <ls:LSNineSliceImage x:Name="Hover" ImageSource="{StaticResource SelectorImage}" Visibility="Hidden" Height="160" Margin="-26,-32,-30,-42" Slices="40"/>
                                        </Grid>
                                        <ContentPresenter Name="Content"/>
                                    </DockPanel>

                                    <ControlTemplate.Triggers>
                                        <Trigger Property="IsExpanded" Value="False">
                                            <Setter TargetName="Content" Property="Visibility" Value="Collapsed"/>
                                            <Setter TargetName="ExpanderButton" Property="Tag" Value="PartyCollapsed"/>
                                        </Trigger>
                                        <Trigger SourceName="ExpanderButton" Property="IsChecked" Value="True">
                                            <Setter Property="IsExpanded" Value="True"/>
                                        </Trigger>

                                        <DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=ExpanderButton}" Value="True">
                                            <Setter TargetName="Hover" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="ExpanderButton" Property="BoundEvent" Value="UIAccept"/>
                                        </DataTrigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Expander.Template>

                            <Expander.Header>
                                <ls:LSNineSliceImage x:Name="GridHeader" Height="108" ImageSource="{StaticResource BackgroundHeader}" Slices="28" Padding="20" Margin="-2,0,-2,8" DataContext="{Binding Character}">
                                    <Grid>
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Left" Margin="0,0,40,0">
                                            <TextBlock x:Name="CharacterName" Style="{StaticResource TradeDefaultFontStyle}" HorizontalAlignment="Left" TextTrimming="CharacterEllipsis" Width="400">
                                                <ls:TextBlockFormatter.SourceText>
                                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                        <Binding Source="hfd89b43bg7da3g472fg871bg07d754cce489"/>
                                                        <Binding Path="Name"/>
                                                    </MultiBinding>
                                                </ls:TextBlockFormatter.SourceText>
                                            </TextBlock>
                                            <Image Name="ExpandArrow" Source="{StaticResource HeaderArrowCollapsed}" Stretch="None" VerticalAlignment="Center" Visibility="{Binding IsExpanded, ElementName=SingleInventoryRoot, Converter={StaticResource BoolToCollapsedConverter}}"/>
                                        </StackPanel>
                                        <Control x:Name="WeightDisplayControl" Template="{StaticResource WeightIconTemplate}" VerticalAlignment="Center" HorizontalAlignment="Right"/>
                                    </Grid>
                                </ls:LSNineSliceImage>
                            </Expander.Header>

                            <ItemsControl DataContext="{Binding TradeInventory}"
                                          Style="{StaticResource InventoryGridStyle}"
                                          HorizontalAlignment="Left"
                                          ls:AttachedProperties.InheritedTag="{Binding Path=(b:Interaction.Behaviors)[2].SortedItems, ElementName=SingleInventoryRoot}"/>
                        </Expander>

                        <DataTemplate.Triggers>
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding DataContext.Layout, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Common"/>
                                    <Condition Binding="{Binding DataContext.Data.AspectRatio, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}} , Converter={StaticResource GreaterThanConverter}, ConverterParameter=0.5625}" Value="False"/>
                                </MultiDataTrigger.Conditions>

                                <Setter TargetName="WeightDisplayControl" Property="Template" Value="{StaticResource WeightDisplayTemplate}"/>
                                <Setter TargetName="SingleInventoryRoot" Property="Width" Value="Auto"/>
                                <Setter TargetName="CharacterName" Property="Width" Value="Auto"/>
                            </MultiDataTrigger>

                            <DataTrigger Binding="{Binding IsKeyboardFocusWithin, ElementName=SingleInventoryRoot}" Value="True">
                                <Setter TargetName="ExpandArrow" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_arrowCollapsed_h.png"/>
                            </DataTrigger>
                        </DataTemplate.Triggers>
                    </DataTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <ControlTemplate x:Key="TradeMainPanelTemplate">
            <ControlTemplate.Resources>
                <Style x:Key="InventoryViewerSplitScreenResources" TargetType="StackPanel">
                    <Style.Resources>
                        <System:UInt32 x:Key="invRows">11</System:UInt32>
                        <System:UInt32 x:Key="invCols">7</System:UInt32>
                        <System:Double x:Key="invWidth">844</System:Double>
                    </Style.Resources>
                </Style>

                <Style x:Key="InventoryViewerFullScreenResources" TargetType="StackPanel" BasedOn="{StaticResource InventoryViewerSplitScreenResources}">
                    <Style.Resources>
                        <System:UInt32 x:Key="invCols">11</System:UInt32>
                    </Style.Resources>
                </Style>
            </ControlTemplate.Resources>

            <!--Trade Panel -->
            <StackPanel x:Name="TradeMainPanel" Style="{StaticResource InventoryViewerSplitScreenResources}" Width="1920" Orientation="Vertical" HorizontalAlignment="Center" VerticalAlignment="Top">
                <b:Interaction.Behaviors>
                    <ls:CollectionFilterBehavior x:Name="TraderInventoryFiltered" ItemsSource="{Binding TraderInventory.Slots}" Predicate="{Binding TraderInventory.TabFiltersPredicate}"/>
                    <ls:CollectionSortBehavior x:Name="TraderInventoryFilteredSorted" ItemsSource="{Binding Path=(b:Interaction.Behaviors)[0].FilteredItems, ElementName=TradeMainPanel}" Comparer="{Binding DataContext.CurrentPlayer.SelectedCharacter.TradeSortComparer, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                </b:Interaction.Behaviors>
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Loaded">
                        <ls:SetMoveFocusAction TargetName="Trade_c"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>

                <!-- Headers (gold, name + selected item)-->
                <Control x:Name="TradeHeader" HorizontalAlignment="Center" Focusable="False">
                    <Control.Template>
                        <ControlTemplate TargetType="Control">
                            <Grid Width="{StaticResource HeaderWidthSplitscreen}" Margin="0,6,0,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <!-- Player side -->
                                <StackPanel Grid.Row="0" Grid.Column="0" Orientation="Horizontal" HorizontalAlignment="Left" Margin="{StaticResource HeaderPortraitLeftSideMagin}">
                                    <Grid x:Name="CurrentCharacterPortraitHolder">
                                        <Control Template="{StaticResource PortraitTemplate}" DataContext="{Binding CurrentTradingCharacter}"/>

                                        <ls:LSButton x:Name="PreviousCharacterButton"
                                                     Visibility="{Binding CurrentPlayer.AssignedCharacters.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter=1}"
                                                     ContentTemplate="{StaticResource ControllerButtonHint}" 
                                                     Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='PartyManagement'}"
                                                     Tag=" "
                                                     BoundEvent="PartyManagement"
                                                     Command="{Binding SwitchTraderCharacterCommand}"
                                                     CommandParameter="{StaticResource FalseValue}"
                                                     VerticalAlignment="Top"
                                                     HorizontalAlignment="Left"
                                                     Margin="-80,0,0,0"/>

                                        <ls:LSButton x:Name="NextCharacterButton"
                                                     Visibility="{Binding CurrentPlayer.AssignedCharacters.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter=1}"
                                                     ContentTemplate="{StaticResource ControllerButtonHint}" 
                                                     Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='SpeakerSelect'}"
                                                     Tag=" "
                                                     BoundEvent="SpeakerSelect"
                                                     Command="{Binding SwitchTraderCharacterCommand}"
                                                     VerticalAlignment="Top"
                                                     HorizontalAlignment="Right"
                                                     Margin="0,0,-80,0"/>
                                    </Grid>

                                    <StackPanel VerticalAlignment="Bottom" HorizontalAlignment="Left" Orientation="Vertical">
                                        <TextBlock Text="{Binding Source='ha6564037g4678g44cdga274gadc09cbef56f', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TradeDefaultFontStyle}" HorizontalAlignment="Left"/>
                                        <ContentControl ContentTemplate="{StaticResource GoldDisplay}" Content="{Binding CharacterInventoryGold, StringFormat={}{0:N0}}" HorizontalAlignment="Left"/>
                                    </StackPanel>
                                </StackPanel>

                                <ContentControl x:Name="InventoryFilterIndicator" Grid.Row="1" Grid.Column="0" HorizontalAlignment="Left" Template="{StaticResource FilterContainerTemplate}" DataContext="{Binding DataContext.CurrentPlayer.SelectedCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                    <ls:LSButton x:Name="OpenFiltersButton" Template="{StaticResource ControllerButton.ImageSwitcher}" DataContext="{Binding DataContext.CurrentPlayer.UIData.InputEvents, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIFilter'}" BoundEvent="UIFilter" Width="{StaticResource ScaledControllerHintSize}" Height="{StaticResource ScaledControllerHintSize}" VerticalAlignment="Center">
                                        <b:Interaction.Triggers>
                                            <b:EventTrigger EventName="LSButtonPressed">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding Visibility, ElementName=InventoryFilter}" Operator="NotEqual" RightOperand="Visible"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ChangePropertyAction TargetName="PanelsContainer" PropertyName="IsEnabled" Value="False"/>
                                                <b:ChangePropertyAction TargetName="TraderInventoryContainer" PropertyName="IsEnabled" Value="False"/>
                                                <b:ControlStoryboardAction Storyboard="{StaticResource ShowInventoryFilterAnimation}"/>
                                            </b:EventTrigger>
                                            <b:EventTrigger EventName="LSButtonPressed">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding Visibility, ElementName=InventoryFilter}" Operator="Equal" RightOperand="Visible"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ChangePropertyAction TargetName="PanelsContainer" PropertyName="IsEnabled" Value="True"/>
                                                <b:ChangePropertyAction TargetName="TraderInventoryContainer" PropertyName="IsEnabled" Value="True"/>
                                                <b:ControlStoryboardAction Storyboard="{StaticResource HideInventoryFilterAnimation}"/>
                                            </b:EventTrigger>
                                        </b:Interaction.Triggers>
                                    </ls:LSButton>
                                </ContentControl>

                                <!-- Trader side -->
                                <StackPanel Grid.Row="0" Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Right" Margin="{StaticResource HeaderPortraitRightSideMagin}">
                                    <StackPanel VerticalAlignment="Bottom" Orientation="Vertical">
                                        <TextBlock Text="{Binding Source='h55e5ec72g331dg4dc9g9532g4a68ba0bc2a3', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Right" Style="{StaticResource TradeDefaultFontStyle}"/>
                                        <ContentControl ContentTemplate="{StaticResource GoldDisplay}" Content="{Binding TraderInventoryGold, StringFormat={}{0:N0}}" HorizontalAlignment="Right"/>
                                    </StackPanel>

                                    <Grid x:Name="TraderCharacterPortraitHolder">
                                        <Control Template="{StaticResource PortraitTemplate}" DataContext="{Binding Trader}"/>
                                    </Grid>
                                </StackPanel>

                                <!-- Selected item price -->
                                <Control Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="2" VerticalAlignment="Center" HorizontalAlignment="Center" Template="{StaticResource HoveredItemInfoTemplate}" Margin="0,52,0,0"/>

                                <!-- Trader inventory info -->
                                <TextBlock Grid.Row="1" Grid.Column="1" HorizontalAlignment="Right" TextAlignment="Right" Margin="{StaticResource HeaderTextRightSideMagin}" Style="{StaticResource TradeDefaultFontStyle}" MaxWidth="840" TextTrimming="CharacterEllipsis">
                                    <ls:TextBlockFormatter.SourceText>
                                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                            <Binding Source="hdfa67477g0567g4217gb4abg83be6c233543"/>
                                            <Binding Path="Trader.Name"/>
                                        </MultiBinding>
                                    </ls:TextBlockFormatter.SourceText>
                                </TextBlock>
                            </Grid>
                        </ControlTemplate>
                    </Control.Template>
                </Control>

                <!-- Trade inventories -->
                <StackPanel Margin="0,20,0,0" Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Center">
                    <!-- Party inventories -->
                    <Grid>
                        <ScrollViewer Template="{StaticResource MinimalisticScrollViewerTemplate}" Padding="40,0,0,0" Margin="20,0,10,0"
                                      HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" Height="{StaticResource ScrollViewerHeight}">
                            <ItemsControl x:Name="PanelsContainer" Style="{StaticResource PartyHolderStyle}"/>
                        </ScrollViewer>
                        <ContentPresenter x:Name="InventoryFilter" Content="{Binding CurrentPlayer.SelectedCharacter}" ContentTemplate="{StaticResource FilterListTemplate}" Visibility="Collapsed" Opacity="0" HorizontalAlignment="Left" VerticalAlignment="Top" Width="600" Panel.ZIndex="2"/>

                    </Grid>
                    <!-- Trader Inventory -->
                    <ScrollViewer Margin="10,0,20,0"
                                  Padding="40,0,0,0" 
                                  VerticalScrollBarVisibility="Auto" 
                                  HorizontalScrollBarVisibility="Hidden"
                                  Template="{StaticResource FlippedMinimalisticScrollViewerTemplate}"
                                  Height="{StaticResource ScrollViewerHeight}">
                        <ItemsControl x:Name="TraderInventoryContainer" DataContext="{Binding TraderInventory}" 
                                      Style="{StaticResource InventoryGridStyle}"
                                      Tag="Trader"
                                      ls:AttachedProperties.InheritedTag="{Binding Path=(b:Interaction.Behaviors)[1].SortedItems, ElementName=TradeMainPanel}"/>
                    </ScrollViewer>
                </StackPanel>
            </StackPanel>

            <ControlTemplate.Triggers>
                <MultiDataTrigger>
                    <!-- Fullscreen content -->
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Layout}" Value="Common"/>
                        <Condition Binding="{Binding Data.AspectRatio, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0.5625}" Value="False"/>
                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="TradeMainPanel" Property="Width" Value="Auto"/>
                    <Setter TargetName="TradeMainPanel" Property="Style" Value="{StaticResource InventoryViewerFullScreenResources}"/>
                    <Setter TargetName="TradeHeader" Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Control">
                                <Grid Width="{StaticResource HeaderWidthFullscreen}" Margin="0,96,0,4">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>

                                    <!-- Selected item price -->
                                    <Control x:Name="SelectedItemInfo" Grid.Row="0" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center" Template="{StaticResource HoveredItemInfoTemplate}" Margin="0,0,80,8"/>

                                    <ContentControl x:Name="InventoryFilterIndicator" Grid.Row="1" Grid.Column="0" HorizontalAlignment="Left" Template="{StaticResource FilterContainerTemplate}" DataContext="{Binding DataContext.CurrentPlayer.SelectedCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                        <ls:LSButton x:Name="OpenFiltersButton" Template="{StaticResource ControllerButton.ImageSwitcher}" DataContext="{Binding DataContext.CurrentPlayer.UIData.InputEvents, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIFilter'}" BoundEvent="UIFilter" Width="{StaticResource ScaledControllerHintSize}" Height="{StaticResource ScaledControllerHintSize}" VerticalAlignment="Center">
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="LSButtonPressed">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding Visibility, ElementName=InventoryFilter}" Operator="NotEqual" RightOperand="Visible"/>
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <b:ChangePropertyAction TargetName="PanelsContainer" PropertyName="IsEnabled" Value="False"/>
                                                    <b:ChangePropertyAction TargetName="TraderInventoryContainer" PropertyName="IsEnabled" Value="False"/>
                                                    <b:ControlStoryboardAction Storyboard="{StaticResource ShowInventoryFilterAnimation}"/>
                                                </b:EventTrigger>
                                                <b:EventTrigger EventName="LSButtonPressed">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding Visibility, ElementName=InventoryFilter}" Operator="Equal" RightOperand="Visible"/>
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <b:ChangePropertyAction TargetName="PanelsContainer" PropertyName="IsEnabled" Value="True"/>
                                                    <b:ChangePropertyAction TargetName="TraderInventoryContainer" PropertyName="IsEnabled" Value="True"/>
                                                    <b:ControlStoryboardAction Storyboard="{StaticResource HideInventoryFilterAnimation}"/>
                                                </b:EventTrigger>
                                            </b:Interaction.Triggers>
                                        </ls:LSButton>
                                    </ContentControl>

                                    <!-- Player side -->
                                    <StackPanel Grid.Row="1" Grid.Column="0" HorizontalAlignment="Right" Orientation="Horizontal" Margin="0,0,80,0">
                                        <TextBlock Text="{Binding Source='ha6564037g4678g44cdga274gadc09cbef56f', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TradeDefaultFontStyle}" HorizontalAlignment="Left"/>
                                        <ContentPresenter ContentTemplate="{StaticResource GoldDisplay}" Content="{Binding CharacterInventoryGold, StringFormat={}{0:N0}}" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                                    </StackPanel>

                                    <!-- Trader side -->
                                    <StackPanel Grid.Row="1" Grid.Column="1" Orientation="Horizontal" HorizontalAlignment="Left" Margin="80,0,0,0">
                                        <TextBlock Text="{Binding Source='h55e5ec72g331dg4dc9g9532g4a68ba0bc2a3', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Right" Style="{StaticResource TradeDefaultFontStyle}"/>
                                        <ContentPresenter ContentTemplate="{StaticResource GoldDisplay}" Content="{Binding TraderInventoryGold, StringFormat={}{0:N0}}" HorizontalAlignment="Right" VerticalAlignment="Center"/>
                                    </StackPanel>
                                    <TextBlock Grid.Row="1" Grid.Column="1" HorizontalAlignment="Right" TextAlignment="Right" Style="{StaticResource TradeDefaultFontStyle}" Margin="0,0,16,0" MaxWidth="1000" TextTrimming="CharacterEllipsis">
                                        <ls:TextBlockFormatter.SourceText>
                                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                <Binding Source="hdfa67477g0567g4217gb4abg83be6c233543"/>
                                                <Binding Path="Trader.Name"/>
                                            </MultiBinding>
                                        </ls:TextBlockFormatter.SourceText>
                                    </TextBlock>
                                </Grid>

                                <ControlTemplate.Triggers>
                                    <DataTrigger Binding="{Binding FocusedElement.Tag, ElementName=Trade_c}" Value="Trader">
                                        <Setter TargetName="SelectedItemInfo" Property="Grid.Column" Value="1"/>
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>

        <ControlTemplate x:Key="BarterMainPanelTemplate">
            <ControlTemplate.Resources>
                <Style x:Key="InventoryViewerSplitScreenResources" TargetType="Grid">
                    <Style.Resources>
                        <System:UInt32 x:Key="invRows">11</System:UInt32>
                        <System:UInt32 x:Key="invCols">4</System:UInt32>
                        <System:Double x:Key="invWidth">484</System:Double>
                    </Style.Resources>
                </Style>

                <Style x:Key="InventoryViewerFullScreenResources" TargetType="Grid" BasedOn="{StaticResource InventoryViewerSplitScreenResources}">
                    <Style.Resources>
                        <System:UInt32 x:Key="invCols">8</System:UInt32>
                    </Style.Resources>
                </Style>
            </ControlTemplate.Resources>

                <!-- Barter section-->
            <Grid x:Name="BarterMainPanel" Style="{StaticResource InventoryViewerSplitScreenResources}" Margin="0,120,0,0" Width="1920" Height="1910" HorizontalAlignment="Center" VerticalAlignment="Top">
                <b:Interaction.Behaviors>
                    <ls:CollectionFilterBehavior x:Name="TraderInventoryFiltered" ItemsSource="{Binding TraderInventory.Slots}" Predicate="{Binding TraderInventory.TabFiltersPredicate}"/>
                    <ls:CollectionSortBehavior x:Name="TraderInventoryFilteredSorted" ItemsSource="{Binding Path=(b:Interaction.Behaviors)[0].FilteredItems, ElementName=BarterMainPanel}" Comparer="{Binding DataContext.CurrentPlayer.SelectedCharacter.TradeSortComparer, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                </b:Interaction.Behaviors>
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Loaded">
                        <ls:SetMoveFocusAction TargetName="Trade_c"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                    <RowDefinition Height="Auto"/>
                </Grid.RowDefinitions>

                <!-- Headers (gold, name + selected item)-->
                <Control x:Name="BarterHeader" Grid.Row="0" VerticalAlignment="Top" HorizontalAlignment="Center" Focusable="False">
                    <Control.Template>
                        <ControlTemplate TargetType="Control">
                            <Grid Width="{StaticResource HeaderWidthSplitscreen}" Margin="0,60,0,10">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="360"/>
                                    <ColumnDefinition Width="360"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="Auto"/>
                                </Grid.RowDefinitions>

                                <ContentControl x:Name="InventoryFilterIndicator" Grid.Row="1" Grid.Column="0" HorizontalAlignment="Left" VerticalAlignment="Bottom" Template="{StaticResource FilterContainerTemplate}" DataContext="{Binding DataContext.CurrentPlayer.SelectedCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                    <ls:LSButton x:Name="OpenFiltersButton" Template="{StaticResource ControllerButton.ImageSwitcher}" DataContext="{Binding DataContext.CurrentPlayer.UIData.InputEvents, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIFilter'}" BoundEvent="UIFilter" Width="{StaticResource ScaledControllerHintSize}" Height="{StaticResource ScaledControllerHintSize}" VerticalAlignment="Center">
                                        <b:Interaction.Triggers>
                                            <b:EventTrigger EventName="LSButtonPressed">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding Visibility, ElementName=InventoryFilter}" Operator="NotEqual" RightOperand="Visible"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ChangePropertyAction TargetName="PanelsContainer" PropertyName="IsEnabled" Value="False"/>
                                                <b:ChangePropertyAction TargetName="TraderInventoryContainer" PropertyName="IsEnabled" Value="False"/>
                                                <b:ChangePropertyAction TargetName="PlayerOffer" PropertyName="IsEnabled" Value="False"/>
                                                <b:ChangePropertyAction TargetName="TraderOffer" PropertyName="IsEnabled" Value="False"/>
                                                <b:ControlStoryboardAction Storyboard="{StaticResource ShowInventoryFilterAnimation}"/>
                                            </b:EventTrigger>
                                            <b:EventTrigger EventName="LSButtonPressed">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding Visibility, ElementName=InventoryFilter}" Operator="Equal" RightOperand="Visible"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <b:ChangePropertyAction TargetName="PanelsContainer" PropertyName="IsEnabled" Value="True"/>
                                                <b:ChangePropertyAction TargetName="TraderInventoryContainer" PropertyName="IsEnabled" Value="True"/>
                                                <b:ChangePropertyAction TargetName="PlayerOffer" PropertyName="IsEnabled" Value="True"/>
                                                <b:ChangePropertyAction TargetName="TraderOffer" PropertyName="IsEnabled" Value="True"/>
                                                <b:ControlStoryboardAction Storyboard="{StaticResource HideInventoryFilterAnimation}"/>
                                            </b:EventTrigger>
                                        </b:Interaction.Triggers>
                                    </ls:LSButton>
                                </ContentControl>

                                <!-- Player side -->
                                <StackPanel Grid.Row="0" Grid.Column="0" Orientation="Horizontal" HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="{StaticResource HeaderPortraitLeftSideMagin}">
                                    <Grid x:Name="CurrentCharacterPortraitHolder">
                                        <Control Template="{StaticResource PortraitTemplate}" DataContext="{Binding CurrentTradingCharacter}"/>

                                        <ls:LSButton x:Name="PreviousCharacterButton"
                                                     Visibility="{Binding CurrentPlayer.AssignedCharacters.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter=1}"
                                                     ContentTemplate="{StaticResource ControllerButtonHint}" 
                                                     Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='PartyManagement'}"
                                                     Tag=" "
                                                     BoundEvent="PartyManagement"
                                                     Command="{Binding SwitchTraderCharacterCommand}"
                                                     CommandParameter="{StaticResource FalseValue}"
                                                     VerticalAlignment="Top"
                                                     HorizontalAlignment="Left"
                                                     Margin="-80,0,0,0"/>

                                        <ls:LSButton x:Name="NextCharacterButton"
                                                     Visibility="{Binding CurrentPlayer.AssignedCharacters.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter=1}"
                                                     ContentTemplate="{StaticResource ControllerButtonHint}" 
                                                     Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='SpeakerSelect'}"
                                                     Tag=" "
                                                     BoundEvent="SpeakerSelect"
                                                     Command="{Binding SwitchTraderCharacterCommand}"
                                                     VerticalAlignment="Top"
                                                     HorizontalAlignment="Right"
                                                     Margin="0,0,-80,0"/>
                                    </Grid>

                                    <StackPanel VerticalAlignment="Bottom" HorizontalAlignment="Left" Orientation="Vertical">
                                        <TextBlock Text="{Binding Source='ha6564037g4678g44cdga274gadc09cbef56f', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TradeDefaultFontStyle}"/>
                                        <ContentPresenter ContentTemplate="{StaticResource GoldDisplay}" Content="{Binding CharacterInventoryGold, StringFormat={}{0:N0}}" HorizontalAlignment="Left"/>
                                    </StackPanel>
                                </StackPanel>

                                <!-- Player offer side -->
                                <StackPanel Orientation="Vertical" Grid.Row="1" Grid.Column="1" Width="320" HorizontalAlignment="Center" Margin="0,0,30,0">
                                    <TextBlock Text="{Binding Source='h9dfe7c69g5f85g44b7gb808g8804da876f5a', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TradeDefaultFontStyle}" HorizontalAlignment="Center" TextAlignment="Center" FontSize="{StaticResource ScaledDefaultFontSize}" Margin="0,0,0,-8"/>
                                    <ContentPresenter ContentTemplate="{StaticResource GoldDisplay}" HorizontalAlignment="Center" Content="{Binding CharacterOfferGold, StringFormat={}{0:N0}}"/>
                                </StackPanel>

                                <!-- Trader offer side -->
                                <StackPanel Orientation="Vertical" Grid.Row="1" Grid.Column="2" Width="320" HorizontalAlignment="Center" Margin="30,0,0,0">
                                    <TextBlock Text="{Binding Source='h53954267gfe71g4db2g9f95g37c36987f774', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TradeDefaultFontStyle}" HorizontalAlignment="Center" TextAlignment="Center" FontSize="{StaticResource ScaledDefaultFontSize}" Margin="0,0,0,-8"/>
                                    <ContentPresenter ContentTemplate="{StaticResource GoldDisplay}" HorizontalAlignment="Center" Content="{Binding TraderOfferGold, StringFormat={}{0:N0}}"/>
                                </StackPanel>

                                <!-- Trader side -->
                                <StackPanel Grid.Row="0" Grid.Column="3" Orientation="Horizontal" HorizontalAlignment="Right" Margin="{StaticResource HeaderPortraitRightSideMagin}">
                                    <StackPanel VerticalAlignment="Bottom" Orientation="Vertical">
                                        <TextBlock Text="{Binding Source='h55e5ec72g331dg4dc9g9532g4a68ba0bc2a3', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Right" Style="{StaticResource TradeDefaultFontStyle}"/>
                                        <ContentPresenter ContentTemplate="{StaticResource GoldDisplay}" Content="{Binding TraderInventoryGold, StringFormat={}{0:N0}}" HorizontalAlignment="Right"/>
                                    </StackPanel>

                                    <Grid x:Name="TraderCharacterPortraitHolder">
                                        <Control Template="{StaticResource PortraitTemplate}" DataContext="{Binding Trader}"/>
                                    </Grid>
                                </StackPanel>

                                <!-- Selected item price -->
                                <Control Grid.Row="0" Grid.Column="0" Grid.ColumnSpan="4" VerticalAlignment="Center" HorizontalAlignment="Center" Template="{StaticResource HoveredItemInfoTemplate}" Margin="0,52,0,0"/>

                                <!-- Trader inventory info -->
                                <TextBlock Grid.Row="1" Grid.Column="3" HorizontalAlignment="Right" TextAlignment="Right" Margin="{StaticResource HeaderTextRightSideMagin}" Style="{StaticResource TradeDefaultFontStyle}" MaxWidth="480" TextTrimming="CharacterEllipsis">
                                    <ls:TextBlockFormatter.SourceText>
                                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                            <Binding Source="hdfa67477g0567g4217gb4abg83be6c233543"/>
                                            <Binding Path="Trader.Name"/>
                                        </MultiBinding>
                                    </ls:TextBlockFormatter.SourceText>
                                </TextBlock>
                            </Grid>
                        </ControlTemplate>
                    </Control.Template>
                </Control>

                <!-- Inventories -->
                <Grid x:Name="InventoriesAndOffers" Grid.Row="1">
                    <ContentPresenter x:Name="InventoryFilter" Content="{Binding CurrentPlayer.SelectedCharacter}" ContentTemplate="{StaticResource FilterListTemplate}" Visibility="Collapsed" Opacity="0" HorizontalAlignment="Left" VerticalAlignment="Top" Width="600" Panel.ZIndex="2"/>

                    <!-- Barter inventories -->
                    <StackPanel x:Name="BarterInventories" VerticalAlignment="Top" HorizontalAlignment="Center" Orientation="Horizontal">

                        <!-- Player inventories -->
                        <ScrollViewer Template="{StaticResource MinimalisticScrollViewerTemplate}" Padding="56,0,0,0" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                            <ItemsControl x:Name="PanelsContainer" Style="{StaticResource PartyHolderStyle}"/>
                        </ScrollViewer>
                    

                        <!-- Player offer -->
                        <ScrollViewer VerticalAlignment="Top" Template="{StaticResource MinimalisticScrollViewerTemplate}" Margin="36,0,10,0" Padding="36,0,0,0" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                            <ItemsControl x:Name="PlayerOffer" DataContext="{Binding CharacterOffer}" Style="{StaticResource InventoryGridStyle}" Tag="Offer">
                                <ItemsControl.Resources>
                                    <System:UInt32 x:Key="invCols">2</System:UInt32>
                                    <System:UInt32 x:Key="invRows">9</System:UInt32>
                                </ItemsControl.Resources>
                            </ItemsControl>
                        </ScrollViewer>

                        <!-- Trader offer -->
                        <ScrollViewer VerticalAlignment="Top" Template="{StaticResource FlippedMinimalisticScrollViewerTemplate}" Margin="10,0,36,0" Padding="36,0,0,0" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                            <ItemsControl x:Name="TraderOffer" DataContext="{Binding TraderOffer}" Style="{StaticResource InventoryGridStyle}" Tag="Offer">
                                <ItemsControl.Resources>
                                    <System:UInt32 x:Key="invCols">2</System:UInt32>
                                    <System:UInt32 x:Key="invRows">9</System:UInt32>
                                </ItemsControl.Resources>
                            </ItemsControl>
                        </ScrollViewer>

                        <!-- Trader inventory -->
                        <ScrollViewer VerticalAlignment="Stretch" Template="{StaticResource FlippedMinimalisticScrollViewerTemplate}" Padding="18,0,0,0" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                            <ItemsControl x:Name="TraderInventoryContainer" DataContext="{Binding TraderInventory}" 
                                          Padding="40,0,0,0"
                                          Style="{StaticResource InventoryGridStyle}"
                                          Tag="TraderInventory"
                                          ls:AttachedProperties.InheritedTag="{Binding Path=(b:Interaction.Behaviors)[1].SortedItems, ElementName=BarterMainPanel}"/>
                        </ScrollViewer>
                    </StackPanel>
                    <ls:LSNineSliceImage x:Name="SplitScreenFeedbackContainer" Style="{StaticResource DefaultOverlay9Slice}" HorizontalAlignment="Center" VerticalAlignment="Bottom" Padding="28" Width="700" Visibility="Collapsed">
                        <TextBlock x:Name="SplitScreenFeedbackText"
                               TextWrapping="Wrap"
                               TextAlignment="Center"
                               Foreground="{StaticResource LS_PrimaryColor}" 
                               FontSize="{StaticResource ScaledDefaultFontSize}"
                               Text="{Binding Source='h0a066f3dg76d7g4939gac2eg692872bc8d82', Converter={StaticResource TranslatedStringConverter}}">
                        </TextBlock>
                    </ls:LSNineSliceImage>
                </Grid>

                <!-- Confirm Barter Button -->
                <ls:LSNineSliceImage x:Name="BarterButtonHolder" Grid.Row="2" ImageSource="{StaticResource ConfirmBarterBackgroundImage}" HorizontalContentAlignment="Center" Slices="80,80,80,80" HorizontalAlignment="Center" Padding="20,32,50,20" Focusable="False" Margin="0,-8,0,8">
                    <ls:LSButton x:Name="FinishBarterButton"
                             VerticalAlignment="Center"
                             ContentTemplate="{StaticResource ControllerButtonHint}" 
                             Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIDelete'}"
                             BoundEvent="UIDelete"
                             Tag="{Binding Source='hdd985e2ag2c69g4f1bgb45cgcf54200f452d',Converter={StaticResource TranslatedStringConverter}}" 
                             Command="{Binding FinishBarter}"
                             SoundID="UI_HUD_Trade"
                             IsEnabled="{Binding TradeButtonsEnabled}"/>
                </ls:LSNineSliceImage>
            </Grid>

            <ControlTemplate.Triggers>
                <DataTrigger Value="True">
                    <DataTrigger.Binding>
                        <MultiBinding Converter="{StaticResource LessThanOrEqualMultiConverter}">
                            <Binding Path="TraderOfferGold"/>
                            <Binding Path="CharacterOfferGold"/>
                        </MultiBinding>
                    </DataTrigger.Binding>
                    <Setter TargetName="SplitScreenFeedbackText" Property="Text" Value="{Binding Source='ha669035bgb2b8g43d2g96ccgd1e9f19b35cc', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding TradeDeclined}" Value="True">
                    <Setter TargetName="SplitScreenFeedbackText" Property="Text" Value="{Binding Source='hcafd581bgb97eg4eecgb2fag0552bb2def60', Converter={StaticResource TranslatedStringConverter}}"/>
                    <Setter TargetName="SplitScreenFeedbackText" Property="Foreground" Value="{StaticResource LS_alertTxtColor}"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding TraderOfferGold, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                    <Setter TargetName="SplitScreenFeedbackContainer" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CharacterOfferGold, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                    <Setter TargetName="SplitScreenFeedbackContainer" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <MultiDataTrigger>
                    <!-- Fullscreen modifiers -->
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Layout}" Value="Common"/>
                        <Condition Binding="{Binding Data.AspectRatio, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0.5625}" Value="False"/>
                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="BarterMainPanel" Property="Width" Value="Auto"/>
                    <Setter TargetName="BarterMainPanel" Property="Height" Value="Auto"/>
                    <Setter TargetName="BarterMainPanel" Property="Style" Value="{StaticResource InventoryViewerFullScreenResources}"/>
                    <Setter TargetName="BarterButtonHolder" Property="Margin" Value="0,-32,0,0"/>

                    <Setter TargetName="SplitScreenFeedbackContainer" Property="Margin" Value="0,0,0,16"/>
                    
                    <Setter TargetName="BarterHeader" Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Control">
                                <Grid Width="{StaticResource HeaderWidthFullscreen}" Margin="0,120,0,22">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="360"/>
                                        <ColumnDefinition Width="360"/>
                                        <ColumnDefinition Width="*"/>
                                    </Grid.ColumnDefinitions>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto"/>
                                        <RowDefinition Height="Auto"/>
                                    </Grid.RowDefinitions>

                                    <ContentControl x:Name="InventoryFilterIndicator" Grid.Row="1" Grid.Column="0" HorizontalAlignment="Left" Template="{StaticResource FilterContainerTemplate}" DataContext="{Binding DataContext.CurrentPlayer.SelectedCharacter, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                                        <ls:LSButton x:Name="OpenFiltersButton" Template="{StaticResource ControllerButton.ImageSwitcher}" DataContext="{Binding DataContext.CurrentPlayer.UIData.InputEvents, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIFilter'}" BoundEvent="UIFilter" Width="{StaticResource ScaledControllerHintSize}" Height="{StaticResource ScaledControllerHintSize}" VerticalAlignment="Center">
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="LSButtonPressed">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding Visibility, ElementName=InventoryFilter}" Operator="NotEqual" RightOperand="Visible"/>
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <b:ChangePropertyAction TargetName="PanelsContainer" PropertyName="IsEnabled" Value="False"/>
                                                    <b:ChangePropertyAction TargetName="TraderInventoryContainer" PropertyName="IsEnabled" Value="False"/>
                                                    <b:ChangePropertyAction TargetName="PlayerOffer" PropertyName="IsEnabled" Value="False"/>
                                                    <b:ChangePropertyAction TargetName="TraderOffer" PropertyName="IsEnabled" Value="False"/>
                                                    <b:ControlStoryboardAction Storyboard="{StaticResource ShowInventoryFilterAnimation}"/>
                                                </b:EventTrigger>
                                                <b:EventTrigger EventName="LSButtonPressed">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding Visibility, ElementName=InventoryFilter}" Operator="Equal" RightOperand="Visible"/>
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <b:ChangePropertyAction TargetName="PanelsContainer" PropertyName="IsEnabled" Value="True"/>
                                                    <b:ChangePropertyAction TargetName="TraderInventoryContainer" PropertyName="IsEnabled" Value="True"/>
                                                    <b:ChangePropertyAction TargetName="PlayerOffer" PropertyName="IsEnabled" Value="True"/>
                                                    <b:ChangePropertyAction TargetName="TraderOffer" PropertyName="IsEnabled" Value="True"/>
                                                    <b:ControlStoryboardAction Storyboard="{StaticResource HideInventoryFilterAnimation}"/>
                                                </b:EventTrigger>
                                            </b:Interaction.Triggers>
                                        </ls:LSButton>
                                    </ContentControl>
                                    
                                    <!-- Selected item price -->
                                    <Control x:Name="SelectedItemInfo" Grid.Row="0" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center" Template="{StaticResource HoveredItemInfoTemplate}" Margin="0,0,60,6"/>

                                    <!-- Player side -->
                                    <StackPanel Grid.Row="1" Grid.Column="0" HorizontalAlignment="Right" Orientation="Horizontal" Margin="0,0,80,0">
                                        <TextBlock Text="{Binding Source='ha6564037g4678g44cdga274gadc09cbef56f', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TradeDefaultFontStyle}"/>
                                        <ContentPresenter ContentTemplate="{StaticResource GoldDisplay}" Content="{Binding CharacterInventoryGold, StringFormat={}{0:N0}}"/>
                                    </StackPanel>

                                    <!-- Player offer side -->
                                    <StackPanel Orientation="Vertical" Grid.Row="1" Grid.Column="1" Width="320" HorizontalAlignment="Center" Margin="0,0,30,0">
                                        <TextBlock Text="{Binding Source='h9dfe7c69g5f85g44b7gb808g8804da876f5a', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TradeDefaultFontStyle}" HorizontalAlignment="Center" TextAlignment="Center" FontSize="{StaticResource ScaledDefaultFontSize}" Margin="0,0,0,-8"/>
                                        <ContentPresenter  ContentTemplate="{StaticResource GoldDisplay}" HorizontalAlignment="Center" Content="{Binding CharacterOfferGold, StringFormat={}{0:N0}}"/>
                                    </StackPanel>

                                    <!-- Trader offer side -->
                                    <StackPanel Orientation="Vertical" Grid.Row="1" Grid.Column="2" Width="320" HorizontalAlignment="Center" Margin="30,0,0,0">
                                        <TextBlock Text="{Binding Source='h53954267gfe71g4db2g9f95g37c36987f774', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TradeDefaultFontStyle}" HorizontalAlignment="Center" TextAlignment="Center" FontSize="{StaticResource ScaledDefaultFontSize}" Margin="0,0,0,-8"/>
                                        <ContentPresenter ContentTemplate="{StaticResource GoldDisplay}" HorizontalAlignment="Center" Content="{Binding TraderOfferGold, StringFormat={}{0:N0}}"/>
                                    </StackPanel>

                                    <!-- Trader side -->
                                    <StackPanel Grid.Row="1" Grid.Column="3" Orientation="Horizontal" HorizontalAlignment="Left" Margin="80,0,0,0">
                                        <TextBlock Text="{Binding Source='h55e5ec72g331dg4dc9g9532g4a68ba0bc2a3', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Right" Style="{StaticResource TradeDefaultFontStyle}"/>
                                        <ContentPresenter ContentTemplate="{StaticResource GoldDisplay}" Content="{Binding TraderInventoryGold, StringFormat={}{0:N0}}" HorizontalAlignment="Right"/>
                                    </StackPanel>
                                    <TextBlock Grid.Row="1" Grid.Column="3" HorizontalAlignment="Right" TextAlignment="Right" Margin="0,0,20,0" Style="{StaticResource TradeDefaultFontStyle}" MaxWidth="700" TextTrimming="CharacterEllipsis">
                                        <ls:TextBlockFormatter.SourceText>
                                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                <Binding Source="hdfa67477g0567g4217gb4abg83be6c233543"/>
                                                <Binding Path="Trader.Name"/>
                                            </MultiBinding>
                                        </ls:TextBlockFormatter.SourceText>
                                    </TextBlock>
                                </Grid>

                                <ControlTemplate.Triggers>
                                    <DataTrigger Binding="{Binding FocusedElement.Tag, ElementName=Trade_c}" Value="TraderInventory">
                                        <Setter TargetName="SelectedItemInfo" Property="Grid.Column" Value="3"/>
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </MultiDataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Resources>

    <b:Interaction.Triggers>
        <b:EventTrigger EventName="MoveFocusUp">
            <ls:LSPlaySound Sound="UI_Shared_Hover" />
        </b:EventTrigger>

        <b:EventTrigger EventName="MoveFocusDown">
            <ls:LSPlaySound Sound="UI_Shared_Hover" />
        </b:EventTrigger>

        <b:EventTrigger EventName="MoveFocusLeft">
            <ls:LSPlaySound Sound="UI_Shared_Hover" />
        </b:EventTrigger>

        <b:EventTrigger EventName="MoveFocusRight">
            <ls:LSPlaySound Sound="UI_Shared_Hover" />
        </b:EventTrigger>

        <b:EventTrigger EventName="FocusChanged">
            <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding Path=FocusedElement, ElementName=Trade_c}"/>
        </b:EventTrigger>

    </b:Interaction.Triggers>

    <ls:UIWidget.Style>
        <Style TargetType="{x:Type ls:UIWidget}">
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate>
                        <Grid Background="{StaticResource Trade.Background}" ls:TooltipExtender.Owner="{Binding CurrentTradingCharacter}">
                            <Control x:Name="GridBackground" VerticalAlignment="Top" Margin="0,240,0,0">
                                <Control.Template>
                                    <ControlTemplate>
                                        <Grid>
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="*"/>
                                                <ColumnDefinition Width="Auto"/>
                                                <ColumnDefinition Width="*"/>
                                            </Grid.ColumnDefinitions>

                                            <Image Grid.Column="0" Source="{StaticResource TradeBackgroundBrush}" Stretch="Fill" VerticalAlignment="Center" Panel.ZIndex="1" Margin="-2,0" Height="1920"/>
                                            <StackPanel Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Center">
                                                <Control Template="{StaticResource DividerTemplate}" Margin="0,0,10,0"/>
                                                <Control Template="{StaticResource DividerTemplate}" Margin="10,0,0,0"/>
                                            </StackPanel>
                                            <Image Grid.Column="2" Source="{StaticResource TradeBackgroundBrush}" Stretch="Fill" VerticalAlignment="Center" Panel.ZIndex="1" Margin="-2,0" Height="1920"/>
                                        </Grid>
                                    </ControlTemplate>
                                </Control.Template>
                            </Control>

                            <!-- Screen gradients -->
                            <Rectangle x:Name="TopGradient" Height="312" VerticalAlignment="Top" HorizontalAlignment="Stretch">
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                        <GradientStop Color="Black" Offset="0"/>
                                        <GradientStop Color="#00000000" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>

                            <Rectangle x:Name="BottomGradient" Height="312" VerticalAlignment="Bottom" HorizontalAlignment="Stretch">
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="0,1" EndPoint="0,0">
                                        <GradientStop Color="Black" Offset="0"/>
                                        <GradientStop Color="#00000000" Offset="1"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>

                            <Rectangle x:Name="LeftGradient" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Visibility="Collapsed">
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                        <GradientStop Color="Black" Offset="0"/>
                                        <GradientStop Color="Black" Offset="0.2"/>
                                        <GradientStop Color="{StaticResource Trade.BackgroundColor}" Offset="0.25"/>
                                        <GradientStop Color="{StaticResource Trade.BackgroundTransparentColor}" Offset="0.33"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>

                            <Rectangle x:Name="RightGradient" VerticalAlignment="Stretch" HorizontalAlignment="Stretch" Visibility="Collapsed">
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="1,0" EndPoint="0,0">
                                        <GradientStop Color="Black" Offset="0"/>
                                        <GradientStop Color="Black" Offset="0.2"/>
                                        <GradientStop Color="{StaticResource Trade.BackgroundColor}" Offset="0.25"/>
                                        <GradientStop Color="{StaticResource Trade.BackgroundTransparentColor}" Offset="0.33"/>
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>

                            <Grid x:Name="TradingModeCarousel" HorizontalAlignment="Center" VerticalAlignment="Top" Focusable="False">
                                <Image Source="{StaticResource CarouselBottomImage}" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,-4"/>

                                <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                                    <ls:LSButton x:Name="SwitchToTradeButton" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UITabPrev, Converter={StaticResource FindInputEventConverter}}" BoundEvent="UITabPrev" Command="{Binding SetTradeMode}" Width="{StaticResource ScaledControllerHintSize}" Height="{StaticResource ScaledControllerHintSize}" VerticalAlignment="Center" IsEnabled="False">
                                        <b:Interaction.Triggers>
                                            <b:EventTrigger EventName="Click">
                                                <!-- Tutorial UI Event - Trade Mode Changed-->
                                                <b:InvokeCommandAction Command="{Binding TutorialEvent}" CommandParameter="4eff1cb5-03b4-4aec-9774-bf416f43d331"/>
                                            </b:EventTrigger>
                                        </b:Interaction.Triggers>
                                    </ls:LSButton>

                                    <ls:LSListBox x:Name="TradingModeCarouselList" HorizontalAlignment="Center" ItemContainerStyle="{StaticResource CarouselItemContainerStyle}" Margin="100,0">
                                        <ListBox.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </ListBox.ItemsPanel>

                                        <ls:LSListBoxItem x:Name="TradeTab" Content="h4d74c17cg64c1g4bbdgb6dag29a88b29bed2" Padding="40"/>
                                        <ls:LSListBoxItem x:Name="BarterTab" Content="hd4ebf395gca4fg40e5gbc16gf9b31778850a" Padding="40"/>
                                    </ls:LSListBox>

                                    <ls:LSButton x:Name="SwitchToBarterButton" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UITabNext, Converter={StaticResource FindInputEventConverter}}" BoundEvent="UITabNext" Command="{Binding SetTradeMode}" Width="{StaticResource ScaledControllerHintSize}" Height="{StaticResource ScaledControllerHintSize}" VerticalAlignment="Center" IsEnabled="False">
                                        <b:Interaction.Triggers>
                                            <b:EventTrigger EventName="Click">
                                                <!-- Tutorial UI Event - Trade Mode Changed-->
                                                <b:InvokeCommandAction Command="{Binding TutorialEvent}" CommandParameter="4eff1cb5-03b4-4aec-9774-bf416f43d331"/>
                                            </b:EventTrigger>
                                        </b:Interaction.Triggers>
                                    </ls:LSButton>
                                </StackPanel>
                            </Grid>

                            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,160" Orientation="Horizontal">

                                <!-- Left Character Panel -->
                                <Grid x:Name="SelectedCharacterHolder" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed" Focusable="False">
                                    <Control VerticalAlignment="Center" HorizontalAlignment="Center" Template="{StaticResource CharacterPanelTemplate}" DataContext="{Binding CurrentTradingCharacter}" ls:AttachedProperties.InheritedCharacter="{Binding CurrentTradingCharacter}"/>

                                    <StackPanel x:Name="CharacterCycleHolder" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,200" Visibility="{Binding CurrentPlayer.AssignedCharacters.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter=1}">
                                        <Image Source="{StaticResource SideArrowChunky}" Stretch="None" Opacity="0.7">
                                            <Image.RenderTransform>
                                                <ScaleTransform ScaleX="-1" CenterX="22"/>
                                            </Image.RenderTransform>
                                        </Image>

                                        <ls:LSButton ContentTemplate="{StaticResource ControllerButtonHint}" 
                                         Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='PartyManagement'}"
                                         Tag=" "
                                         BoundEvent="PartyManagement"
                                         Command="{Binding SwitchTraderCharacterCommand}"
                                         Margin="-20,0"/>

                                        <ls:LSButton ContentTemplate="{StaticResource ControllerButtonHint}" 
                                         Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='SpeakerSelect'}"
                                         Tag=" "
                                         BoundEvent="SpeakerSelect"
                                         Command="{Binding SwitchTraderCharacterCommand}"
                                         CommandParameter="{StaticResource TrueValue}"
                                         Margin="-20,0"/>

                                        <Image Source="{StaticResource SideArrowChunky}" Stretch="None" Opacity="0.7"/>
                                    </StackPanel>
                                </Grid>

                                <!-- Trade/Barter Main Panel -->
                                <Control x:Name="MainPanel" HorizontalAlignment="Center" VerticalAlignment="Top" ls:AttachedProperties.InheritedCharacter="{Binding CurrentTradingCharacter}"/>

                                <!-- Right Character Panel -->
                                <Control x:Name="TraderHolder" HorizontalAlignment="Center" VerticalAlignment="Center"
                            Template="{StaticResource CharacterPanelTemplate}"
                            DataContext="{Binding Trader}"
                            Visibility="Collapsed"
                            Focusable="False"/>

                            </StackPanel>

                            <StackPanel x:Name="PlayerTradeInfosHolder" HorizontalAlignment="Left" VerticalAlignment="Bottom" Orientation="Vertical" Width="520" Margin="28,0,0,132">
                                <TextBlock x:Name="PlayerTraderText" HorizontalAlignment="Left" Style="{StaticResource TradeDefaultFontStyle}" Foreground="{StaticResource LS_accent25TxtColor}" FontWeight="DemiBold">
                        <ls:TextBlockFormatter.SourceText>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="h7009aad2g6ddcg4538gb36eg69f1ff88c5a3"/>
                                <Binding Path="PlayerTraderCharacter.Name"/>
                            </MultiBinding>
                        </ls:TextBlockFormatter.SourceText>
                                </TextBlock>
                                <StackPanel x:Name="PersuasionTraderScore" Orientation="Horizontal" HorizontalAlignment="Left">
                                    <TextBlock Text="{Binding Source='h14bb9693gd799g4f59gadcegea99171059cd', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TradeDefaultFontStyle}" Foreground="{StaticResource LS_accent25TxtColor}" FontWeight="DemiBold"/>
                                    <TextBlock Text="{Binding PlayerTraderCharacter.Stats.Abilities[5].Skills[3].Value, StringFormat='{}{0:+#;-#;+0}'}" Style="{StaticResource TradeScoreModifierFontStyle}"/>
                                </StackPanel>
                            </StackPanel>

                            <StackPanel x:Name="TraderTradeInfosHolder" HorizontalAlignment="Right" VerticalAlignment="Bottom" Orientation="Vertical" Width="520" Margin="0,0,36,130" Focusable="False">
                                <StackPanel x:Name="AttitudeTraderScore" HorizontalAlignment="Right" Orientation="Horizontal">
                                    <TextBlock Text="{Binding Source='h4e36d1fcg7068g4b66gad4cg394ed4a323eb', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TradeDefaultFontStyle}" Foreground="{StaticResource LS_accent25TxtColor}" FontWeight="DemiBold"/>
                                    <TextBlock Text="{Binding Trader.Attitude, StringFormat='{}{0:+#;-#;+0}'}" Style="{StaticResource TradeScoreModifierFontStyle}"/>
                                </StackPanel>

                                <StackPanel x:Name="TraderPriceModifier" HorizontalAlignment="Right" Orientation="Horizontal">
                                    <TextBlock x:Name="PriceModifierLabel" Text="{Binding Source='h528cd8b0gb1d2g43beg8ca0gf0449478ef7e', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource TradeDefaultFontStyle}" Foreground="{StaticResource LS_accent25TxtColor}" FontWeight="DemiBold"/>
                                    <TextBlock Text="{Binding PriceModifierPercentage, StringFormat='{}{0:-#;+#;+0}%'}" Style="{StaticResource TradeScoreModifierFontStyle}"/>
                                </StackPanel>
                            </StackPanel>

                            <!-- Controller buttons -->
                            <StackPanel x:Name="GlobalButtonPromptsHolder" Style="{StaticResource ButtonHint.Container.Center}" Focusable="False">

                                <!-- Sorting button hints -->
                                <ls:LSButton x:Name="SelectSortOptionButton"
							 Command="{Binding SelectTradeSortCommand}"
                             CommandParameter="{Binding Path=FocusedElement.(ls:AttachedProperties.InheritedTag), RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
							 BoundEvent="UIAccept"
							 ContentTemplate="{StaticResource ControllerButtonHint}"
							 Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
							 Tag="{Binding Source='h04f38549g65b8g4b72g834eg87ee8863fdc5', Converter={StaticResource TranslatedStringConverter}}"
							 Visibility="Collapsed">
                                </ls:LSButton>

                                <ls:LSButton x:Name="SelectFilterOptionButton"
							 Command="{Binding SelectFilterCommand}"
                             CommandParameter="{Binding Path=FocusedElement.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
							 BoundEvent="UIAccept"
							 ContentTemplate="{StaticResource ControllerButtonHint}"
							 Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
							 Tag="{Binding Source='h04f38549g65b8g4b72g834eg87ee8863fdc5', Converter={StaticResource TranslatedStringConverter}}"
							 Visibility="Collapsed">
                                </ls:LSButton>

                                <ls:LSButton x:Name="ActionButton"
                                 ContentTemplate="{StaticResource ControllerButtonHint}"
                                 Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
                                 Margin="20,0" 
                                 EatInput="True"
                                 BoundEvent="UIAccept"
                                 IsEnabled="False"
                                 Tag="{Binding Source='h3c432a90g0495g4e93ga81cg94beba390222',Converter={StaticResource TranslatedStringConverter}}"
                                 Command="{Binding MoveTradeItem}"
                                 CommandParameter="{Binding Path=FocusedElement.DataContext, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>

                                <ls:LSButton x:Name="BalanceOfferButton"
                                 Margin="20,0"
                                 ContentTemplate="{StaticResource ControllerButtonHint}"
                                 Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='ContextMenu'}"
                                 BoundEvent="ContextMenu"
                                 Tag="{Binding Source='hb0e3f01fg505eg43ffg87e0g088ea4853d46',Converter={StaticResource TranslatedStringConverter}}" 
                                 Command="{Binding BalanceTrade}"
                                 Visibility="Collapsed"
                                 IsEnabled="False"/>

                                <StackPanel x:Name="SellWaresTradeHolder" Margin="20,0" Orientation="Horizontal" IsEnabled="{Binding HasWares}" Visibility="Collapsed">
                                    <ls:LSButton Style="{StaticResource ControllerHoldButtonStyle}"
                                     DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='ContextMenu'}"
                                     BoundEvent="ContextMenu"
                                     Tag="{Binding Source='hcb2f0ae8g4b71g475bgbf9bgb026d2d5cdcb',Converter={StaticResource TranslatedStringConverter}}" 
                                     Command="{Binding DataContext.SellWares, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                    <ContentControl x:Name="WaresGoldValue" ContentTemplate="{StaticResource GoldDisplay}" Content="{Binding WaresValue}" VerticalAlignment="Center" FontFamily="{StaticResource SpecialFont}" FontWeight="Bold"/>
                                </StackPanel>

                                <ls:LSButton x:Name="ToggleTooltipButton" ContentTemplate="{StaticResource ControllerButtonHint}"
                                 Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIShowInfo'}"
                                 BoundEvent="UIShowInfo"
                                 Margin="20,0" 
                                 Tag="{Binding Source='h07aaca85g63dbg4e60g88a2g0590077ea7e2',Converter={StaticResource TranslatedStringConverter}}" 
                                 Command="{Binding ToggleTooltipOnUIElement}"
                                 CommandParameter="{Binding Path=FocusedElement, ElementName=Trade_c}"/>

                                <ls:LSInputBinding x:Name="PinTooltipBinding" Style="{StaticResource PinTooltipBindingStyle}"/>

                                <ls:LSButton x:Name="CloseWidgetButton" ContentTemplate="{StaticResource ControllerButtonHint}" 
                                 Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancel'}"
                                 BoundEvent="UICancel"
                                 Margin="20,0" 
                                 Tag="{Binding Source='h6fefa28bg2149g4cacga071gd95b236b2d0b',Converter={StaticResource TranslatedStringConverter}}" 
                                 Command="{Binding CustomEvent}"
                                 SoundID="UI_Shared_Cancel"
                                 CommandParameter="CloseWidget"/>
                            </StackPanel>

                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Loaded">
                                    <ls:LSPlaySound Sound="UI_HUD_Inventory_Open"/>
                                    <b:InvokeCommandAction Command="{Binding EnableTooltipOnUIElement}"/>
                                </b:EventTrigger>

                                <b:EventTrigger EventName="Unloaded">
                                    <ls:LSPlaySound Sound="UI_HUD_Inventory_Close"/>
                                    <b:InvokeCommandAction Command="{Binding HideTooltipOnUIElement}"/>
                                    <b:ControlStoryboardAction Storyboard="{DynamicResource ShowInventoryFilterAnimation}" ControlStoryboardOption="Stop" />
                                    <b:ControlStoryboardAction Storyboard="{DynamicResource HideInventoryFilterAnimation}" ControlStoryboardOption="Stop" />
                                </b:EventTrigger>

                                <b:StoryboardCompletedTrigger Storyboard="{StaticResource ShowInventoryFilterAnimation}">
                                    <ls:SetMoveFocusAction TargetName="Trade_c"/>
                                </b:StoryboardCompletedTrigger>

                                <b:StoryboardCompletedTrigger Storyboard="{StaticResource HideInventoryFilterAnimation}">
                                    <ls:SetMoveFocusAction TargetName="Trade_c"/>
                                </b:StoryboardCompletedTrigger>
                            </b:Interaction.Triggers>
                        </Grid>

                        <ControlTemplate.Triggers>
                            <DataTrigger Binding="{Binding Mode}" Value="Barter">
                                <Setter TargetName="SwitchToTradeButton" Property="IsEnabled" Value="True"/>
                                <Setter TargetName="MainPanel" Property="Template" Value="{StaticResource BarterMainPanelTemplate}"/>
                                <Setter TargetName="TradingModeCarouselList" Property="SelectedValue" Value="{Binding ElementName=BarterTab, Mode=OneWay}"/>

                                <Setter TargetName="BalanceOfferButton" Property="Visibility" Value="Visible"/>

                                <Setter TargetName="GridBackground" Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <Grid>
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition Width="*"/>
                                                    <ColumnDefinition Width="Auto"/>
                                                    <ColumnDefinition Width="*"/>
                                                </Grid.ColumnDefinitions>

                                                <Image Grid.Column="0" Source="{StaticResource TradeBackgroundBrush}" Stretch="Fill" VerticalAlignment="Center" Panel.ZIndex="1" Margin="-2,0" Height="1920"/>
                                                <StackPanel Grid.Column="1" Orientation="Horizontal" VerticalAlignment="Center">
                                                    <Control Template="{StaticResource DividerTemplate}" VerticalAlignment="Center" Panel.ZIndex="2"/>
                                                    <Image Source="{StaticResource BarterBackgroundBrush}" Stretch="Fill" Width="320" Height="1920" Margin="-2,0" Panel.ZIndex="1"/>
                                                    <Control Template="{StaticResource DividerTemplate}" VerticalAlignment="Center" Margin="0,0,10,0" Panel.ZIndex="2"/>
                                                    <Control Template="{StaticResource DividerTemplate}" VerticalAlignment="Center" Margin="10,0,0,0" Panel.ZIndex="2"/>
                                                    <Image Source="{StaticResource BarterBackgroundBrush}" Stretch="Fill" Width="320" Height="1920" Margin="-2,0" Panel.ZIndex="1"/>
                                                    <Control Template="{StaticResource DividerTemplate}" VerticalAlignment="Center" Panel.ZIndex="2"/>
                                                </StackPanel>
                                                <Image Grid.Column="2" Source="{StaticResource TradeBackgroundBrush}" Stretch="Fill" VerticalAlignment="Center" Panel.ZIndex="1" Margin="-2,0" Height="1920"/>
                                            </Grid>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding Mode}" Value="Trade">
                                <Setter TargetName="SwitchToBarterButton" Property="IsEnabled" Value="True"/>
                                <Setter TargetName="MainPanel" Property="Template" Value="{StaticResource TradeMainPanelTemplate}"/>
                                <Setter TargetName="TradingModeCarouselList" Property="SelectedValue" Value="{Binding ElementName=TradeTab, Mode=OneWay}"/>

                                <!-- Controller inputs -->
                                <Setter TargetName="ActionButton" Property="Command" Value="{Binding TradeItemCommand}"/>
                                <Setter TargetName="ActionButton" Property="Tag" Value="{Binding Source='h54090505gc862g4d25ga843gc8694f47b289',Converter={StaticResource TranslatedStringConverter}}"/>

                                <Setter TargetName="SellWaresTradeHolder" Property="Visibility" Value="Visible"/>
                            </DataTrigger>

                            <DataTrigger Value="True">
                                <DataTrigger.Binding>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding Path="PlayerTraderCharacter"/>
                                        <Binding Path="CurrentTradingCharacter"/>
                                    </MultiBinding>
                                </DataTrigger.Binding>
                                <Setter TargetName="PlayerTraderText" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="PlayerTradeInfosHolder" Property="Margin" Value="28,0,0,200"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding PriceModifierPercentage, Converter={StaticResource LessThanConverter}, ConverterParameter=0}" Value="True">
                                <Setter TargetName="PriceModifierLabel" Property="Text" Value="{Binding Source='h37912203gd0a3g49e8ga932ga166987cb5d4', Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>

                            <MultiDataTrigger>
                                <!-- Hiding some trader stats while a feedback is present while split screen is active-->
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Mode}" Value="Barter"/>
                                    <Condition Binding="{Binding TraderFeedback, Converter={StaticResource NullToBoolFalseConverter}, ConverterParameter='EmptyString'}" Value="True"/>
                                </MultiDataTrigger.Conditions>

                                <Setter TargetName="TraderTradeInfosHolder" Property="Visibility" Value="Hidden"/>
                            </MultiDataTrigger>

                            <!-- Button prompts triggers -->
                            <DataTrigger Binding="{Binding FocusedElement.DataContext, Converter={StaticResource TypeConverter}, ElementName=Trade_c}" Value="ls.VMItem">
                                <Setter TargetName="ActionButton" Property="IsEnabled" Value="True"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding FocusedElement.Tag, ElementName=Trade_c}" Value="Offer">
                                <Setter TargetName="ActionButton" Property="Tag" Value="{Binding Source='h62b2b489g40c9g41f9ga491g947bb2b515fa',Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding FocusedElement.Tag, ElementName=Trade_c}" Value="Trader">
                                <Setter TargetName="ActionButton" Property="Tag" Value="{Binding Source='hbb16187agd102g46dag9400gfa9bf782ac1b',Converter={StaticResource TranslatedStringConverter}}"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding FocusedElement.Tag, RelativeSource={RelativeSource Mode=Self}}" Value="Sort">
                                <Setter TargetName="CloseWidgetButton" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="ActionButton" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="SellWaresTradeHolder" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="ToggleTooltipButton" Property="Visibility" Value="Collapsed"/>

                                <Setter TargetName="SelectSortOptionButton" Property="Visibility" Value="Visible"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding FocusedElement.Tag, RelativeSource={RelativeSource Mode=Self}}" Value="InventoryFilter">
                                <Setter TargetName="CloseWidgetButton" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="ActionButton" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="SellWaresTradeHolder" Property="Visibility" Value="Collapsed"/>
                                <Setter TargetName="ToggleTooltipButton" Property="Visibility" Value="Collapsed"/>

                                <Setter TargetName="SelectFilterOptionButton" Property="Visibility" Value="Visible"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding FocusedElement.Tag, ElementName=Trade_c}" Value="PartyExpanded">
                                <Setter TargetName="ActionButton" Property="Tag" Value="{Binding Source='h0abdb3d7g4b7ag4f00gbb71g5d9d3b1767e4',Converter={StaticResource TranslatedStringConverter}}"/>
                                <Setter TargetName="ActionButton" Property="IsEnabled" Value="True"/>
                                <Setter TargetName="ActionButton" Property="Command" Value="{x:Null}"/>
                                <Setter TargetName="ActionButton" Property="EatInput" Value="False"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding FocusedElement.Tag, ElementName=Trade_c}" Value="PartyCollapsed">
                                <Setter TargetName="ActionButton" Property="Tag" Value="{Binding Source='h96519a3dg3102g441dg8336g0c0e10f4c388',Converter={StaticResource TranslatedStringConverter}}"/>
                                <Setter TargetName="ActionButton" Property="IsEnabled" Value="True"/>
                                <Setter TargetName="ActionButton" Property="Command" Value="{x:Null}"/>
                                <Setter TargetName="ActionButton" Property="EatInput" Value="False"/>
                            </DataTrigger>

                            <DataTrigger Binding="{Binding HasWares}" Value="False">
                                <Setter TargetName="WaresGoldValue" Property="Opacity" Value="{StaticResource ControllerButton.DisabledOpacity}"/>
                            </DataTrigger>

                            <DataTrigger Value="False">
                                <DataTrigger.Binding>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding Path="CharacterOfferGold"/>
                                        <Binding Path="TraderOfferGold"/>
                                    </MultiBinding>
                                </DataTrigger.Binding>

                                <Setter TargetName="BalanceOfferButton" Property="IsEnabled" Value="True"/>
                            </DataTrigger>

                            <!-- Fullscreen modifiers -->
                            <MultiDataTrigger>
                                <MultiDataTrigger.Conditions>
                                    <Condition Binding="{Binding Layout}" Value="Common"/>
                                    <Condition Binding="{Binding Data.AspectRatio, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0.5625}" Value="False"/>
                                </MultiDataTrigger.Conditions>

                                <Setter TargetName="SelectedCharacterHolder" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="TraderHolder" Property="Visibility" Value="Visible"/>

                                <Setter TargetName="PlayerTradeInfosHolder" Property="Margin" Value="0,0,3320,240"/>
                                <Setter TargetName="PlayerTradeInfosHolder" Property="HorizontalAlignment" Value="Center"/>
                                <Setter TargetName="PlayerTradeInfosHolder" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="PlayerTraderText" Property="HorizontalAlignment" Value="Center"/>
                                <Setter TargetName="PersuasionTraderScore" Property="HorizontalAlignment" Value="Center"/>

                                <Setter TargetName="TraderTradeInfosHolder" Property="Margin" Value="3320,0,0,240"/>
                                <Setter TargetName="TraderTradeInfosHolder" Property="HorizontalAlignment" Value="Center"/>
                                <Setter TargetName="TraderTradeInfosHolder" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="AttitudeTraderScore" Property="HorizontalAlignment" Value="Center"/>
                                <Setter TargetName="TraderPriceModifier" Property="HorizontalAlignment" Value="Center"/>

                                <Setter TargetName="LeftGradient" Property="Visibility" Value="Visible"/>
                                <Setter TargetName="RightGradient" Property="Visibility" Value="Visible"/>
                            </MultiDataTrigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding Mode}" Value="Donate">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <ControlTemplate.Resources>
                                    <System:UInt32 x:Key="invRows">11</System:UInt32>
                                    <System:UInt32 x:Key="invCols">7</System:UInt32>
                                    <System:Double x:Key="invWidth">844</System:Double>
                                </ControlTemplate.Resources>
                                <Grid Background="{StaticResource LS_PopUpBackgroundColor}" x:Name="RootDonatePanel">
                                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                                        <ls:LSNineSliceImage Slices="48 40 48 100" VerticalAlignment="Center" HorizontalAlignment="Center" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Container/container_background.png">
                                            <ls:LSNineSliceImage.Resources>
                                                <System:Double x:Key="InventoryMinH">342</System:Double>
                                            </ls:LSNineSliceImage.Resources>

                                            <ScrollViewer Template="{StaticResource MinimalisticScrollViewerTemplate}" HorizontalAlignment="Center" Margin="60, 50, 50, 150" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto" Height="840">
                                                <ItemsControl x:Name="PanelsContainer" Style="{StaticResource PartyHolderStyle}" Margin="10,10,10,10"/>
                                            </ScrollViewer>

                                        </ls:LSNineSliceImage>
                                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" Margin="0,-140,0,140">
                                            <ls:LSButton x:Name="DonateButton"
							                    Command="{Binding DonateItemsCommand}"
                                                CommandParameter="{Binding FocusedElement.DataContext, RelativeSource={RelativeSource Mode=TemplatedParent}}"
                                                BoundEvent="UIAccept"
							                    ContentTemplate="{StaticResource ControllerButtonHint}"
							                    Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
							                    Tag="{Binding Source='h613a8245g0881g470bgb9a1ga060c50db2ed', Converter={StaticResource TranslatedStringConverter}}" 
                                                IsEnabled="True"/>
                                            <ls:LSButton x:Name="CloseButton"
							                    Command="{Binding CustomEvent}"
                                                CommandParameter="CloseWidget"
							                    BoundEvent="UICancel"
							                    ContentTemplate="{StaticResource ControllerButtonHint}"
							                    Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancel'}"
							                    Tag="{Binding Source='hff1685e4g3845g4846g99bfg219ae73ce55d', Converter={StaticResource TranslatedStringConverter}}"/>
                                        </StackPanel>
                                    </StackPanel>
                                    
                                    <StackPanel x:Name="GlobalButtonPromptsHolder" VerticalAlignment="Bottom" HorizontalAlignment="Center" Orientation="Horizontal" Height="180" Focusable="False">

                                        <ls:LSButton x:Name="ToggleTooltipButton" ContentTemplate="{StaticResource ControllerButtonHint}"
                                        Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIShowInfo'}"
                                        BoundEvent="UIShowInfo"
                                        Margin="20,0" 
                                        Tag="{Binding Source='h07aaca85g63dbg4e60g88a2g0590077ea7e2',Converter={StaticResource TranslatedStringConverter}}" 
                                        Command="{Binding ToggleTooltipOnUIElement}"
                                        CommandParameter="{Binding Path=FocusedElement, ElementName=Trade_c}"/>

                                        <ls:LSInputBinding x:Name="PinTooltipBinding" Style="{StaticResource PinTooltipBindingStyle}"/>
                                    </StackPanel>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <DataTrigger Binding="{Binding FocusedElement.DataContext, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource TypeConverter}}" Value="ls.VMInventorySlot">
                                        <Setter TargetName="DonateButton" Property="IsEnabled" Value="True"/>
                                    </DataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </ls:UIWidget.Style>
</ls:UIWidget>