<ls:UIWidget x:Name="ReactionDecisionPopup"
             ls:UIWidget.ContextName="ReactionDecision"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"   
             mc:Ignorable="d"
             d:DataContext="{d:DesignInstance {x:Type ls:DCReactionDecision}, IsDesignTimeCreatable=True}"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             d:DesignWidth="3840" d:DesignHeight="2160">
    <Border x:Name="InterruptPopup" Visibility="{Binding Data.InterruptEvents.Count, Converter={StaticResource CountToVisibilityConverter}}">
        <ItemsControl ItemsSource="{Binding Data.InterruptEvents}">
            <ItemsControl.ItemsPanel>
                <ItemsPanelTemplate>
                    <Grid  />
                </ItemsPanelTemplate>
            </ItemsControl.ItemsPanel>
            <ItemsControl.ItemTemplate>
                <DataTemplate DataType="{x:Type ls:VMInterruptEvent}">
                    <DataTemplate.Resources>
                        <System:Double x:Key="borderRadius">24</System:Double>

                        <Storyboard x:Key="AnimateInPanel" >
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)"  Storyboard.TargetName="Panel">
                                <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.30" Value="1">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CubicEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>

                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="Panel" FillBehavior="Stop">
                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="200"/>
                                <EasingDoubleKeyFrame KeyTime="0:0:0.30" Value="0">
                                    <EasingDoubleKeyFrame.EasingFunction>
                                        <CubicEase EasingMode="EaseOut"/>
                                    </EasingDoubleKeyFrame.EasingFunction>
                                </EasingDoubleKeyFrame>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                        <ControlTemplate x:Key="CharacterList" TargetType="ContentControl">
                            <ItemsControl ItemsSource="{TemplateBinding Content}" HorizontalAlignment="Center" Background="Transparent">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Vertical" />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate DataType="ls:VMInterruptor">
                                        <StackPanel MinHeight="10" MinWidth="10" Orientation="Horizontal" x:Name="InterruptorRoot" Margin="0,8" ls:TooltipExtender.Owner="{Binding Character}" >
                                            <ContentPresenter x:Name="Portrait" ContentTemplate="{StaticResource CharacterPortraitTemplate}" Content="{Binding Character}" Margin="0,0,0,0"/>
                                            <StackPanel Margin="0,12,0,0">
                                                <ItemsControl ItemsSource="{Binding Path=InterruptDecisions}" HorizontalAlignment="Left" Background="Transparent">
                                                    <ItemsControl.ItemsPanel>
                                                        <ItemsPanelTemplate>
                                                            <StackPanel Orientation="Vertical" />
                                                        </ItemsPanelTemplate>
                                                    </ItemsControl.ItemsPanel>
                                                    <ItemsControl.ItemTemplate>
                                                        <DataTemplate DataType="ls:VMInterruptDecision">
                                                            <ls:LSRadioButton x:Name="ReactButton" GroupName="{Binding Owner.Character.EntityHandle.Str}" Command="{Binding DataContext.InterruptReactCommand,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Template="{StaticResource InterruptToggleBtnTemplate}" Content="{Binding Interrupt}" HorizontalAlignment="Left">
                                                                <ls:LSRadioButton.CommandParameter>
                                                                    <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                                        <Binding Path="."/>
                                                                        <Binding Path="DataContext" ElementName="InterruptorRoot"/>
                                                                    </MultiBinding>
                                                                </ls:LSRadioButton.CommandParameter>
                                                            </ls:LSRadioButton>
                                                            <DataTemplate.Triggers>
                                                                <DataTrigger Binding="{Binding Decision}" Value="Use">
                                                                    <Setter TargetName="ReactButton" Property="IsChecked" Value="True"/>
                                                                </DataTrigger>
                                                            </DataTemplate.Triggers>
                                                        </DataTemplate>
                                                    </ItemsControl.ItemTemplate>
                                                </ItemsControl>

                                                <!--DO NOT REACT-->
                                                <ls:LSRadioButton x:Name="DontReactButton" GroupName="{Binding Character.EntityHandle.Str}" Command="{Binding DataContext.InterruptDontReactCommand,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Template="{StaticResource InterruptToggleBtnTemplate}" Content="{Binding Source=ha13dce2cgf0cfg4b73g9fb7gc12b29c68a6b , Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Left" CommandParameter="{Binding .}" Height="72">
                                                </ls:LSRadioButton>

                                            </StackPanel>
                                        </StackPanel>

                                        <DataTemplate.Triggers>
                                            <DataTrigger Binding="{Binding Path=DoesntReact}" Value="True">
                                                <Setter TargetName="DontReactButton" Property="IsChecked" Value="True"/>
                                            </DataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </ControlTemplate>
                        <ControlTemplate x:Key="InterruptedList" TargetType="ContentControl">
                            <ItemsControl ItemsSource="{TemplateBinding Content}"  Background="Transparent" Width="930">
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Vertical" />
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate DataType="ls:Character">
                                        <StackPanel MinHeight="10" MinWidth="10" Orientation="Horizontal" x:Name="InterruptorRoot">
                                            <ContentPresenter x:Name="Portrait" ContentTemplate="{StaticResource CharacterPortraitTemplate}" Content="{Binding .}"/>
                                            <TextBlock Foreground="{StaticResource LS_baseTxtColor}" VerticalAlignment="Center" Margin="52,0,0,0">
                                                <TextBlock.Text>
                                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                        <Binding Source="heb56c0degea37g48dcga2f6g0ce95d14ffd1"/>
                                                        <Binding Path="Name"/>
                                                    </MultiBinding>
                                                </TextBlock.Text>
                                            </TextBlock>
                                        </StackPanel>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>
                        </ControlTemplate>

                        <DataTemplate x:Key="SinglePlayerEntry" DataType="ls:Player">
                            <StackPanel>
                                <ContentControl Content="{Binding DataContext.Interruptors, ElementName=EventRoot}" Template="{StaticResource CharacterList}" HorizontalAlignment="Center"/>
                            </StackPanel>
                        </DataTemplate>

                        <DataTemplate x:Key="PlayerEntry" DataType="ls:Player">
                            <DataTemplate.Resources>
                                <SolidColorBrush x:Key="fill_guest" Opacity="0.6" Color="{StaticResource guestAccent00}"/>
                            </DataTemplate.Resources>
                            <Grid x:Name="playerRoot" Margin="0,0,0,16">
                                <Grid.IsEnabled>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="DataContext.CurrentPlayer"/>
                                        <Binding Path="."/>
                                    </MultiBinding>
                                </Grid.IsEnabled>
                                <b:Interaction.Behaviors>
                                    <ls:CollectionFilterBehavior x:Name="charactersFiltered" ItemsSource="{Binding DataContext.Interruptors, ElementName=InterruptEventRoot}" Predicate="{Binding DataContext.Data.PredicateInterruptorOwnerUser,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" CompareParam="{Binding .}"/>
                                </b:Interaction.Behaviors>
                                <Rectangle x:Name="decoBorder" Stroke="{StaticResource LS_baseTxtColor}" StrokeThickness="4" RadiusX="{StaticResource borderRadius}" RadiusY="{StaticResource borderRadius}" StrokeDashArray="4 4" Margin="80,0,0,0" Fill="Transparent">
                                    <Rectangle.Effect>
                                        <DropShadowEffect ShadowDepth="0" BlurRadius="10"/>
                                    </Rectangle.Effect>
                                </Rectangle>

                                <StackPanel Orientation="Horizontal" Margin="20">
                                    <Rectangle Fill="{Binding CommunityIcon}" Height="110" Width="110" Margin="0,60,0,0" VerticalAlignment="Top" ToolTipService.ShowOnDisabled="True">
                                        <Rectangle.ToolTip>
                                            <ls:LSTooltip Content="{Binding ElementName=decoBorder,Path=DataContext.Name}"/>
                                        </Rectangle.ToolTip>
                                    </Rectangle>
                                    <StackPanel>
                                        <ContentControl Content="{Binding FilteredItems,ElementName=charactersFiltered}" Template="{StaticResource CharacterList}" HorizontalAlignment="Center"/>
                                    </StackPanel>
                                </StackPanel>
                            </Grid>

                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding IsEnabled,ElementName=playerRoot}" Value="False">
                                    <Setter TargetName="decoBorder" Property="Stroke" Value="{StaticResource LS_guestAccent100}"/>
                                    <Setter TargetName="decoBorder" Property="Fill" Value="{StaticResource fill_guest}"/>
                                    <Setter TargetName="playerRoot" Property="Opacity" Value="0.4"/>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=FilteredItems.Count,ElementName=charactersFiltered}" Value="0"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="playerRoot" Property="Visibility" Value="Collapsed"/>
                                </MultiDataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>


                        <Style x:Key="TitleParamRun" TargetType="ls:LSRun" BasedOn="{StaticResource CombatLog.Tooltip.ParamRun}">
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding Type}" Value="DiceValue">
                                    <Setter Property="Foreground" Value="{StaticResource LS_specialTxtColor}"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </DataTemplate.Resources>
                    <!--Border is needed for the LSMouseDragElementBehavior so it has a parent it can keep inside of-->
                    <Grid x:Name="EventRoot">
                        <Grid.Resources>
                            <BitmapImage x:Key="InterruptsPopupBG" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/reactionsPopover_bg.png"/>
                            <BitmapImage x:Key="HighlightHotspotImg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Reactions/reactionsPopover_bg_texture.png"/>

                        </Grid.Resources>
                        <ls:LSNineSliceImage x:Name="Panel" ImageSource="{StaticResource InterruptsPopupBG}" Slices="100,200,100,106" IconWidth="240" VerticalAlignment="Bottom" Margin="0,0,0,360" HorizontalAlignment="Center" Padding="76" MaxWidth="1400">
                            <ls:LSNineSliceImage.RenderTransform>
                                <TranslateTransform />
                            </ls:LSNineSliceImage.RenderTransform>
                            <b:Interaction.Behaviors>
                                <ls:LSMouseDragElementBehavior />
                            </b:Interaction.Behaviors>
                            <Grid x:Name="InterruptEventRoot">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <StackPanel VerticalAlignment="Center">
                                    <TextBlock TextWrapping="Wrap" TextAlignment="Center" Margin="12,12,12,24">
	                                    <b:Interaction.Behaviors>
		                                    <ls:CtxTransStringRunGeneratorBehavior Source="{Binding Description}" ParamRunStyle="{StaticResource TitleParamRun}"/>
	                                    </b:Interaction.Behaviors>
                                    </TextBlock>
                                    <Grid>
                                        <Image x:Name="HighlightCTA" Source="{StaticResource HighlightHotspotImg}" Stretch="Fill" Margin="0,0,0,-1116" VerticalAlignment="Top" HorizontalAlignment="Stretch" Width="1000" Height="400"/>
                                        <TextBlock Name="ReactCTA" Text="{Binding Source=hb49a2b0ag17d5g4171g9060gffc9684f2189,Converter={StaticResource TranslatedStringConverter}}" TextAlignment="Center" Foreground="{StaticResource LS_accent75TxtColor}" FontSize="{StaticResource SmallishFontSize}" Margin="0,20,0,20" VerticalAlignment="Top"/>
                                    </Grid>
                                </StackPanel>

                                <ScrollViewer Grid.Row="1" HorizontalScrollBarVisibility="Disabled" VerticalScrollBarVisibility="Auto">
                                    <StackPanel Margin="24,0,24,20">
                                        <ContentPresenter  x:Name="MainPlayer" VerticalAlignment="Top" Content="{Binding DataContext.CurrentPlayer, ElementName=ReactionDecisionPopup}" ContentTemplate="{StaticResource PlayerEntry }" />

                                        <ItemsControl x:Name="MultiPlayerList" Visibility="Visible"  ItemsSource="{Binding DataContext.Data.Players, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" HorizontalAlignment="Center" Background="Transparent" ItemTemplate="{StaticResource PlayerEntry}">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel Orientation="Vertical" />
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                            <ItemsControl.ItemContainerStyle>
                                                <Style TargetType="ContentPresenter">
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                    <Style.Triggers>
                                                        <DataTrigger Value="True">
                                                            <DataTrigger.Binding>
                                                                <MultiBinding Converter="{StaticResource EqualConverter}">
                                                                    <Binding Path="." />
                                                                    <Binding Path="DataContext.CurrentPlayer" ElementName="ReactionDecisionPopup"/>
                                                                </MultiBinding>
                                                            </DataTrigger.Binding>
                                                            <Setter Property="Visibility" Value="Collapsed" />
                                                        </DataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </ItemsControl.ItemContainerStyle>
                                        </ItemsControl>
                                    </StackPanel>
                                </ScrollViewer>

                                <!--CLOSE BUTTON-->
                                <ls:LSButton x:Name="CloseButton" Visibility="Collapsed" Style="{DynamicResource SmallCloseButton}" SoundID="UI_Shared_Cancel" HorizontalAlignment="Right" VerticalAlignment="Top" BoundEvent="UICancel" Margin="0,0,0,0">
                                    <b:Interaction.Triggers>
                                        <b:EventTrigger EventName="Click" >
                                            <b:ChangePropertyAction TargetName="Panel" PropertyName="Visibility" Value="Collapsed"/>
                                            <b:ChangePropertyAction TargetName="ShortPanelReactWaiting" PropertyName="Visibility" Value="Visible"/>
                                            <ls:LSPlaySound Sound="UI_DefaultButton_Click" />
                                        </b:EventTrigger>
                                    </b:Interaction.Triggers>
                                </ls:LSButton>
                            </Grid>
                        </ls:LSNineSliceImage>
                        <ls:LSButton x:Name="ShortPanelReactWaiting" Visibility="Collapsed" VerticalAlignment="Bottom" Margin="0,0,0,360" HorizontalAlignment="Center" >
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click" >
                                    <b:ChangePropertyAction TargetName="Panel" PropertyName="Visibility" Value="Visible"/>
                                    <b:ChangePropertyAction TargetName="ShortPanelReactWaiting" PropertyName="Visibility" Value="Collapsed"/>
                                    <ls:LSPlaySound Sound="UI_DefaultButton_Click" />
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                            <ls:LSNineSliceImage  Padding="68,44"  ImageSource="{StaticResource InterruptsPopupBG}" Slices="100">
                                <TextBlock Text="{Binding Source=h8c0332e0gc656g43aegafcegc7c66c6e3516,Converter={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_accent75TxtColor}" FontSize="{StaticResource SmallishFontSize}" Margin="0,28,0,32" TextAlignment="Center" />
                            </ls:LSNineSliceImage>
                        </ls:LSButton>
                    </Grid>

                    <DataTemplate.Triggers>
                        <DataTrigger Binding="{Binding DataContext.Data.Players.Count, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="1">
                            <Setter TargetName="MainPlayer" Property="ContentTemplate" Value="{StaticResource SinglePlayerEntry}"/>
                        </DataTrigger>

                        <DataTrigger Binding="{Binding ElementName=MainPlayer, Path=ActualHeight}" Value="0">
                            <Setter TargetName="ReactCTA" Property="Text" Value="{Binding Source=h8c0332e0gc656g43aegafcegc7c66c6e3516,Converter={StaticResource TranslatedStringConverter}}"/>
                            <Setter TargetName="ReactCTA" Property="Foreground" Value="{StaticResource LS_guestTxtColor}"/>
                            <Setter TargetName="MultiPlayerList" Property="Opacity" Value="1"/>
                            <Setter TargetName="CloseButton" Property="Visibility" Value="Visible"/>
                        </DataTrigger>

                        <EventTrigger RoutedEvent="Loaded">
                            <BeginStoryboard Storyboard="{StaticResource AnimateInPanel}" />
                        </EventTrigger>
                    </DataTemplate.Triggers>
                </DataTemplate>
            </ItemsControl.ItemTemplate>
        </ItemsControl>
        <b:Interaction.Triggers>
            <!-- Play a UI looping sound while the reaction decision pop up is active -->
            <b:DataTrigger Binding="{Binding Path=IsVisible, ElementName=InterruptPopup}" Value="True">
                <b:Interaction.Behaviors>
                    <b:ConditionBehavior>
                        <b:ConditionalExpression>
                            <b:ComparisonCondition LeftOperand="{Binding Data.InterruptEvents.Count}" Operator="GreaterThan" RightOperand="0"/>
                        </b:ConditionalExpression>
                    </b:ConditionBehavior>
                </b:Interaction.Behaviors>
                <ls:LSPlaySound  Sound="UI_HUD_Reaction_LoopStart"/>
                <!-- Tutorial UI Event - Reactions Decision Opened-->
                <b:InvokeCommandAction Command="{Binding TutorialEvent}" CommandParameter="1a3c4bbd-4db8-4c58-9620-f1f78d57c964"/>
            </b:DataTrigger>
            <b:DataTrigger Binding="{Binding Path=IsVisible, ElementName=InterruptPopup}" Value="False">
                <b:Interaction.Behaviors>
                    <b:ConditionBehavior>
                        <b:ConditionalExpression>
                            <b:ComparisonCondition LeftOperand="{Binding Data.InterruptEvents.Count}" Operator="Equal" RightOperand="0"/>
                        </b:ConditionalExpression>
                    </b:ConditionBehavior>
                </b:Interaction.Behaviors>
                <ls:LSPlaySound  Sound="UI_HUD_Reaction_LoopStop"/>
            </b:DataTrigger>
            <b:EventTrigger EventName="Unloaded">
                <ls:LSPlaySound Sound="UI_HUD_Reaction_LoopStop"/>
            </b:EventTrigger>
        </b:Interaction.Triggers>
    </Border>
</ls:UIWidget>