<ls:UIWidget x:Name="Dialogue_c"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d"
             ls:UIWidget.ContextName="Dialogue" d:DataContext="{d:DesignInstance {x:Type ls:DCDialogue}, IsDesignTimeCreatable=True}"
             d:DesignHeight="2160" d:DesignWidth="3840">

    <ls:UIWidget.Template>
        <ControlTemplate>
            <ControlTemplate.Resources>
                <ResourceDictionary>
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="../Library/DialogueTemplates.xaml"/>
                    </ResourceDictionary.MergedDictionaries>

                    <ControlTemplate x:Key="CycleTooltipTemplate">
                        <StackPanel>
                            <StackPanel x:Name="CycleHint" Orientation="Horizontal" HorizontalAlignment="Right" Margin="0,-110,0,-20" >
                                <TextBlock x:Name="Label" Style="{StaticResource BtnHint.StrokedTextStyle}">
                                    <TextBlock.Text>
                                        <MultiBinding StringFormat="{}{0}/{1}">
                                            <Binding Path="SelectedIndex" ElementName="TooltipHolder" Converter="{StaticResource AddConverter}" ConverterParameter="1"/>
                                            <Binding Path="ItemsSource.Count" ElementName="TooltipHolder"/>
                                        </MultiBinding>
                                    </TextBlock.Text>
                                </TextBlock>
                                <ContentControl x:Name="ButtonHint" Template="{StaticResource ButtonHint}" Tag="DpadLeftRight"/>
                            </StackPanel>

                            <ContentControl x:Name="BaseTooltip" Template="{StaticResource BaseTooltipTemplate}" Content="{Binding Content, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                        </StackPanel>
                    </ControlTemplate>

                    <ls:LSMessageBoxData x:Key="OnAttackMessageBox"
                            Text="{Binding Source='h3de62469gbf26g4390ga9a5g530b768217fe', Converter={StaticResource TranslatedStringConverter}}"
                            Title="{Binding Source='h4ce24528g0b74g4dc1g8ba6g80071f09ac12', Converter={StaticResource TranslatedStringConverter}}"
                            UUID="UUID">
                        <ls:LSMessageBoxData.Actions>
                            <ls:LSGameCommandData ActionName="{Binding Source='hf52bf842g05beg48dega717gca15b3678e0e', Converter={StaticResource TranslatedStringConverter}}"
                                          Command="{Binding DataContext.AttackCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                          BoundInput="{Binding DataContext.CurrentPlayer.UIData.InputEvents, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIMessageBoxA'}"/>
                            <ls:LSGameCommandData ActionName="{Binding Source='heded8384gb4f5g439dg9883g5cf950b2bbfc', Converter={StaticResource TranslatedStringConverter}}"
                                          Command="{Binding DataContext.CustomEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                          CommandParameter="CloseMessageBox"
                                          BoundInput="{Binding DataContext.CurrentPlayer.UIData.InputEvents, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIMessageBoxB'}"/>
                        </ls:LSMessageBoxData.Actions>
                    </ls:LSMessageBoxData>

                    <System:Int16 x:Key="ShowCharacterSelectionCount">1</System:Int16>

                    <Storyboard x:Key="SkipButtonPromptStoryboard" TargetName="SkipDialoguePrompt">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                            <EasingDoubleKeyFrame KeyTime="0" Value="1"/>
                            <EasingDoubleKeyFrame KeyTime="0:0:2.5" Value="1"/>
                            <EasingDoubleKeyFrame KeyTime="0:0:3" Value="0"/>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>

                    <Storyboard x:Key="SkipButtonPromptHideStoryboard" TargetName="SkipDialoguePrompt">
                        <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                            <EasingDoubleKeyFrame KeyTime="0:0:.5" Value="0"/>
                        </DoubleAnimationUsingKeyFrames>
                    </Storyboard>
                </ResourceDictionary>
            </ControlTemplate.Resources>

            <Grid x:Name="DialogueRoot" Background="Transparent" Focusable="False" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">

                <Grid x:Name="OwnerPanel" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <ls:LSInputBinding PlayerId="{Binding PlayerId}" BoundEvent="UIUp" Command="{Binding SelectorUpCommand}" IsEnabled="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.ShowAnswers}" Visibility="Collapsed">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="LSInputBindingPressed">
                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSInputBinding>
                    <ls:LSInputBinding PlayerId="{Binding PlayerId}" BoundEvent="UIDown" Command="{Binding SelectorDownCommand}" IsEnabled="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.ShowAnswers}" Visibility="Collapsed">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="LSInputBindingPressed">
                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSInputBinding>

                    <ls:LSInputBinding PlayerId="{Binding PlayerId}" BoundEvent="UISkipDialog" Visibility="Collapsed" Command="{Binding SelectorSkipCommand}" CommandParameter="{Binding PlayerId}"/>
                    <ls:LSInputBinding PlayerId="{Binding PlayerId}" AnyKey="True" EatInput="False" IsEnabled="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.ShowAnswers, Converter={StaticResource InvertBoolConverter}}">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="LSInputBindingPressed">
                                <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource SkipButtonPromptStoryboard}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSInputBinding>

                    <ls:LSInputBinding PlayerId="{Binding PlayerId}" BoundEvent="UIAccept" Visibility="Collapsed" Command="{Binding SelectorEnterCommand}" CommandParameter="{Binding PlayerId}">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="LSInputBindingPressed">
                                <ls:LSPlaySound Sound="UI_Shared_Accept"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSInputBinding>

                    <Rectangle x:Name="SplitScreenModestyGradient" Height="650" VerticalAlignment="Bottom" Visibility="Collapsed">
                        <Rectangle.Fill>
                            <LinearGradientBrush StartPoint="0,1" EndPoint="0,0">
                                <GradientStop Color="#FF000000" Offset="0.5"/>
                                <GradientStop Color="#00000000" Offset="1.0"/>
                            </LinearGradientBrush>
                        </Rectangle.Fill>
                    </Rectangle>

                    <Control Template="{StaticResource Dialogue.DialogueNotification}"/>
                    
                    <!-- dialogue text and answers -->
                   
                    <Grid x:Name="OptionsPanel" VerticalAlignment="Bottom" HorizontalAlignment="Stretch">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition x:Name="BottomButtonsHeight"  Height="Auto" MinHeight="272"/>
                        </Grid.RowDefinitions>
                        
                        <!-- Dialogue Choices -->
                        <Control Grid.Row="0" Template="{StaticResource Dialogue.BodyAndAnswersContainer}"/>

                        <!-- Tooltips (keyword) -->
                        <ListBox Grid.Row="0" x:Name="TooltipHolder" ItemsSource="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.LocalHighlightedAnswer.AnswerTags}" IsHitTestVisible="False" ToolTipService.IsEnabled="{Binding SelectedItem, ElementName=TooltipHolder, Converter={StaticResource NullToBoolFalseConverter}}" HorizontalAlignment="Left" VerticalAlignment="Top" Visibility="Hidden">
                            <ListBox.ToolTip>
                                <ls:LSTooltip x:Name="TagTooltip" Content="{Binding SelectedItem, ElementName=TooltipHolder}" Placement="Top" HorizontalOffset="200"/>
                            </ListBox.ToolTip>
                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <!-- Listbox only functions to cycle through tooltips. The contents should be invisible and the selected one should be shown through LSTooltip -->
                                                <ContentPresenter Visibility="Collapsed"/>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                </Style>
                            </ListBox.ItemContainerStyle>

                            <b:Interaction.Triggers>
                                <ls:GameInputTrigger BoundEvent="UIRight">
                                    <ls:SelectNextListBoxItem TargetName="TooltipHolder"/>
                                </ls:GameInputTrigger>
                                <ls:GameInputTrigger BoundEvent="UILeft">
                                    <ls:SelectNextListBoxItem TargetName="TooltipHolder" Reversed="True"/>
                                </ls:GameInputTrigger>

                                <b:PropertyChangedTrigger Binding="{Binding ItemsSource, ElementName=TooltipHolder}">
                                    <b:ChangePropertyAction TargetName="TooltipHolder" PropertyName="SelectedIndex" Value="0"/>
                                </b:PropertyChangedTrigger>
                                <!-- The above ChangePropertyAction gets overwritten by Selector in some cases. The below trigger will fix those situation -->
                                <b:EventTrigger EventName="SelectionChanged">
                                    <b:Interaction.Behaviors>
                                        <b:ConditionBehavior>
                                            <b:ConditionalExpression>
                                                <b:ComparisonCondition LeftOperand="{Binding SelectedIndex, ElementName=TooltipHolder}" Operator="Equal" RightOperand="-1"/>
                                                <b:ComparisonCondition LeftOperand="{Binding ItemsSource.Count, ElementName=TooltipHolder}" Operator="NotEqual" RightOperand="0"/>
                                            </b:ConditionalExpression>
                                        </b:ConditionBehavior>
                                    </b:Interaction.Behaviors>
                                    <b:ChangePropertyAction TargetName="TooltipHolder" PropertyName="SelectedIndex" Value="0"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ListBox>

                        <!-- Controller hints -->
                        <ls:LSWrapPanel Grid.Row="1" x:Name="ButtonsContainer" HorizontalAlignment="Center" VerticalAlignment="Top" HorizontalContentAlignment="Center" Margin="220,0,220,56" Visibility="{Binding HasInputEnabled, RelativeSource={RelativeSource AncestorType=ls:UIWidget}, Converter={StaticResource BoolToVisibleConverter}, ConverterParameter='True'}">
                            
                            <!-- Select -->
                            <ls:LSButton x:Name="SelectButton" 
                                         ContentTemplate="{StaticResource ControllerButtonHint}"
                                         VerticalAlignment="Center"
                                         Margin="-16,0,8,0"
                                         Tag="{Binding Source='hd0c08193ga7f2g4a7eg8225g63748c7b3096',Converter={StaticResource TranslatedStringConverter}}" EatInput="False"
                                         Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}" 
                                         BoundEvent="UIAccept"
                                         OverwriteClickSound="UI_Shared_Accept" 
                                         Visibility="Collapsed"
                                         FlowDirection="LeftToRight"
                                         HorizontalAlignment="Right"/>

                            <!-- History -->
                            <ls:LSButton x:Name="DialogueHistoryButton" 
                                         ContentTemplate="{StaticResource ControllerButtonHint}"
                                         VerticalAlignment="Center"
                                         Margin="8,0"
                                         Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='ToggleDialogueHistory'}"
                                         BoundEvent="ToggleDialogueHistory"
                                         Tag="{Binding Source='he9e4a39fg8a5dg4ac5gacffgaea214260c69',Converter={StaticResource TranslatedStringConverter}}"
                                         Command="{Binding CustomEvent}" CommandParameter="OpenDialogueHistory"
                                Visibility="Collapsed"/>

                            <!-- Stop Listening -->
                            <ls:LSButton x:Name="StopListeningButton_Main" 
                                         ContentTemplate="{StaticResource ControllerButtonHint}"
                                         VerticalAlignment="Center"
                                         Margin="8,0"
                                         Tag="{Binding Source='h300e48e5g689dg4133gbf34gd245a53eac06',Converter={StaticResource TranslatedStringConverter}}"
                                         Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancel'}"
                                         BoundEvent="UICancel"
                                         Command="{Binding StopListeningCommand}" 
                                         SoundID="UI_HUD_Dialogue_StopListening"
                                         Visibility="Collapsed"/>

                            <!-- Trade -->
                            <ls:LSButton x:Name="TradeButton" 
                                         ContentTemplate="{StaticResource ControllerButtonHint}"
                                         VerticalAlignment="Center"
                                         Margin="8,0" 
                                         TapTime="{StaticResource DefaultButtonTapTime}" 
                                         EatInput="False"
                                         Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIRequestTrade'}" 
                                         BoundEvent="UIRequestTrade"
                                         Tag="{Binding Source='he4fdff4dga552g4023gb49bg333f39b77015',Converter={StaticResource TranslatedStringConverter}}"
                                         SoundID="UI_HUD_Trade" 
                                         Command="{Binding StartTrade}" 
                                         CommandParameter="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.DialogueCharacter}"
                                         Visibility="Collapsed"/>

                            <!-- Attack (Hold) -->
                            <ls:LSButton x:Name="AttackButton" Style="{StaticResource ControllerHoldButtonStyle}" 
                                         Tag="{Binding Source='hc2b3a4e3ge669g4919ga291ged7ebad9c1b1',Converter={StaticResource TranslatedStringConverter}}" 
                                         DataContext="{Binding DataContext.CurrentPlayer.UIData.InputEvents, ElementName=Dialogue_c, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIRequestTrade'}" 
                                         Command="{Binding DataContext.OpenMessageBox, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{DynamicResource OnAttackMessageBox}" 
                                         SoundID="UI_HUD_CC_VentureForth"
                                         Visibility="Collapsed"/>

                            <ls:LSButton x:Name="ToggleTooltipsButton" 
                                         ContentTemplate="{StaticResource ControllerButtonHint}"
                                         VerticalAlignment="Center"
                                         Margin="8,0"
                                         Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIShowInfo'}" 
                                         BoundEvent="UIShowInfo"
                                         Tag="{Binding Source='hf8dd4c2fg97e0g4ccdgac1ag3cd1fe5060ef',Converter={StaticResource TranslatedStringConverter}}" 
                                         Command="{Binding ToggleTooltipOnUIElement}" 
                                         CommandParameter="{Binding ElementName=TooltipHolder}"
                                         Visibility="Collapsed"/>

                            <!-- Privacy -->
                            <ls:LSToggleButton x:Name="togglePrivacyButton"
                                               DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='ToggleDialogPrivacy'}"
                                               IsChecked="{Binding DataContext.ActiveDialogue.PrivacyOverride, Mode=TwoWay, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                                               Command="{Binding DataContext.OnPrivacyOverrideChange, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                                               BoundEvent="{Binding IEventID, Mode=OneWay}">
                                <ls:LSToggleButton.Style>
                                    <Style TargetType="ToggleButton">
                                        <Style.Setters>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="ToggleButton">
                                                        <StackPanel x:Name="BtnHint" VerticalAlignment="Center" HorizontalAlignment="Center" Effect="{StaticResource HUD.DropShadow}" Orientation="Horizontal">
                                                            <Control x:Name="img" Template="{StaticResource ControllerButton.ImageSwitcher}" Focusable="False" VerticalAlignment="Center" Width="{DynamicResource ScaledControllerHintSize}" Height="{DynamicResource ScaledControllerHintSize}"/>
                                                            <TextBlock x:Name="txt" ls:TextBlockFormatter.SourceText="{Binding Source='he6e54b13g8ae6g4caega94ag8ab433f13364',Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource BtnHint.StrokedTextStyle}" VerticalAlignment="Center"/>
                                                        </StackPanel>
                                                        <ControlTemplate.Triggers>
                                                            <Trigger Property="IsChecked" Value="False">
                                                                <Setter TargetName="txt" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='hb8474ff9g4b27g4385gac93ge6cc28b99357',Converter={StaticResource TranslatedStringConverter}}"/>
                                                            </Trigger>
                                                            <Trigger Property="IsEnabled" Value="False">
                                                                <Setter Property="Opacity" Value="{StaticResource ControllerButton.DisabledOpacity}"/>
                                                            </Trigger>
                                                        </ControlTemplate.Triggers>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style.Setters>
                                        <Style.Triggers>
                                            <DataTrigger Value="True">
                                                <DataTrigger.Binding>
                                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                                        <Binding Path="DataContext.Data.LocalPlayers.Count" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                        <Binding Path="DataContext.Data.Players.Count" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                    </MultiBinding>
                                                </DataTrigger.Binding>
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding DataContext.ActiveDialogueIsListening, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding DataContext.PrivacyOverrideGlobalSetting, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding DataContext.CanShowPrivacyButton, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="False">
                                                <Setter Property="Visibility" Value="Collapsed"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ls:LSToggleButton.Style>
                            </ls:LSToggleButton>

						    <!-- Poll -->
                            <ls:LSButton x:Name="StartPollButton" ContentTemplate="{StaticResource ControllerButtonHint}"
                                         Tag="{Binding Source='h0d7b095agcd0ag461agaddeg5b6a1cb551ac',Converter={StaticResource TranslatedStringConverter}}"
                                         Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIStartPoll, Converter={StaticResource FindInputEventConverter}}"
                                         BoundEvent="UIStartPoll"
                                         Command="{Binding DataContext.CommunityPollRequest, ElementName=Dialogue_c}"
                                         Visibility="Collapsed"/>
                        </ls:LSWrapPanel>

                    </Grid>

                    <ls:LSButton x:Name="SkipDialoguePrompt" 
                                 ContentTemplate="{StaticResource ControllerButtonHint}"
                                 Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UISkipDialog'}"
                                 Opacity="0"
                                 HorizontalAlignment="Right" VerticalAlignment="Bottom"
                                 Margin="{StaticResource ButtonHint.Margin.Right}"/>

                    <TextBlock x:Name="VersionStringText" 
                               Text="{Binding Data.VersionString}" 
                               VerticalAlignment="Top" 
                               HorizontalAlignment="Right" 
                               FontSize="{StaticResource HugeFontSize}" 
                               Margin="20,0"  
                               Opacity="0.7" 
                               Visibility="{Binding Data.IsGold, Converter={StaticResource BoolToCollapsedConverter}}"/>

                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Loaded">
                            <b:Interaction.Behaviors>
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding ActiveDialogueIsListening}" Operator="Equal" RightOperand="True" />
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <!-- Tutorial UI Event - Dialogue listen-->
                            <b:InvokeCommandAction Command="{Binding TutorialEvent}" CommandParameter="c01b74a1-7ff2-41da-885a-3fe0152d7775"/>
                        </b:EventTrigger>
                        <b:EventTrigger EventName="Unloaded">
                            <b:ControlStoryboardAction ControlStoryboardOption="Stop" Storyboard="{StaticResource SkipButtonPromptStoryboard}"/>
                            <b:ControlStoryboardAction ControlStoryboardOption="Stop" Storyboard="{StaticResource SkipButtonPromptHideStoryboard}"/>
                        </b:EventTrigger>
                        <b:PropertyChangedTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.LocalHighlightedAnswer}">
                            <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding ElementName=TooltipHolder}"/>
                        </b:PropertyChangedTrigger>
                        <b:DataTrigger Binding="{Binding HasInputEnabled, ElementName=Dialogue_c}" Value="True">
                            <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding ElementName=TooltipHolder}"/>
                        </b:DataTrigger>

                        <b:DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.ShowAnswers}" Value="True">
                            <b:ControlStoryboardAction ControlStoryboardOption="Pause" Storyboard="{StaticResource SkipButtonPromptStoryboard}"/>
                            <b:ControlStoryboardAction ControlStoryboardOption="Play" Storyboard="{StaticResource SkipButtonPromptHideStoryboard}"/>
                            <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding ElementName=TooltipHolder}"/>
                        </b:DataTrigger>
                    </b:Interaction.Triggers>
                </Grid>

                <!-- Listener button -->
                <ls:LSButton x:Name="StopListeningButton"
                             ContentTemplate="{StaticResource ControllerButtonHint}"
                             Tag="{Binding Source='h300e48e5g689dg4133gbf34gd245a53eac06',Converter={StaticResource TranslatedStringConverter}}"
                             Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancel'}" 
                             BoundEvent="UICancel"
                             Command="{Binding StopListeningCommand}" 
                             SoundID="UI_HUD_Dialogue_StopListening" 
                             HorizontalAlignment="Left" 
                             VerticalAlignment="Bottom" 
                             Margin="220,0,220,56" 
                             Visibility="Collapsed"/>
            </Grid>

            <ControlTemplate.Triggers>

                <!-- Button Triggers -->
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.ShowAnswers}" Value="True">
                    <Setter TargetName="SelectButton" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="DialogueHistoryButton" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.ShowAnswers}" Value="True"/>
                        <Condition Binding="{Binding SelectedItem, ElementName=TooltipHolder, Converter={StaticResource NullToBoolFalseConverter}}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="ToggleTooltipsButton" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="TooltipHolder" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding ActiveDialogueIsListening}" Value="True">
                    <Setter TargetName="StopListeningButton_Main" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.ShowAnswers}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.CanTrade}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="TradeButton" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>
                
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.ShowAnswers}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.AllowAttack}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="AttackButton" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding ShowUIElementTooltip}" Value="True">
                    <Setter TargetName="ToggleTooltipsButton" Property="Tag" Value="{Binding Source='hb33ec471gd611g4ee3gbbffg699af8f79167', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>

                <!-- Poll Triggers -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Data.IsCommunityPollEnabled}" Value="True" />
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.ShowPollButton}" Value="True" />
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.ActiveDialogue.ShowAnswers}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="StartPollButton" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding ItemsSource.Count, ElementName=TooltipHolder, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True">
                    <Setter TargetName="TagTooltip" Property="Template" Value="{StaticResource CycleTooltipTemplate}"/>
                </DataTrigger>

                <!-- If player can't navigate the dialog, show just a few options and hide dialog itself -->
                <DataTrigger Binding="{Binding ActiveDialogueIsListening}" Value="True">
                    <Setter TargetName="SkipDialoguePrompt" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding PlayerCanNavigateThisDialog}" Value="False">
                    <Setter TargetName="OwnerPanel" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="StopListeningButton" Property="Visibility" Value="{Binding ActiveDialogueIsListening, Converter={StaticResource BoolToVisibleConverter}}"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.PlayerId}" Value="2">
                    <Setter TargetName="StopListeningButton" Property="HorizontalAlignment" Value="Right"/>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding PlayerOwnsThisDialog}" Value="True"/>
                        <Condition Binding="{Binding Data.LocalPlayers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.PlayerId}" Value="1"/>
                        <Condition Binding="{Binding Layout}" Value="Common"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="SkipDialoguePrompt" Property="HorizontalAlignment" Value="Left"/>
                    <Setter TargetName="SkipDialoguePrompt" Property="Margin" Value="180,0,0,44"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding PlayerOwnsThisDialog}" Value="True"/>
                        <Condition Binding="{Binding Data.LocalPlayers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.PlayerId}" Value="2"/>
                        <Condition Binding="{Binding Layout}" Value="Common"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="SkipDialoguePrompt" Property="Margin" Value="0,0,200,44"/>
                </MultiDataTrigger>

                <!-- Below 16/9 the width of the current message is shorter, leaving some extra room for the tooltip -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Layout}" Value="Common"/>
                        <Condition Binding="{Binding Data.AspectRatio, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0.625}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="TooltipHolder" Property="VerticalAlignment" Value="Bottom"/>
                    <Setter TargetName="TagTooltip" Property="Placement" Value="Left"/>
                    <Setter TargetName="TagTooltip" Property="VerticalOffset" Value="-600"/>
                    <Setter TargetName="TagTooltip" Property="HorizontalOffset" Value="400"/>
                </MultiDataTrigger>

                <!-- If Common and lower or equal than 0.5625 ratio (this is 16/9), use wide view -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Layout}" Value="Common"/>
                        <Condition Binding="{Binding Data.AspectRatio, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0.5625}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="TagTooltip" Property="HorizontalOffset" Value="200"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding Layout}" Value="Common">
                    <Setter TargetName="BottomButtonsHeight" Property="MinHeight" Value="0"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding Layout}" Value="Left">
                    <Setter TargetName="SplitScreenModestyGradient" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding Layout}" Value="Right">
                    <Setter TargetName="SkipDialoguePrompt" Property="HorizontalAlignment" Value="Left"/>
                    <Setter TargetName="SkipDialoguePrompt" Property="Margin" Value="20,0,0,44"/>
                    <Setter TargetName="SplitScreenModestyGradient" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="TooltipHolder" Property="HorizontalAlignment" Value="Right"/>
                </DataTrigger>

               

            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Template>

    <b:Interaction.Triggers>
        <b:DataTrigger Binding="{Binding Path=CurrentPlayer.SelectedCharacter.ActiveDialogue}" Value="{x:Null}">
            <b:InvokeCommandAction Command="{Binding Path=CustomEvent}" CommandParameter="DialogueHide"/>
        </b:DataTrigger>

        <b:EventTrigger EventName="WidgetClosing">
            <b:InvokeCommandAction Command="{Binding Path=RecheckReward}"/>
        </b:EventTrigger>
    </b:Interaction.Triggers>
</ls:UIWidget>