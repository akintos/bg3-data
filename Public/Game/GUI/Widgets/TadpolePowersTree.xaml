<ls:UIWidget x:Name="TadpolePowersTree"
             ls:UIWidget.ContextName="TadpolePowersTree"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance {x:Type ls:DCTadpolePowersTree}, IsDesignTimeCreatable=True}"
             d:DesignHeight="2160" d:DesignWidth="3840">
    <ls:UIWidget.Template>
        <ControlTemplate TargetType="{x:Type ls:UIWidget}">
            <ControlTemplate.Resources>
                <ResourceDictionary>
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="../Library/TadpoleTemplates.xaml"/>
                    </ResourceDictionary.MergedDictionaries>

                    <System:Double x:Key="PowerIconSize">130</System:Double>
                    <System:Double x:Key="PowerIconContainer">200</System:Double>
                    <System:Double x:Key="PowerIconActive">138</System:Double>
                    <System:Double x:Key="PowerIconDisabled">140</System:Double>

                    <Duration x:Key="GlowDuration">0:0:0.8</Duration>
                    <Duration x:Key="FadeDurationLong">0:0:0.8</Duration>
                    <Duration x:Key="FadeDurationShort">0:0:0.6</Duration>

                    <BitmapImage x:Key="SquirmingImage"    UriSource="pack://application:,,,/DevGUI;component/Assets/TadpoleTree/tadpole_loop_textures_v3_10x10.png"/>

                    <Storyboard x:Key="animatedtransition" >
                        <DoubleAnimation
                        Storyboard.TargetName="Brain"
                        Storyboard.TargetProperty="Opacity"
                        From="0.8"
                        To="1"
                        Duration="{StaticResource FadeDurationShort}"
                        >
                            <DoubleAnimation.EasingFunction>
                                <CubicEase EasingMode="EaseIn"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <DoubleAnimation
                        Storyboard.TargetName="BrainTransform"
                        Storyboard.TargetProperty="ScaleX"
                        From="0.9"
                        To="1"
                        Duration="{StaticResource FadeDurationLong}"
                        >
                            <DoubleAnimation.EasingFunction>
                                <CubicEase EasingMode="EaseOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <DoubleAnimation
                        Storyboard.TargetName="BrainTransform"
                        Storyboard.TargetProperty="ScaleY"
                        From="0.9"
                        To="1"
                        Duration="{StaticResource FadeDurationLong}"
                        >
                            <DoubleAnimation.EasingFunction>
                                <CubicEase EasingMode="EaseOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <DoubleAnimation
                        Storyboard.TargetName="NameAnimIn"
                        Storyboard.TargetProperty="X"
                        From="400"
                        To="0"
                        Duration="{StaticResource FadeDurationShort}"
                        >
                            <DoubleAnimation.EasingFunction>
                                <CubicEase EasingMode="EaseInOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                        <DoubleAnimation
                        Storyboard.TargetName="NameAnimInOpacity"
                        Storyboard.TargetProperty="Opacity"
                        From="0"
                        To="1"
                         Duration="{StaticResource FadeDurationShort}"
                        >
                            <DoubleAnimation.EasingFunction>
                                <CubicEase EasingMode="EaseInOut"/>
                            </DoubleAnimation.EasingFunction>
                        </DoubleAnimation>
                    </Storyboard>

                    <ls:LSTooltip x:Key="TadpolePowerTooltip" IsHitTestVisible="False" Content="{Binding DataContext.Power, RelativeSource={RelativeSource Mode=TemplatedParent}}"/>

                    <Style x:Key="TadpoleFontStyle" TargetType="TextBlock">
                        <Setter Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                        <Setter Property="FontSize" Value="{StaticResource ScaledLargeFontSize}"/>
                    </Style>
                    
                    
                </ResourceDictionary>
            </ControlTemplate.Resources>

            <Grid x:Name="Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" ls:TooltipExtender.Owner="{Binding CurrentPlayer.SelectedCharacter}" Background="Black">
                <Rectangle x:Name="BackgroundImage" RenderTransformOrigin="0.5,0.5" Opacity="1" >
                    <Rectangle.Fill>
                        <ImageBrush ImageSource="{StaticResource Tadpoles.Background}" Stretch="Fill"/>
                    </Rectangle.Fill>
                    <Rectangle.RenderTransform>
                        <ScaleTransform x:Name="BackgroundImageScale" ScaleX="1" ScaleY="1.3"/>
                    </Rectangle.RenderTransform>
                    <Rectangle.Triggers>
                        <EventTrigger RoutedEvent="Rectangle.Loaded">
                            <BeginStoryboard x:Name="BackgroundAnimation_01">
                                <Storyboard>
                                    <DoubleAnimation Duration="0:0:13.0" To="1.3" Storyboard.TargetProperty="ScaleX" Storyboard.TargetName="BackgroundImageScale" AutoReverse="True" RepeatBehavior="Forever">
                                        <DoubleAnimation.EasingFunction>
                                            <CubicEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                    <DoubleAnimation Duration="0:0:7.0" To="1" Storyboard.TargetProperty="ScaleY" Storyboard.TargetName="BackgroundImageScale" AutoReverse="True" RepeatBehavior="Forever">
                                        <DoubleAnimation.EasingFunction>
                                            <CubicEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>                                        
                                    </DoubleAnimation>
                                    <DoubleAnimation Duration="0:0:3.0" To="0.4" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="BackgroundImage" AutoReverse="True" RepeatBehavior="Forever">
                                        <DoubleAnimation.EasingFunction>
                                            <CubicEase EasingMode="EaseOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </Rectangle.Triggers>
                </Rectangle>
                <Rectangle x:Name="ForegroundImage" Opacity="1">
                    <Rectangle.Fill>
                        <ImageBrush ImageSource="{StaticResource Tadpoles.Background}" Stretch="Fill"/>
                    </Rectangle.Fill>
                    <Rectangle.RenderTransform>
                        <ScaleTransform ScaleX="-1"/>
                    </Rectangle.RenderTransform>
                    <Rectangle.Triggers>
                        <EventTrigger RoutedEvent="Rectangle.Loaded">
                            <BeginStoryboard x:Name="BackgroundAnimation_02">
                                <Storyboard>
                                    <DoubleAnimation Duration="0:0:5.0" To="0.5" Storyboard.TargetProperty="Opacity" Storyboard.TargetName="ForegroundImage" AutoReverse="True" RepeatBehavior="Forever">
                                        <DoubleAnimation.EasingFunction>
                                            <CubicEase EasingMode="EaseInOut"/>
                                        </DoubleAnimation.EasingFunction>
                                    </DoubleAnimation>
                                </Storyboard>
                            </BeginStoryboard>
                        </EventTrigger>
                    </Rectangle.Triggers>
                </Rectangle>

                <ls:PanZoomContentControl x:Name="Brain" Background="Transparent" PanSpeed="1.5" MinZoom="0.68"  ZoomStep="0.026" DefaultZoom="0.85" RenderTransformOrigin="0.5,0.5">
                    <b:Interaction.Triggers>
                        <b:PropertyChangedTrigger Binding="{Binding Path=CurrentPlayer.SelectedCharacter}">
                            <b:Interaction.Behaviors>
                                <!--Without this condition we have a Noesis error on closing, because the DC is deleted before fully removing the widget, and the ChangePropertyAction gives an error at that point-->
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding .}" Operator="NotEqual"  RightOperand="{x:Null}"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:InvokeCommandAction Command="{Binding CancelPreparationStage}"/>
                            <b:ChangePropertyAction PropertyName="CurrentOffset" TargetName="Brain" Value="0,0"/>
                            <b:ChangePropertyAction PropertyName="CurrentZoom" TargetName="Brain" Value="{Binding DefaultZoom, ElementName=Brain}"/>

                            <b:ControlStoryboardAction Storyboard="{StaticResource animatedtransition}" ControlStoryboardOption="Stop"/>
                            <b:ControlStoryboardAction Storyboard="{StaticResource animatedtransition}" ControlStoryboardOption="Play"/>

                        </b:PropertyChangedTrigger>

                        <b:DataTrigger Binding="{Binding IsInPreparationStage}" Value="True">
                            <ls:LSPlaySound Sound="UI_HUD_TadpolePower_TadpolePickup"/>
                        </b:DataTrigger>
                        <b:DataTrigger Binding="{Binding IsInPreparationStage}" Value="False">
                            <ls:LSPlaySound Sound="UI_HUD_TadpolePower_TadpoleLoop_Stop"/>
                        </b:DataTrigger>
                    </b:Interaction.Triggers>
                    <ls:PanZoomContentControl.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform x:Name="BrainTransform" ScaleX="1" ScaleY="1"/>
                        </TransformGroup>
                    </ls:PanZoomContentControl.RenderTransform>
                    <Grid Height="3056" Width="2444">
                        <Image x:Name="HealthyBrain" Source="{StaticResource Tadpoles.BrainImage}" HorizontalAlignment="Left" VerticalAlignment="Top" Stretch="None" Margin="15,31,0,0">
                            <Image.Effect>
                                <ls:SaturationEffect Saturation="0.9"/>
                            </Image.Effect>
                        </Image>

                        <ItemsControl x:Name="InfectedOverlays" ItemsSource="{Binding CurrentPlayer.SelectedCharacter.TadpolePowers}" AlternationCount="{Binding ItemsSource.Count, RelativeSource={RelativeSource Self}}" HorizontalAlignment="Left" Style="{StaticResource Tadpoles.InfectionsItemsControlStyle}"/>

                        <ItemsControl x:Name="Powers" ItemsSource="{Binding CurrentPlayer.SelectedCharacter.TadpolePowers}" AlternationCount="{Binding ItemsSource.Count, RelativeSource={RelativeSource Self}}" HorizontalAlignment="Left" Style="{StaticResource Tadpoles.PowersItemsControlStyle}">
                            <ItemsControl.ItemTemplate>
                                <!--
                                    Hidden = locked
                                    Disabled = no connections
                                    Enabled = has connection, can be activated
                                    Active = activated (infected)
                                -->
                                <DataTemplate DataType="{x:Type ls:VMTadpolePower}">
                                    <DataTemplate.Resources>
                                        <BitmapImage x:Key="BrainButtonFrame" UriSource="pack://application:,,,/DevGUI;component/Assets/TadpoleTree/round_frame_icon_d.png"/>
                                        <BitmapImage x:Key="BrainButtonLock" UriSource="pack://application:,,,/DevGUI;component/Assets/TadpoleTree/Hidden_Locked.png"/>
                                    </DataTemplate.Resources>

                                    <ls:LSButton x:Name="Button" Command="{Binding DataContext.EnterPreparationStage, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" IsEnabled="False" ToolTip="{StaticResource TadpolePowerTooltip}" ToolTipService.ShowOnDisabled="True">
                                        <ls:LSButton.RenderTransform>
                                            <TransformGroup>
                                                <!-- Shift half its size to the top left so its positioning is unrelated to size of the content -->
                                                <TranslateTransform X="{Binding ActualWidth, ElementName=Button, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}" Y="{Binding ActualHeight, ElementName=Button, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}"/>
                                            </TransformGroup>
                                        </ls:LSButton.RenderTransform>

                                        <Grid Width="{StaticResource PowerIconContainer}" Height="{StaticResource PowerIconContainer}">
                                            <Image x:Name="Frame" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Source="{StaticResource BrainButtonFrame}" RenderTransformOrigin="0.5,0.5">
                                                <Image.RenderTransform>
                                                    <TransformGroup>
                                                        <RotateTransform>
                                                            <RotateTransform.Angle>
                                                                <MultiBinding Converter="{StaticResource MultiplierMultiConverter}">
                                                                    <Binding Path="(ItemsControl.AlternationIndex)" RelativeSource="{RelativeSource AncestorType={x:Type ContentPresenter}, AncestorLevel=2}"/>
                                                                    <Binding Source="134"/>
                                                                </MultiBinding>
                                                            </RotateTransform.Angle>
                                                        </RotateTransform>
                                                    </TransformGroup>
                                                </Image.RenderTransform>
                                            </Image>
                                            <Ellipse x:Name="Icon" Fill="{Binding Power.Icon}" Width="{StaticResource PowerIconSize}" Height="{StaticResource PowerIconSize}"/>
                                            <Image x:Name="ActiveIcon" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform"  Width="{StaticResource PowerIconActive}" Height="{StaticResource PowerIconActive}" Visibility="Collapsed">
                                                <Image.Source>
                                                    <MultiBinding Converter="{StaticResource IconIdToSourceConverter}">
                                                        <Binding Source="Assets/ControllerUIIcons/skills_png/"/>
                                                        <Binding Path="Power.IconName"/>
                                                    </MultiBinding>
                                                </Image.Source>
                                            </Image>
                                            <Image x:Name="LockIcon" Width="{StaticResource PowerIconDisabled}" Height="{StaticResource PowerIconDisabled}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Source="{StaticResource BrainButtonLock}" Visibility="Collapsed"/>
                                            <Ellipse x:Name="Overlay" Fill="White" Opacity="0" Width="{StaticResource PowerIconSize}" Height="{StaticResource PowerIconSize}" Visibility="Collapsed"/>

                                            <ls:AnimatedImage x:Name="BurrowingTadpole" ClipSize="160,160" LastFrame="33" RepeatBehavior="1x" Time="0:0:0.036" Source="{StaticResource Tadpoles.BurrowingImage}" Visibility="Collapsed" RenderTransformOrigin="0.5,0.5">
                                                <ls:AnimatedImage.RenderTransform>
                                                    <TransformGroup>
                                                        <ScaleTransform ScaleX="3" ScaleY="3"/>
                                                    </TransformGroup>
                                                </ls:AnimatedImage.RenderTransform>
                                            </ls:AnimatedImage>
                                        </Grid>

                                        <b:Interaction.Triggers>
                                            <b:EventTrigger EventName="Click">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding DataContext.IsInPreparationStage, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="True"/>
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <ls:LSPlaySound Sound="UI_HUD_TadpolePower_PowerUnlock"/>
                                            </b:EventTrigger>
                                        </b:Interaction.Triggers>
                                    </ls:LSButton>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding State}" Value="Hidden">
                                            <Setter TargetName="Button" Property="ToolTipService.ShowOnDisabled" Value="False"/>
                                            <Setter TargetName="LockIcon" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="Frame" Property="Visibility" Value="Collapsed"/>
                                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                                            <Setter TargetName="Overlay" Property="Visibility" Value="Collapsed"/>
                                            <Setter TargetName="Frame" Property="RenderTransform" Value="{x:Null}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="Disabled">
                                            <Setter TargetName="Frame" Property="Source" Value="pack://application:,,,/DevGUI;component/Assets/TadpoleTree/round_frame_icon_active.png"/>
                                            <Setter TargetName="Icon" Property="Width" Value="{StaticResource PowerIconDisabled}"/>
                                            <Setter TargetName="Icon" Property="Height" Value="{StaticResource PowerIconDisabled}"/>
                                            <Setter TargetName="Overlay" Property="Width" Value="{StaticResource PowerIconDisabled}"/>
                                            <Setter TargetName="Overlay" Property="Height" Value="{StaticResource PowerIconDisabled}"/>
                                            <Setter TargetName="Overlay" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="Overlay" Property="Fill" Value="Black"/>
                                            <Setter TargetName="Overlay" Property="Opacity" Value="0.8"/>
                                            <Setter TargetName="Frame" Property="RenderTransform" Value="{x:Null}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="Active">
                                            <DataTrigger.EnterActions>
                                                <StopStoryboard BeginStoryboardName="PreventTadpoleOnLoad"/>
                                            </DataTrigger.EnterActions>
                                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                                            <Setter TargetName="ActiveIcon" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="Frame" Property="Visibility" Value="Collapsed"/>
                                            <Setter TargetName="BurrowingTadpole" Property="Visibility" Value="{Binding AnimationEnded, RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToCollapsedConverter}}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="Enabled">
                                            <Setter TargetName="Frame" Property="RenderTransform" Value="{x:Null}"/>
                                        </DataTrigger>
                                        <EventTrigger RoutedEvent="Loaded">
                                            <!-- Prevent tadpole animation if we're loading straight into the "Active" state -->
                                            <BeginStoryboard x:Name="PreventTadpoleOnLoad">
                                                <BeginStoryboard.Storyboard>
                                                    <Storyboard Storyboard.TargetName="BurrowingTadpole" Storyboard.TargetProperty="Visibility">
                                                        <ObjectAnimationUsingKeyFrames Duration="0">
                                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                                                        </ObjectAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard.Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger>

                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding State}" Value="Enabled"/>
                                                <Condition Binding="{Binding DataContext.IsInPreparationStage, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <MultiDataTrigger.EnterActions>
                                                <BeginStoryboard Name="GlowingBeginStoryboard">
                                                    <Storyboard x:Name="GlowingAnimation" TargetName="Overlay" AutoReverse="True" TargetProperty="Opacity" RepeatBehavior="Forever" Duration="{StaticResource GlowDuration}">
                                                        <DoubleAnimation From="0.3" To="0.6"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </MultiDataTrigger.EnterActions>
                                            <MultiDataTrigger.ExitActions>
                                                <StopStoryboard BeginStoryboardName="GlowingBeginStoryboard"/>
                                            </MultiDataTrigger.ExitActions>
                                            <Setter TargetName="Button" Property="IsEnabled" Value="True"/>
                                            <Setter TargetName="Button" Property="Command" Value="{Binding DataContext.ActivateEnabledPower, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                                            <Setter TargetName="Button" Property="CommandParameter" Value="{Binding .}"/>
                                            <Setter TargetName="Overlay" Property="Visibility" Value="Visible"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding State}" Value="Enabled"/>
                                                <Condition Binding="{Binding DataContext.CurrentPlayer.PartyTadpoleCount, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource GreaterThanConverter}, ConverterParameter='0'}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="Button" Property="IsEnabled" Value="True"/>
                                        </MultiDataTrigger>

                                        <Trigger SourceName="Button" Property="IsMouseOver" Value="True">
                                            <Setter TargetName="Frame" Property="Source" Value="pack://application:,,,/DevGUI;component/Assets/TadpoleTree/round_frame_icon_h.png"/>
                                        </Trigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </Grid>
                </ls:PanZoomContentControl>

                <Rectangle x:Name="Vignette" IsHitTestVisible="False" Fill="{StaticResource DarkRedVignette}" noesis:Element.BlendingMode="Multiply" Opacity="0.8"/>

                <!-- Name plate -->
                <Grid x:Name="NamePlate" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="350,280,0,0">
                    <StackPanel Orientation="Horizontal">
                        <Image VerticalAlignment="Top" Stretch="None" Source="pack://application:,,,/DevGUI;component/Assets/TadpoleTree/ICO_TadpoleGold_lge.png"/>
                        <StackPanel Margin="20,20,0,0" VerticalAlignment="Top">
                            <TextBlock FontSize="{StaticResource ScaledGiganticFontSize}" Foreground="{StaticResource LS_accent75TxtColor}" Text="{Binding Source='h2d773583g5f0dg4737g93d5g324f4bcfe2ac',Converter={StaticResource TranslatedStringConverter}}" noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}" noesis:Text.StrokeThickness="3">
                                <TextBlock.Effect>
                                    <DropShadowEffect Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="8.0"/>
                                </TextBlock.Effect>
                            </TextBlock>
                            <StackPanel x:Name="NameAnimInOpacity">
                                <TextBlock TextAlignment="Left" Style="{StaticResource TadpoleFontStyle}" Opacity="1" Text="{Binding CurrentPlayer.SelectedCharacter.Name}" noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}" noesis:Text.StrokeThickness="3"/>
                                <TextBlock x:Name="IllthidProgressLabel" Margin="0,0,0,0" Foreground="{StaticResource LS_guestAccent100}" TextAlignment="Left" Style="{StaticResource TadpoleFontStyle}" Opacity="1" Text="{Binding Source='he1923f58g7436g4389gaccagd0451014a925',Converter={StaticResource TranslatedStringConverter}}" noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}" noesis:Text.StrokeThickness="3" Visibility="Collapsed"/>
                                <StackPanel.RenderTransform>
                                    <TransformGroup>
                                        <TranslateTransform X="0" x:Name="NameAnimIn"/>
                                    </TransformGroup>
                                </StackPanel.RenderTransform>
                            </StackPanel>
                            
                        </StackPanel>
                    </StackPanel>
                </Grid>

                <!-- Tadpole Pool -->
                <Grid x:Name="Tadpoles" HorizontalAlignment="Right" VerticalAlignment="Top" Width="550" Margin="0,250,330,0">
                    <StackPanel>
                        <TextBlock Style="{StaticResource TadpoleFontStyle}" HorizontalAlignment="Stretch" VerticalAlignment="Top" TextAlignment="Center" TextWrapping="Wrap" Text="{Binding Source=hb6d4f05fg375bg4219ga684g1be1396aa6e9, Converter={StaticResource TranslatedStringConverter}}"/>
                        <Grid Margin="0,20">
                            <Image x:Name="TadpoleImg" VerticalAlignment="Top" HorizontalAlignment="Center" Width="356" Source="pack://application:,,,/DevGUI;component/Assets/TadpoleTree/Tadpole_Pool.png">
                                <Image.InputBindings>
                                    <MouseBinding Gesture="LeftClick" Command="{Binding EnterPreparationStage}" CommandParameter="{Binding .}"/>
                                </Image.InputBindings>
                            </Image>
                            <Image x:Name="TadpoleImgFrame" VerticalAlignment="Top" HorizontalAlignment="Center" IsHitTestVisible="False" Width="356" Source="pack://application:,,,/DevGUI;component/Assets/TadpoleTree/tadpole_orb_d.png"/>

                            <TextBlock x:Name="TadpoleCountTxt" HorizontalAlignment="Center" noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}" Foreground="{StaticResource LS_tint100}" noesis:Text.StrokeThickness="3" IsHitTestVisible="False" VerticalAlignment="Bottom" Margin="0,0,0,50" TextAlignment="Center" FontSize="{StaticResource ScaledHumongousFontSize}" Text="{Binding DisplayedTadPoles, StringFormat={}x{0}}">
                                <TextBlock.Effect>
                                    <DropShadowEffect x:Name="TadpoleCountTxtShadow" Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="8.0"/>
                                </TextBlock.Effect>
                            </TextBlock>
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="MouseEnter">
                                    <ls:LSPlaySound Sound="UI_HUD_TadpolePower_Pool_Hover_Loop"/>
                                </b:EventTrigger>
                                <b:EventTrigger EventName="MouseLeave">
                                    <ls:LSPlaySound Sound="UI_HUD_TadpolePower_Pool_Hover_Loop_Stop"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </Grid>
                        <TextBlock x:Name="SelectTadpoleTxt" Style="{StaticResource TadpoleFontStyle}" HorizontalAlignment="Center" VerticalAlignment="Bottom" TextAlignment="Center" Text="{Binding Source=h14c41280g64a2g4eaagb119gf7f0c0313e89, Converter={StaticResource TranslatedStringConverter}}"/>
                    </StackPanel>
                </Grid>

                <Canvas x:Name="MovingTadpoleOverlay" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsHitTestVisible="False">
                    <ls:AnimatedImage x:Name="SquirmingTadpole" ClipSize="400,400" LastFrame="99" RepeatBehavior="Forever" Time="0:0:0.03333" Source="{StaticResource SquirmingImage}" Visibility="{Binding IsInPreparationStage, Converter={StaticResource BoolToVisibleConverter}}">
                        <ls:AnimatedImage.RenderTransform>
                            <TransformGroup>
                                <TranslateTransform X="{Binding CurrentPlayer.UIData.Cursor.Position.X, Converter={StaticResource AddConverter}, ConverterParameter=-190}" Y="{Binding CurrentPlayer.UIData.Cursor.Position.Y, Converter={StaticResource AddConverter}, ConverterParameter=-170}"/>
                            </TransformGroup>
                        </ls:AnimatedImage.RenderTransform>
                        <b:Interaction.Triggers>
                            <b:PropertyChangedTrigger Binding="{Binding Path=CurrentPlayer.PartyTadpoleCount}">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding Path=CurrentPlayer.PartyTadpoleCount}" Operator="Equal"  RightOperand="0"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:InvokeCommandAction Command="{Binding CancelPreparationStage}"/>
                            </b:PropertyChangedTrigger>

                            <b:PropertyChangedTrigger Binding="{Binding IsVisible ,ElementName=Blocker}">
                                <b:Interaction.Behaviors>
                                    <b:ConditionBehavior>
                                        <b:ConditionalExpression>
                                            <b:ComparisonCondition LeftOperand="{Binding IsVisible ,ElementName=Blocker}" Operator="Equal"  RightOperand="True"/>
                                        </b:ConditionalExpression>
                                    </b:ConditionBehavior>
                                </b:Interaction.Behaviors>
                                <b:InvokeCommandAction Command="{Binding CancelPreparationStage}"/>
                            </b:PropertyChangedTrigger>
                        </b:Interaction.Triggers>
                    </ls:AnimatedImage>
                </Canvas>

                <!-- Blocker -->
                <Grid x:Name="Blocker" Background="{StaticResource LS_PanelBackgroundRed}" Visibility="Collapsed">
                    <Grid.Resources>
                        <Style TargetType="TextBlock">
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                            <Setter Property="Foreground" Value="{StaticResource LS_tint100}"/>
                            <Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_PrimaryColorOutlineColor}"/>
                            <Setter Property="noesis:Text.StrokeThickness" Value="3"/>
                            <Setter Property="FontSize" Value="{StaticResource ScaledLargeFontSize}"/>
                            <Setter Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="8.0"/>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Grid.Resources>
                    <StackPanel VerticalAlignment="Center">
                        <TextBlock x:Name="BlockerTitle" FontSize="{StaticResource ScaledHumongousFontSize}" Text="{Binding Source='hc4df7df6gdc7dg48fdgac0fg0a299ddf74f6', Converter={StaticResource TranslatedStringConverter}}"/>
                        <TextBlock x:Name="BlockerBody">
                            <ls:TextBlockFormatter.SourceText>
                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                        <Binding Source="h2f12e394gb14dg456bga124g9b0fccba615d"/>
                                        <Binding Path="CurrentPlayer.SelectedCharacter.Name"/>
                                    </MultiBinding>
                            </ls:TextBlockFormatter.SourceText>
                        </TextBlock>
                    </StackPanel>
                </Grid>

                <!-- Close button -->
                <ls:LSButton x:Name="CloseBtn" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,6,6,0" Style="{DynamicResource CloseButton}" SoundID="UI_HUD_Options_Close" Command="{Binding CustomEvent}" CommandParameter="CloseWidget"/>

                <!-- Party portraits -->
                <Grid HorizontalAlignment="Left">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="1850"/>
                        <RowDefinition Height="*"/>
                    </Grid.RowDefinitions>
                    <ls:LSNineSliceImage x:Name="Background" Margin="-8,0,0,150" HorizontalAlignment="Left" VerticalAlignment="Bottom" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_party_bg_simple.png" Slices="108,92,0,104" Padding="0,92,0,104">
                        <ls:LSPlayerList x:Name="PlayerList" Scalable="False" VerticalOrientation="True" ItemsSource="{Binding Data.Players}" DefaultAvailableSpace="1486" MinAvailableSpace="620" MaxCharactersPerPage="6" SinglePortraitWidth="164" SinglePortraitHeight="214" ScreenResolution="{Binding Data.ScreenResolution}" Margin="4,0,0,0">
                            <ls:LSPlayerList.Style>
                                <Style TargetType="ls:LSPlayerList">
                                    <Setter Property="Visibility" Value="Visible"/>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding ElementName=Root,Path=Visibility}" Value="Hidden">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ls:LSPlayerList.Style>
                            <ls:LSPlayerList.Template>
                                <ControlTemplate>
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <ls:LSScrollViewer x:Name="PART_ScrollViewer" VerticalScrollBarVisibility="Hidden" HorizontalScrollBarVisibility="Disabled"  MaxHeight="1420">
                                            <ls:LSScrollViewer.OpacityMask>
                                                <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                                    <LinearGradientBrush.GradientStops>
                                                        <GradientStop Offset="0" Color="Transparent"/>
                                                        <GradientStop Offset="0.013" Color="Black"/>
                                                        <GradientStop Offset="0.987" Color="Black"/>
                                                        <GradientStop Offset="1" Color="Transparent"/>
                                                    </LinearGradientBrush.GradientStops>
                                                </LinearGradientBrush>
                                            </ls:LSScrollViewer.OpacityMask>
                                            <ItemsPresenter x:Name="PART_Presenter" Margin="25,0,0,0" HorizontalAlignment="Left" VerticalAlignment="Stretch"/>
                                        </ls:LSScrollViewer>

                                        <ls:LSButton x:Name="UpScrollButton" HorizontalAlignment="Center" VerticalAlignment="Top" Style="{StaticResource PartylineScrollButtonStyleUp}" Margin="10,-20,0,0">
                                            <b:Interaction.Behaviors>
                                                <ls:ScrollBehavior x:Name="UpScrollBehavior" Orientation="{x:Static Orientation.Vertical}" ScrollViewer="{Binding ElementName=PART_ScrollViewer}" Offset="-300" ScrollRate="10"/>
                                            </b:Interaction.Behaviors>
                                        </ls:LSButton>
                                        <ls:LSButton x:Name="DownScrollButton" HorizontalAlignment="Center" VerticalAlignment="Bottom" Style="{StaticResource PartylineScrollButtonStyleDown}" Margin="10,0,0,-20">
                                            <b:Interaction.Behaviors>
                                                <ls:ScrollBehavior x:Name="DownScrollBehavior" Orientation="{x:Static Orientation.Vertical}" ScrollViewer="{Binding ElementName=PART_ScrollViewer}" Offset="300" ScrollRate="10"/>
                                            </b:Interaction.Behaviors>
                                        </ls:LSButton>
                                    </Grid>
                                </ControlTemplate>
                            </ls:LSPlayerList.Template>
                            <ls:LSPlayerList.ItemContainerStyle>
                                <Style TargetType="ls:LSPortraitList">
                                    <Setter Property="Opacity" Value="0.9"/>
                                    <Setter Property="ItemsSource" Value="{Binding PartyGroups}"/>
                                    <Setter Property="ItemsPanel">
                                        <Setter.Value>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Vertical"/>
                                            </ItemsPanelTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Setter Property="Tag">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                                <Binding ElementName="PlayerList" Path="DataContext.CurrentPlayer"/>
                                                <Binding Path="DataContext" RelativeSource="{RelativeSource Mode=Self}"/>
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>

                                    <Setter Property="ItemContainerStyle">
                                        <Setter.Value>
                                            <Style TargetType="ls:LSPortraitListGroup">
                                                <Setter Property="Panel.ZIndex" Value="0"/>
                                                <Setter Property="PlayerId" Value="{Binding DataContext.PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:LSPortraitList}}}" />
                                                <Setter Property="ItemsSource" Value="{Binding .}"/>
                                                <Setter Property="AllowDragging" Value="False"/>
                                                <Setter Property="ItemsPanel">
                                                    <Setter.Value>
                                                        <ItemsPanelTemplate>
                                                            <StackPanel Orientation="Vertical"/>
                                                        </ItemsPanelTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="ls:LSPortraitListGroup">
                                                            <Grid Margin="0,10,0,12">
                                                                <ItemsPresenter/>
                                                            </Grid>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="ItemContainerStyle">
                                                    <Setter.Value>
                                                        <Style TargetType="ls:LSPortraitListItem">
                                                            <Setter Property="Template" Value="{StaticResource Template.ListBoxItem}"/>
                                                            <Setter Property="ContentTemplate">
                                                                <Setter.Value>
                                                                    <DataTemplate>
                                                                        <ls:LSContentControl x:Name="ParentControl" Background="Transparent" >
                                                                            <b:Interaction.Behaviors>
                                                                                <ls:DropOnCharacterBehavior TargetCharacter="{Binding}"/>
                                                                            </b:Interaction.Behaviors>
                                                                            <ls:LSContentControl.Tag>
                                                                                <MultiBinding Converter="{StaticResource EqualConverter}">
                                                                                    <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="DataContext.CurrentPlayer.UserId"/>
                                                                                    <Binding Path="OwnerUserID"/>
                                                                                </MultiBinding>
                                                                            </ls:LSContentControl.Tag>

                                                                            <Grid x:Name="baseGrid">
                                                                                <ls:LSInputBinding x:Name="SelectCharacterInput" PlayerId="{Binding DataContext.CurrentPlayer.PlayerId, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" IsEnabled="True">
                                                                                    <b:Interaction.Triggers>
                                                                                        <b:EventTrigger  EventName="LSInputBindingPressed">
                                                                                            <b:InvokeCommandAction Command="{Binding DataContext.SelectCharacter,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                                                                                            <b:InvokeCommandAction Command="{Binding DataContext.PlaySelectCharacterReaction,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                                                                                        </b:EventTrigger>
                                                                                    </b:Interaction.Triggers>
                                                                                </ls:LSInputBinding>
                                                                                <StackPanel Orientation="Horizontal" VerticalAlignment="Bottom">
                                                                                    <ContentControl Panel.ZIndex="1">
                                                                                        <b:Interaction.Triggers>

                                                                                            <b:EventTrigger EventName="MouseDoubleClick" >
                                                                                                <b:InvokeCommandAction Command="{Binding DataContext.SetCameraOnGameObject,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                                                                                            </b:EventTrigger>
                                                                                            <b:EventTrigger EventName="MouseEnter">
                                                                                                <b:InvokeCommandAction Command="{Binding DataContext.HighlightGameobject, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                                                                                                <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="UI_Shared_Hover"/>
                                                                                                <b:ChangePropertyAction TargetName="FrameHighlight" PropertyName="Visibility" Value="Visible" />
                                                                                            </b:EventTrigger>
                                                                                            <b:EventTrigger EventName="MouseLeave">
                                                                                                <b:InvokeCommandAction Command="{Binding DataContext.ClearHighlightGameobject, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                                                                                                <b:ChangePropertyAction TargetName="FrameHighlight" PropertyName="Visibility" Value="Collapsed" />
                                                                                            </b:EventTrigger>
                                                                                        </b:Interaction.Triggers>

                                                                                        <Grid>
                                                                                            <ls:LSEntityObject EntityRef="{Binding EntityHandle}" Background="Transparent" Margin="0,-3,0,-3" Opacity="1">
                                                                                                <ls:LSEntityObject.ToolTip>
                                                                                                    <ls:LSTooltip Content="{TemplateBinding DataContext}" ContentTemplate="{StaticResource CharacterTooltipTemplate}" ls:TooltipExtender.Owner="{Binding Path=DataContext, ElementName=ParentControl}" Placement="Right" VerticalOffset="-18" CanBePinned="True"/>
                                                                                                </ls:LSEntityObject.ToolTip>
                                                                                                <Grid IsHitTestVisible="False">
                                                                                                    <Rectangle Fill="Black" Width="138" Height="204" VerticalAlignment="Center" HorizontalAlignment="Center" />
                                                                                                    <Rectangle x:Name="Portrait" Width="134" Height="200" VerticalAlignment="Center" HorizontalAlignment="Center"  Fill="{Binding Icon}"/>
                                                                                                    <Image x:Name="Frame" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_d.png" Stretch="None" Visibility="{Binding Visibility, ElementName=FrameSelected, Converter={StaticResource InvertVisibilityConverter}}"/>

                                                                                                    <Rectangle x:Name="Darkening" Fill="#aa000000" Visibility="Collapsed" IsHitTestVisible="False"/>
                                                                                                    <Image x:Name="FrameSelected" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_d.png" Stretch="None" Visibility="{Binding IsSelectedCharacter, Converter={StaticResource BoolToVisibleConverter}}"/>
                                                                                                    <Image x:Name="FrameHighlight" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_inactive_h.png" Stretch="None" Visibility="Hidden"/>

                                                                                                </Grid>
                                                                                            </ls:LSEntityObject>
                                                                                        </Grid>
                                                                                    </ContentControl>
                                                                                </StackPanel>
                                                                            </Grid>
                                                                        </ls:LSContentControl>
                                                                        <DataTemplate.Triggers>
                                                                            <DataTrigger Binding="{Binding TadpoleTreeState}" Value="Hidden">
                                                                                <Setter TargetName="Darkening" Property="Visibility" Value="Visible"/>
                                                                            </DataTrigger>

                                                                            <DataTrigger Binding="{Binding IsSelectedCharacter}" Value="True">
                                                                                <Setter TargetName="FrameHighlight" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/portrait_frame_active_h.png"/>
                                                                            </DataTrigger>
                                                                            <DataTrigger Binding="{Binding Path=Tag, ElementName=ParentControl}" Value="False">
                                                                                <Setter TargetName="Frame" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_d.png"/>
                                                                                <Setter TargetName="FrameHighlight" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/PlayerPortraits/remote_portrait_frame_h.png"/>
                                                                            </DataTrigger>

                                                                            <MultiDataTrigger>
                                                                                <MultiDataTrigger.Conditions>
                                                                                    <Condition Binding ="{Binding Path=OrderIndex,RelativeSource={RelativeSource AncestorType=ls:LSPortraitListItem}}" Value="0"/>
                                                                                    <Condition Binding="{Binding Path=Tag, ElementName=ParentControl}" Value="True"/>
                                                                                </MultiDataTrigger.Conditions>
                                                                                <Setter TargetName="SelectCharacterInput" Property="BoundEvent" Value ="UISelectChar1"/>
                                                                            </MultiDataTrigger>
                                                                            <MultiDataTrigger>
                                                                                <MultiDataTrigger.Conditions>
                                                                                    <Condition Binding ="{Binding Path=OrderIndex,RelativeSource={RelativeSource AncestorType=ls:LSPortraitListItem}}" Value="1"/>
                                                                                    <Condition Binding="{Binding Path=Tag, ElementName=ParentControl}" Value="True"/>
                                                                                </MultiDataTrigger.Conditions>
                                                                                <Setter TargetName="SelectCharacterInput" Property="BoundEvent" Value ="UISelectChar2"/>
                                                                            </MultiDataTrigger>
                                                                            <MultiDataTrigger>
                                                                                <MultiDataTrigger.Conditions>
                                                                                    <Condition Binding ="{Binding Path=OrderIndex,RelativeSource={RelativeSource AncestorType=ls:LSPortraitListItem}}" Value="2"/>
                                                                                    <Condition Binding="{Binding Path=Tag, ElementName=ParentControl}" Value="True"/>
                                                                                </MultiDataTrigger.Conditions>
                                                                                <Setter TargetName="SelectCharacterInput" Property="BoundEvent" Value ="UISelectChar3"/>
                                                                            </MultiDataTrigger>
                                                                            <MultiDataTrigger>
                                                                                <MultiDataTrigger.Conditions>
                                                                                    <Condition Binding ="{Binding Path=OrderIndex,RelativeSource={RelativeSource AncestorType=ls:LSPortraitListItem}}" Value="3"/>
                                                                                    <Condition Binding="{Binding Path=Tag, ElementName=ParentControl}" Value="True"/>
                                                                                </MultiDataTrigger.Conditions>
                                                                                <Setter TargetName="SelectCharacterInput" Property="BoundEvent" Value ="UISelectChar4"/>
                                                                            </MultiDataTrigger>
                                                                        </DataTemplate.Triggers>
                                                                    </DataTemplate>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="VerticalAlignment" Value="Bottom"/>
                                                            <Setter Property="Opacity" Value="1"/>
                                                            <Setter Property="noesis:StyleInteraction.Triggers">
                                                                <Setter.Value>
                                                                    <noesis:StyleTriggerCollection>
                                                                        <b:EventTrigger EventName="PortraitSelected">
                                                                            <b:InvokeCommandAction IsEnabled="{Binding DataContext.CurrentPlayer.SelectedCharacter.IsCasting, Converter={StaticResource InvertBoolConverter}, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Command="{Binding DataContext.SelectCharacter,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                                                                            <b:InvokeCommandAction IsEnabled="{Binding DataContext.CurrentPlayer.SelectedCharacter.IsCasting, Converter={StaticResource InvertBoolConverter}, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Command="{Binding DataContext.PlaySelectCharacterReaction,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}" />
                                                                            <b:InvokeCommandAction Command="{Binding DataContext.TargetGameobjectCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding}"/>
                                                                            <b:InvokeCommandAction Command="{Binding DataContext.PlaySoundEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="UI_HUD_SelectCharacter"/>
                                                                        </b:EventTrigger>
                                                                    </noesis:StyleTriggerCollection>
                                                                </Setter.Value>
                                                            </Setter>
                                                            <Setter Property="BorderThickness" Value="0"/>
                                                            <Style.Triggers>
                                                                <Trigger Property="IsMouseOver" Value="True">
                                                                    <Setter Property="BorderBrush" Value="Transparent" />
                                                                    <Setter Property="Background" Value="Transparent" />
                                                                </Trigger>
                                                                <Trigger Property="IsSelected" Value="True">
                                                                    <Setter Property="Panel.ZIndex" Value="100"/>
                                                                    <Setter Property="BorderBrush" Value="Transparent" />
                                                                    <Setter Property="Background" Value="Transparent" />
                                                                </Trigger>
                                                            </Style.Triggers>
                                                        </Style>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <Trigger Property="Tag" Value="{StaticResource TrueValue}">
                                            <Setter Property="Opacity" Value="1"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </ls:LSPlayerList.ItemContainerStyle>
                            <ls:LSPlayerList.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Vertical"/>
                                </ItemsPanelTemplate>
                            </ls:LSPlayerList.ItemsPanel>
                        </ls:LSPlayerList>
                    </ls:LSNineSliceImage>
                </Grid>

                <ls:LSInputBinding BoundEvent="UICancel" PlayerId="{Binding CurrentPlayer.PlayerId}" EatInput="True" Command="{Binding CancelPreparationStage}" IsEnabled="{Binding IsInPreparationStage}"/>
                <Grid.InputBindings>
                    <MouseBinding Gesture="RightClick" Command="{Binding CancelPreparationStage}"/>
                </Grid.InputBindings>
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Loaded">
                        <!-- Tutorial UI Event - Tadpole Powers Tree Open -->
                        <b:InvokeCommandAction Command="{Binding TutorialEvent}" CommandParameter="cc289292-2ed5-4d60-bb37-386726323b8c"/>
                    </b:EventTrigger>

                    <b:EventTrigger EventName="PreviewMouseRightButtonDown">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding DataContext.IsInPreparationStage, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Operator="Equal" RightOperand="True"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_TadpolePower_Cancel"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </Grid>

            <ControlTemplate.Triggers>
                <Trigger SourceName="TadpoleImg" Property="IsMouseOver" Value="True">
                    <Setter TargetName="TadpoleImgFrame" Property="Source" Value="pack://application:,,,/DevGUI;component/Assets/TadpoleTree/tadpole_orb_h.png"/>
                </Trigger>

                <DataTrigger Binding="{Binding CurrentPlayer.PartyTadpoleCount}" Value="0">
                    <Setter TargetName="TadpoleImg" Property="Source" Value="pack://application:,,,/DevGUI;component/Assets/TadpoleTree/Tadpole_Pool_Empty.png"/>
                    <Setter TargetName="SelectTadpoleTxt" Property="Text" Value="{Binding Source=haebabd65g8998g4c56gaf02g823540c5bdb1, Converter={StaticResource TranslatedStringConverter}}"/>
                    <Setter TargetName="TadpoleCountTxt" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.TadpoledState}" Value="HalfIllithid">
                    <Setter TargetName="Vignette" Property="Fill" Value="{StaticResource DarkPurpleVignette}"/>
                    <Setter TargetName="HealthyBrain" Property="Effect">
                        <Setter.Value>
                            <ls:SaturationEffect Saturation="0.6" />
                        </Setter.Value>
                    </Setter>
                    <Setter TargetName="IllthidProgressLabel" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.TadpoledState}" Value="FullIllithid">
                    <Setter TargetName="Vignette" Property="Fill" Value="{StaticResource DarkPurpleVignette}"/>
                    <Setter TargetName="HealthyBrain" Property="Effect">
                        <Setter.Value>
                            <ls:SaturationEffect Saturation="0.2" />
                        </Setter.Value>
                    </Setter>
                    <Setter TargetName="IllthidProgressLabel" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="IllthidProgressLabel" Property="Text" Value="{Binding Source='h3660be4ag5385g4bf3g9d0bg1d304d634389',Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.TadpoleTreeState}" Value="Hidden">
                    <Setter TargetName="Blocker" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="Powers" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.TadpoleTreeState}" Value="Locked">
                    <Setter TargetName="Blocker" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="BlockerTitle" Property="Text" Value="{Binding Source='h764fcd6cgd702g41bcg93a6g64855afd2c92', Converter={StaticResource TranslatedStringConverter}}"/>
                    <Setter TargetName="BlockerBody" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="hae014f0cgf722g4cd8g93d8gd9faaa4e2ef7"/>
                                <Binding Path="CurrentPlayer.SelectedCharacter.Name"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.IsShapeShifted}" Value="True">
                    <Setter TargetName="Blocker" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="Powers" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="BlockerTitle" Property="Text" Value="{Binding Source='hc4df7df6gdc7dg48fdgac0fg0a299ddf74f6', Converter={StaticResource TranslatedStringConverter}}"/>
                    <Setter TargetName="BlockerBody" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="hdb5b8a51g3d00g49e0gafc9g8c2ae5e73c9c"/>
                                <Binding Path="CurrentPlayer.SelectedCharacter.Name"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InCombat">
                    <Setter TargetName="Blocker" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="BlockerTitle" Property="Text" Value="{Binding Source='h98dfc3fcg97b1g45a1g972dg5be8fb448318', Converter={StaticResource TranslatedStringConverter}}"/>
                    <Setter TargetName="BlockerBody" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="h3ce38deegcf48g4568g874dg88177a99f1c2"/>
                                <Binding Path="CurrentPlayer.SelectedCharacter.Name"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                    <StopStoryboard BeginStoryboardName="BackgroundAnimation_01"/>
                    <StopStoryboard BeginStoryboardName="BackgroundAnimation_02"/>
                </EventTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Template>
    <b:Interaction.Triggers>
        <b:EventTrigger EventName="Loaded">
            <ls:LSPlaySound Sound="UI_HUD_TadpolePower_Menu_Open"/>
        </b:EventTrigger>
        <b:EventTrigger EventName="Unloaded">
            <ls:LSPlaySound Sound="UI_HUD_TadpolePower_Menu_Close"/>
            <ls:LSPlaySound Sound="UI_HUD_TadpolePower_TadpoleLoop_Stop"/>
        </b:EventTrigger>
        <b:EventTrigger EventName="WidgetClosing">
            <b:InvokeCommandAction Command="{Binding CancelPreparationStage}"/>
        </b:EventTrigger>

    </b:Interaction.Triggers>
</ls:UIWidget>
