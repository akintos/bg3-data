<ls:UIWidget xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             Template="{StaticResource Hud.Root}"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             mc:Ignorable="d"
             x:Name="CursorText"
             ContextName="CursorText"
             d:DataContext="{d:DesignInstance Type=ls:DCCursorText}">
    <Control  >
        <Control.Template>
            <ControlTemplate >
                <ControlTemplate.Resources>
                    <Thickness x:Key="TooltipMargin" >-40,0,-40,-32</Thickness>
                    
                    <DropShadowEffect x:Key="DropShadow" Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="5.0"/>

                    <Style x:Key="CursorTextStyle" TargetType="{x:Type TextBlock}">
                        <Setter Property="FontSize" Value="{StaticResource ScaledBigFontSize}"/>
                        <Setter Property="Foreground" Value="{StaticResource LS_tint100}"/>
                        <Setter Property="Visibility" Value="Visible"/>
                        <Setter Property="noesis:Text.Stroke" Value="Black"/>
                        <Setter Property="noesis:Text.StrokeThickness" Value="4"/>
                        <Setter Property="Effect" Value="{StaticResource DropShadow}"/>
                        <Style.Triggers>
                            <Trigger Property="Text" Value="">
                                <Setter Property="Visibility" Value="Collapsed"/>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                    
                    <Style x:Key="CollapsedNameStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CursorTextStyle}">
                        <Setter Property="Foreground" Value="{StaticResource LS_accent25TxtColor}"/>
                        <Setter Property="FontSize" Value="{StaticResource ScaledSmallFontSize}"/>
                        <Setter Property="HorizontalAlignment" Value="Left"/>
                    </Style>

                    <Style x:Key="CursorErrorTextStyle" TargetType="{x:Type TextBlock}" BasedOn="{StaticResource CursorTextStyle}">
                        <Setter Property="FontSize" Value="{StaticResource ScaledSmallishFontSize}"/>
                    </Style>

                    <Style x:Key="InspectPrompt" TargetType="TextBlock">
                        <Setter Property="HorizontalAlignment" Value="Center"/>
                        <Setter Property="TextAlignment" Value="Center"/>
                        <Setter Property="Foreground" Value="{StaticResource TooltipColor.Primary}"/>
                        <Setter Property="FontSize" Value="{StaticResource ScaledSmallFontSize}"/>
                        <Setter Property="noesis:StyleInteraction.Behaviors">
                            <Setter.Value>
                                <noesis:StyleBehaviorCollection>
                                    <ls:CtxTransStringRunGeneratorBehavior LocaSource="{Binding Source='h26589fc6g39e5g4e2dg8c6eged01368da11d', Converter={StaticResource TranslatedStringConverter}}" PlayerId="{Binding PlayerId,RelativeSource={RelativeSource Mode=TemplatedParent}}">
                                        <ls:CtxTransStringRunGeneratorBehavior.NamedParamContentStyle>
                                            <Style TargetType="ContentControl">
                                                <Setter Property="Margin" Value="0,-16,0,-16" />
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <ls:LSNineSliceImage ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Buttons/btn_small_square_d.png" Slices="12 12 12 12" MinHeight="46" MinWidth="46" MaxWidth="{DynamicResource MaxTooltipContentWidth}" Padding="10,0,10,0">
                                                                <TextBlock Text="{Binding Shortcut}" Foreground="{StaticResource TooltipColor.Secondary}" FontSize="{StaticResource ScaledSmallFontSize}" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,2,0,-2" TextWrapping="NoWrap" TextTrimming="CharacterEllipsis"/>
                                                            </ls:LSNineSliceImage>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </ls:CtxTransStringRunGeneratorBehavior.NamedParamContentStyle>
                                    </ls:CtxTransStringRunGeneratorBehavior>
                                </noesis:StyleBehaviorCollection>
                            </Setter.Value>
                        </Setter>
                    </Style>

                </ControlTemplate.Resources>
                
                <Grid >
	                <Grid VerticalAlignment="Top" HorizontalAlignment="Left" x:Name="infoPanel" IsHitTestVisible="False">
                        <Grid.RenderTransform>
                            <TranslateTransform  X="{Binding CurrentPlayer.UIData.Cursor.Position.X}" Y="{Binding CurrentPlayer.UIData.Cursor.Position.Y}"/>
                        </Grid.RenderTransform>

                        <Grid x:Name="TaskInfoHolder" Margin="64,0,0,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.Tag>
                                <!--Calculate if HightDefense needs to be shown-->
                                <MultiBinding Converter="{StaticResource LessThanOrEqualMultiConverter}">
                                    <Binding Path="CurrentPlayer.CurrentTarget.Stats.ArmorClass.Value" Converter="{StaticResource AddConverter}" ConverterParameter="-14"/>
                                    <Binding Path="CurrentPlayer.SelectedCharacter.Stats.Level.Value" Converter="{StaticResource DivideConverter}" ConverterParameter="2"/>
                                </MultiBinding>
                            </Grid.Tag>
                            <!-- Task Icon -->
                            <Grid x:Name="TaskIcon" Grid.Column="0" Width="56" Height="56" VerticalAlignment="Top" HorizontalAlignment="Left" Visibility="Collapsed">
                                <Rectangle Fill="{Binding CurrentPlayer.SelectedCharacter.CurrentSpellTask.Icon}" Visibility="{Binding ElementName=taskObject,Path=Visibility,Converter={StaticResource InvertVisibilityConverter}}" Effect="{StaticResource DropShadow}"/>
                                <Rectangle x:Name="taskObject" Visibility="{Binding CurrentPlayer.UIData.ActiveTask.TaskObject,Converter={StaticResource NullToCollapsedConverter}}" Fill="{Binding CurrentPlayer.UIData.ActiveTask.TaskObject.Icon}"/>
                                <Rectangle x:Name="SpellDisabledOverlay" Visibility="{Binding CurrentPlayer.UIData.ActiveTask.CanExecute,Converter={StaticResource BoolToCollapsedConverter}}" Fill="#80000000"/>
                                <Rectangle x:Name="SpellLethalOverlay" Visibility="{Binding CurrentPlayer.UIData.ActiveTask.LethalOutcome,Converter={StaticResource BoolToVisibleConverter}}" Fill="#80FF0000"/>
                            </Grid>

                            <StackPanel Margin="12,0,0,0" Grid.Column="1" VerticalAlignment="Top" HorizontalAlignment="Left" DataContext="{Binding CurrentPlayer.UIData}" d:DataContext="{d:DesignInstance Type=ls:UIData}">
                                <b:Interaction.Behaviors>
                                    <ls:CapabilityListSelectorBehavior x:Name="CapabilityListSelectorBehavior" 
                                                                       CapabilitiesCollection="{Binding DataContext.CurrentPlayer.SelectedCharacter.ModifiedCapabilities, ElementName=CursorText}"
                                                                       CharacterIsInTurnBasedMode="{Binding DataContext.CurrentPlayer.SelectedCharacter.InTurnBasedMode, ElementName=CursorText}"
                                                                       CharacterIsShapeshifted="{Binding DataContext.CurrentPlayer.SelectedCharacter.IsShapeShifted, ElementName=CursorText}"
                                                                       PlayerCurrentTaskType="{Binding DataContext.CurrentPlayer.UIData.ActiveTask.PreviewType, ElementName=CursorText}"/>
                                </b:Interaction.Behaviors>

                                <StackPanel Orientation="Horizontal">
                                    
                                    <!-- Multi-target Progress -->
                                    <Grid x:Name="CursorDashContainer" VerticalAlignment="Center" Visibility="Collapsed" Margin="-4,0,8,0" Height="{Binding ActualHeight, ElementName=TaskIcon}" Effect="{StaticResource DropShadow}">
                                        <Grid.Resources>
                                            <Style x:Key="CursorDashPathStyle" TargetType="Path">
                                                <Setter Property="StrokeThickness" Value="8"/>
                                                <Setter Property="noesis:Element.PPAAIn" Value="0.3"/>
                                                <Setter Property="noesis:Element.PPAAOut" Value="2.0"/>
                                                <Setter Property="RenderOptions.BitmapScalingMode" Value="NearestNeighbor"/>
                                                <Setter Property="UseLayoutRounding" Value="True"/>
                                                <Setter Property="SnapsToDevicePixels" Value="True"/>
                                                <Setter Property="Width" Value="50"/>
                                                <Setter Property="Height" Value="50"/>
                                                <Setter Property="Stroke" Value="{StaticResource LS_tint100}"/>
                                                <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                                                <Setter Property="Data">
                                                    <Setter.Value>
                                                        <EllipseGeometry RadiusX="20" RadiusY="20" Center="25,25"/>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>

                                            <Style x:Key="CursorHPDashPathStyle" TargetType="Path" BasedOn="{StaticResource CursorDashPathStyle}">
                                                <Setter Property="noesis:Element.PPAAIn" Value="0.25"/>
                                                <Setter Property="noesis:Element.PPAAOut" Value="0.25"/>
                                            </Style>

                                            <System:Double x:Key="BaseColorOpacity">0.65</System:Double>
                                            <SolidColorBrush x:Key="BaseColor" Color="{Binding Source={StaticResource LS_accent100TxtColor}, Path=Color}"/>
                                            <SolidColorBrush x:Key="HighlightColor" Color="{Binding Source={StaticResource LS_accent100TxtColor}, Path=Color}"/>
                                        </Grid.Resources>

                                        <Control x:Name="InnerHitPointsDash" HorizontalAlignment="Center" VerticalAlignment="Center" Template="{StaticResource SimplifiedCursorDashTemplate}" DataContext="{Binding ActiveTask.HPTargetValues}" Visibility="{Binding DataContext, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToCollapsedConverter}}">
                                            <Control.Resources>
                                                <Style x:Key="PieStyle" BasedOn="{StaticResource CursorHPDashPathStyle}"/>
                                                <System:Double x:Key="RelativeSegmentLength">0.9</System:Double>
                                            </Control.Resources>
                                        </Control>

                                        <Control x:Name="InnerProjectilesDash" HorizontalAlignment="Center" VerticalAlignment="Center" Template="{StaticResource SimplifiedCursorDashTemplate}" DataContext="{Binding ActiveTask.TargetValues}" Visibility="{Binding DataContext, RelativeSource={RelativeSource Self}, Converter={StaticResource NullToCollapsedConverter}}">
                                            <Control.Resources>
                                                <Style x:Key="PieStyle" BasedOn="{StaticResource CursorDashPathStyle}"/>
                                                <System:Double x:Key="RelativeSegmentLength">0.9</System:Double>
                                            </Control.Resources>
                                        </Control>
                                    </Grid>

                                    <!-- Hit Chance -->
                                    <Border x:Name="hitChance" Height="{Binding ActualHeight, ElementName=TaskIcon}" Visibility="{Binding HitChanceDesc.ShowDescription, Converter={StaticResource BoolToVisibleConverter}}">
                                        <TextBlock x:Name="hitChanceText" VerticalAlignment="Center" Margin="0,2,0,0" Text="{Binding HitChanceDesc.TotalHitChance, StringFormat={}{0}%}" Style="{StaticResource CursorTextStyle}" FontSize="{StaticResource ScaledBigFontSize}" TextAlignment="Left"/>
                                    </Border>

                                    <!-- Distance -->
                                    <TextBlock x:Name="distance" Panel.ZIndex="9" Text="{Binding Cursor.Distance,Converter={StaticResource UnitConverter}, ConverterParameter='Distance N1 Short'}" Style="{StaticResource CursorTextStyle}" FontSize="{StaticResource ScaledBigFontSize}"  Visibility="{Binding Cursor.Distance,Converter={StaticResource CountToVisibilityConverter}}"/>

                                    <!-- Obscured Indicator -->
                                    <Image x:Name="ObscuredIndicator" Stretch="None" Visibility="Collapsed" HorizontalAlignment="Left"/>

                                    <!-- Encumberance -->
                                    <Grid HorizontalAlignment="Left" x:Name="EncumbranceIndicator" >
                                        <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/weightInfo_BG.png" Stretch="None" ClipToBounds="False" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="0,-6,-20,0"/>
                                        <Control Template="{StaticResource EncumbranceStateWarningTemplate}" DataContext="{Binding Cursor.EncumbranceStateWarning}" VerticalAlignment="Center" Margin="60,0,0,0"/>
                                    </Grid>
                                </StackPanel>

                                <!-- Confirmation message -->
                                <TextBlock x:Name="ConfirmationText" Text="{Binding Source='h2ab6b090gae25g45a3gbd00g2cb47a85bff2',Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource CursorTextStyle}" Visibility="Collapsed"/>

                                <!-- Target Name and Surface/Cloud -->
                                <ls:LSNineSliceImage x:Name="TargetPanel" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Tooltips/worldTT_context_bg.png" Slices="22" Visibility="Collapsed" HorizontalContentAlignment="Left" HorizontalAlignment="Left" Margin="-14,-14,0,0" Padding="32,22">
                                    <StackPanel HorizontalAlignment="Left">
                                        <TextBlock x:Name="Target" Text="{Binding DataContext.CurrentPlayer.CurrentTarget.Name, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" 
                                                   Style="{StaticResource CollapsedNameStyle}" Foreground="{StaticResource LS_tint100}" Margin="0"/>
                                        <TextBlock x:Name="CloudInfo"  Text="{Binding CloudInformation.Header}" Style="{StaticResource CollapsedNameStyle}" Visibility="Collapsed"/>
                                        <TextBlock x:Name="SurfaceInfo" Text="{Binding SurfaceInformation.Header}" Style="{StaticResource CollapsedNameStyle}" Visibility="Collapsed"/>
                                    </StackPanel>
                                </ls:LSNineSliceImage>

                                <!-- Advantage / Disadvantage -->
                                <StackPanel x:Name="AdvantagesList" Orientation="Horizontal" Visibility="{Binding HitChanceDesc.Advantages.Count, Converter={StaticResource CountToVisibilityConverter}}">
                                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_advantage.png" Stretch="None" VerticalAlignment="Center" Effect="{StaticResource DropShadow}"/>
                                    <TextBlock Text="{Binding Source='h986f906agb172g4956g9567g5cbd32150349', Converter={StaticResource TranslatedStringConverter}, StringFormat='\ {0}'}" Style="{StaticResource CursorTextStyle}" FontSize="{StaticResource ScaledSmallishFontSize}" VerticalAlignment="Center" Margin="0,0"/>
                                </StackPanel>

                                <StackPanel x:Name="DisadvantagesList" Orientation="Horizontal" Visibility="{Binding HitChanceDesc.Disadvantages.Count, Converter={StaticResource CountToVisibilityConverter}}">
                                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/ico_disadvantage.png" Stretch="None" VerticalAlignment="Center"/>
                                    <TextBlock Text="{Binding Source='had6da506gedf2g4c86g9324g452e287e3c47', Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource CursorTextStyle}" FontSize="{StaticResource ScaledSmallishFontSize}" VerticalAlignment="Center" Margin="0,0"/>
                                </StackPanel>

                                <!-- Relative Defense -->
                                <TextBlock x:Name="highDefText" Text="{Binding Source='hd135c195g1887g4ee4g85b8g586666685815', Converter={StaticResource TranslatedStringConverter}}" Visibility="Collapsed" Style="{StaticResource CursorTextStyle}" FontSize="{StaticResource ScaledSmallishFontSize}" VerticalAlignment="Center" />

                                <!-- IF: WIP Bonus Modifiers will need code support
                                <StackPanel x:Name="BonusModifier" Orientation="Horizontal" Visibility="Visible">
                                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/targetInfo_deltas_plus.png" Stretch="None" VerticalAlignment="Center" Margin="-16,0,-4,0"/>
                                    <TextBlock Text="+2 Damage" Style="{StaticResource CursorTextStyle}" Foreground="{StaticResource TooltipColor.Bonus}" FontSize="{StaticResource ScaledSmallishFontSize}" VerticalAlignment="Center" Margin="0,0"/>
                                </StackPanel>

                                <StackPanel x:Name="NegativeModifier" Orientation="Horizontal" Visibility="Visible">
                                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/targetInfo_deltas_minus.png" Stretch="None" VerticalAlignment="Center" Margin="-16,0,-4,0"/>
                                    <TextBlock Text="-2 Damage" Style="{StaticResource CursorTextStyle}" Foreground="{StaticResource TooltipColor.Alert}" FontSize="{StaticResource ScaledSmallishFontSize}" VerticalAlignment="Center" Margin="0,0"/>
                                </StackPanel> -->
                                
                                <!-- Error Messages -->
                                <ItemsControl x:Name="CursorTextList" ItemsSource="{Binding ActiveTask.Info}" HorizontalAlignment="Left">
                                    <ItemsControl.ItemsPanel>
                                        <ItemsPanelTemplate>
                                            <StackPanel Orientation="Vertical"/>
                                        </ItemsPanelTemplate>
                                    </ItemsControl.ItemsPanel>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate DataType="ls:VMText">
                                            <StackPanel x:Name="cTextRoot" Orientation="Horizontal">
                                                <!--ls:TextBlockFormatter.SourceText-->
                                                <TextBlock x:Name="txt" ls:TextBlockFormatter.SourceText="{Binding Text}" Style="{StaticResource CursorErrorTextStyle}"/>
                                            </StackPanel>
                                            <DataTemplate.Triggers>
                                                <DataTrigger Binding="{Binding TextContext}" Value="HitChance">
                                                    <Setter TargetName="cTextRoot" Property="Visibility" Value="Collapsed" />
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>

                                <ItemsControl x:Name="CapabilitiesErrors" ItemsSource="{Binding DataContext.CurrentPlayer.SelectedCharacter.ModifiedCapabilities, ElementName=CursorText}" AlternationCount="{Binding ItemsSource.Count, RelativeSource={RelativeSource Self}}">
                                    <ItemsControl.ItemContainerStyle>
                                        <Style TargetType="ContentPresenter">
                                            <Setter Property="Visibility" Value="Collapsed"/>
                                            <Style.Triggers>
                                                <!-- Show only the first one -->
                                                <DataTrigger Value="True">
                                                    <DataTrigger.Binding>
                                                        <MultiBinding Converter="{StaticResource EqualConverter}">
                                                            <Binding Path="."/>
                                                            <Binding Path="FirstVisibleElement" ElementName="CapabilityListSelectorBehavior"/>
                                                        </MultiBinding>
                                                    </DataTrigger.Binding>
                                                    <Setter Property="Visibility" Value="Visible"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </ItemsControl.ItemContainerStyle>
                                    <ItemsControl.ItemTemplate>
                                        <DataTemplate DataType="{x:Type ls:VMCapabilityModifier}">
                                            <StackPanel Orientation="Horizontal">
                                                <TextBlock x:Name="Message" Style="{StaticResource CursorErrorTextStyle}"/>
                                                <TextBlock x:Name="Cause" Style="{StaticResource CursorErrorTextStyle}" Visibility="{Binding Cause, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}">
                                                    <TextBlock.Text>
                                                        <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                            <Binding Source="hb19f530dgfeb2g4d13g8d64ga8216f364f67"/>
                                                            <Binding Path="Cause"/>
                                                        </MultiBinding>
                                                    </TextBlock.Text>
                                                </TextBlock>
                                            </StackPanel>

                                            <DataTemplate.Triggers>
                                               <DataTrigger Binding="{Binding Type}" Value="ActionsBlocked">
                                                    <Setter TargetName="Message" Property="Text" Value="{Binding Source='hc26b3ee1g8586g4fc5gbc1dg14711bc21a4b', Converter={StaticResource TranslatedStringConverter}}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Type}" Value="BonusActionsBlocked">
                                                    <Setter TargetName="Message" Property="Text" Value="{Binding Source='hc9c9197cg997fg4dcagad83g7fd70e8c645e', Converter={StaticResource TranslatedStringConverter}}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Type}" Value="MovementBlocked">
                                                    <Setter TargetName="Message" Property="Text" Value="{Binding Source='h7760a99cg8a58g4555gb0f1g0e3e2b872f66', Converter={StaticResource TranslatedStringConverter}}"/>
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding Type}" Value="MovementModification">
                                                    <Setter TargetName="Message" Property="Text" Value="{Binding Source='h987efa83g0f3bg416dga3dfg7a588084af78', Converter={StaticResource TranslatedStringConverter}}"/>
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding Type}" Value="MovementMultiplier">
                                                    <Setter TargetName="Message" Property="Text" Value="{Binding Source='h987efa83g0f3bg416dga3dfg7a588084af78', Converter={StaticResource TranslatedStringConverter}}"/>
                                                </DataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Type}" Value="MovementMultiplier"/>
                                                        <Condition Binding="{Binding Value}" Value="0.5"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter TargetName="Message" Property="Text" Value="{Binding Source='h709568ceg6653g4caag90afg57b5be47ca55', Converter={StaticResource TranslatedStringConverter}}"/>
                                                </MultiDataTrigger>

                                                <DataTrigger Binding="{Binding Type}" Value="MovementCostMultiplier">
                                                    <Setter TargetName="Message" Property="Text" Value="{Binding Source='hd5796d9fg7f28g4f61g9287g688eccd1b538', Converter={StaticResource TranslatedStringConverter}}"/>
                                                </DataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Type}" Value="MovementCostMultiplier"/>
                                                        <Condition Binding="{Binding Value}" Value="2"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter TargetName="Message" Property="Text" Value="{Binding Source='hb8b5ca34g224eg4ed0g8029g170746bef0f4', Converter={StaticResource TranslatedStringConverter}}"/>
                                                </MultiDataTrigger>

                                                <DataTrigger Binding="{Binding Type}" Value="SpellcastingBlocked">
                                                    <Setter TargetName="Message" Property="Text" Value="{Binding Source='h016d4e05g4042g42c9g8e4cg351088deddf5', Converter={StaticResource TranslatedStringConverter}}"/>
                                                </DataTrigger>
                                               
                                                <DataTrigger Binding="{Binding Type}" Value="ResurrectedInThisTurn">
                                                    <Setter TargetName="Message" Property="Text" Value="{Binding Source='h1ac301b7gce0ag4693gbba2gb912e5abe10e', Converter={StaticResource TranslatedStringConverter}}"/>
                                                </DataTrigger>

                                                <DataTrigger Binding="{Binding Type}" Value="DisarmedInThisTurn">
                                                    <Setter TargetName="Message" Property="Text" Value="{Binding Source='he4c05e4ag7e4eg46edgbc22g77fab2bddc2d', Converter={StaticResource TranslatedStringConverter}}"/>
                                                </DataTrigger>
                                            </DataTemplate.Triggers>
                                        </DataTemplate>
                                    </ItemsControl.ItemTemplate>
                                </ItemsControl>

                                <StackPanel x:Name="TargetCantBeHealedError" Orientation="Horizontal" Visibility="{Binding DataContext.CurrentPlayer.UIData.ActiveTask.TargetCanBeHealed, ElementName=CursorText, Converter={StaticResource BoolToCollapsedConverter}}" >
                                    <TextBlock x:Name="Message" Style="{StaticResource CursorErrorTextStyle}" Text="{Binding Source='h392eef12g97b6g47c8g858egd305c12f7dfd', Converter={StaticResource TranslatedStringConverter}}"/>
                                    <TextBlock x:Name="Cause" Style="{StaticResource CursorErrorTextStyle}" Visibility="{Binding DataContext.CurrentPlayer.UIData.ActiveTask.TargetHealBlockCause, ElementName=CursorText, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}">
                                        <TextBlock.Text>
                                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                <Binding Source="hb19f530dgfeb2g4d13g8d64ga8216f364f67"/>
                                                <Binding Path="DataContext.CurrentPlayer.UIData.ActiveTask.TargetHealBlockCause" ElementName="CursorText"/>
                                            </MultiBinding>
                                        </TextBlock.Text>
                                    </TextBlock>
                                </StackPanel>
                            </StackPanel>
                        </Grid>
                    </Grid>

                    <!-- Pinned Tooltips -->
                    <Grid x:Name="ExtendedInfo" Visibility="{Binding ElementName=infoPanel, Path=Visibility,Converter={StaticResource InvertVisibilityConverter}}" ls:TooltipExtender.Owner="{Binding DataContext.CurrentPlayer.SelectedCharacter,RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" ls:TooltipExtender.Context="World">
	                    <b:Interaction.Triggers>
		                    <b:EventTrigger EventName="MouseRightButtonDown">
			                    <b:ChangePropertyAction TargetName="infoPanel" PropertyName="Visibility" Value="Visible"/>
		                    </b:EventTrigger>
	                    </b:Interaction.Triggers>
                        <ls:LSButton BoundEvent="UIPinTooltip" Background="#BB000000" IsEnabled="{Binding ElementName=ExtendedInfo, Path=IsVisible}" Command="{Binding DataContext.ReleaseCursorDataCommand.ActionCommand}" >
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click">
                                    <b:ChangePropertyAction TargetName="infoPanel" PropertyName="Visibility" Value="Visible"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                            <ls:LSButton.Template>
                                <ControlTemplate TargetType="ls:LSButton">
                                    <Rectangle Fill="{TemplateBinding Background}" />
                                </ControlTemplate>
                            </ls:LSButton.Template>
                        </ls:LSButton>
                        <StackPanel  x:Name="ttHolder" HorizontalAlignment="Left" VerticalAlignment="Top" Orientation="Horizontal" Margin="80,0,0,0" >
                            <StackPanel.RenderTransform>
                                <TransformGroup>
                                    <TranslateTransform x:Name="TTTransform" X="0" Y="0"/>
                                    <TranslateTransform x:Name="TTOffset" X="{Binding ElementName=SurfaceTTList,Path=ActualWidth,Converter={StaticResource MultiplierConverter}, ConverterParameter=-1}" Y="0"/>
                                </TransformGroup>

                            </StackPanel.RenderTransform>
                            <b:Interaction.Behaviors>
                                <ls:KeepInsideParentBehavior Parent="{Binding ElementName=ExtendedInfo}"/>
                            </b:Interaction.Behaviors>
                            <StackPanel x:Name="SurfaceTTList" Orientation="Vertical" Margin="0">
                                <!-- Cloud information tooltip part -->
                                <ContentControl Template="{StaticResource NoPinTooltipTemplate}" Content="{Binding Cloud}" ContentTemplate="{StaticResource SurfaceTooltipContentTemplate}" HorizontalAlignment="Left" Width="{StaticResource SurfaceTooltipContentWidth}" MinHeight="{StaticResource SurfaceTooltipMinHeight}" Visibility="{Binding Cloud.HasSurface, Converter={StaticResource BoolToVisibleConverter}}" Margin="{StaticResource TooltipMargin}"/>
                                <ContentControl Template="{StaticResource NoPinTooltipTemplate}" Content="{Binding Surface}" ContentTemplate="{StaticResource SurfaceTooltipContentTemplate}" HorizontalAlignment="Left" Width="{StaticResource SurfaceTooltipContentWidth}" MinHeight="{StaticResource SurfaceTooltipMinHeight}" Visibility="{Binding Surface.HasSurface, Converter={StaticResource BoolToVisibleConverter}}" Margin="{StaticResource TooltipMargin}"/>
                            </StackPanel>
                            <ContentControl x:Name="worldTargetTT" Template="{StaticResource NoPinTooltipTemplate}" ls:TooltipExtender.Content="{Binding CurrentTarget}" Content="{Binding CurrentTarget}" ContentTemplate="{StaticResource CharacterTooltipTemplate}" HorizontalAlignment="Left" HorizontalContentAlignment="Left" Visibility="{Binding CurrentTarget, Converter={StaticResource NullToCollapsedConverter}}" Margin="{StaticResource TooltipMargin}" ls:TooltipExtender.IsOpen="{Binding IsVisible , RelativeSource={RelativeSource Self}}"/>

                        </StackPanel>

                    </Grid>
                    <ls:LSInputBinding x:Name="ExamineInput" 
                                       BoundEvent="UIPinTooltip" 
                                       IsEnabled="{Binding CurrentPlayer.CurrentTarget,Converter={StaticResource NullToBoolFalseConverter}}"
                                       Command="{Binding ExamineCommand}"
                                       CommandParameter="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.EntityHandle}"/>

                    <ls:LSInputBinding x:Name="PinInput" 
                                       BoundEvent="UIPinTooltip" 
                                       IsEnabled="{Binding ElementName=TargetPanel, Path=IsVisible}" 
                                       Command="{Binding PinCursorDataCommand.ActionCommand}">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="LSInputBindingPressed">
                                <b:ChangePropertyAction TargetName="TTTransform" PropertyName="X" Value="{Binding CurrentPlayer.UIData.Cursor.Position.X}"/>
                                <b:ChangePropertyAction TargetName="TTTransform" PropertyName="Y" Value="{Binding CurrentPlayer.UIData.Cursor.Position.Y}"/>
                                <b:ChangePropertyAction TargetName="infoPanel" PropertyName="Visibility" Value="Collapsed"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSInputBinding>
                        
                </Grid>
                
                <ControlTemplate.Triggers>
                    
                    <!-- Triggers: TaskIcon-->
                    
                    <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CurrentSpellTask,Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
	                    <Setter TargetName="TaskIcon" Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                    
                    <DataTrigger Binding="{Binding Data.UIInputMethod}" Value="Controller">
                        <Setter TargetName="TaskIcon" Property="Margin" Value="100,-80,0,0"/>
                        <Setter TargetName="TaskIcon" Property="Width" Value="80"/>
                        <Setter TargetName="TaskIcon" Property="Height" Value="80"/>
                    </DataTrigger>
                    
                    <DataTrigger Binding="{Binding CurrentPlayer.UIData.ActiveTask.TaskObject,Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
		                <Setter TargetName="TaskIcon" Property="Visibility" Value="Visible"/>
	                </DataTrigger>

                    <!-- Triggers: Projectiles and HP -->
                    <DataTrigger Binding="{Binding Visibility, ElementName=InnerHitPointsDash}" Value="Visible">
                        <Setter TargetName="InnerProjectilesDash" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>

                    <!-- Triggers: HitChance and Primary messaging -->

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding CurrentPlayer.UIData.HitChanceDesc.Advantages.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                            <Condition Binding="{Binding CurrentPlayer.UIData.HitChanceDesc.Disadvantages.Count}" Value="0"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="hitChanceText" Property="Foreground" Value="{StaticResource LS_bonusTxtColor}"/>
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding CurrentPlayer.UIData.HitChanceDesc.Advantages.Count}" Value="0"/>
                            <Condition Binding="{Binding CurrentPlayer.UIData.HitChanceDesc.Disadvantages.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="hitChanceText" Property="Foreground" Value="{StaticResource LS_alertTxtColor}"/>
                    </MultiDataTrigger>

                    <DataTrigger Binding="{Binding Visibility, ElementName=InnerHitPointsDash}" Value="Visible">
                        <Setter TargetName="CursorDashContainer" Property="Visibility" Value="Visible" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding Visibility, ElementName=InnerProjectilesDash}" Value="Visible">
                        <Setter TargetName="CursorDashContainer" Property="Visibility" Value="Visible" />
                    </DataTrigger>

                    <DataTrigger Binding="{Binding CurrentPlayer.UIData.Cursor.CursorObscuredState}" Value="Clear">
                        <Setter TargetName="ObscuredIndicator" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="ObscuredIndicator" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/HUD/ico_fullSun.png"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding CurrentPlayer.UIData.Cursor.CursorObscuredState}" Value="LightlyObscured">
                        <Setter TargetName="ObscuredIndicator" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="ObscuredIndicator" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/HUD/ico_halfSun.png"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding CurrentPlayer.UIData.Cursor.CursorObscuredState}" Value="HeavilyObscured">
                        <Setter TargetName="ObscuredIndicator" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="ObscuredIndicator" Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/HUD/ico_hollowSun.png"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding CurrentPlayer.UIData.ActiveTask.RootCastSpell.SpellType}" Value="Shout">
                        <Setter TargetName="ConfirmationText" Property="Visibility" Value="Visible"/>
                    </DataTrigger>
                    
                    <!-- Tirggers: TargetPanel -->
                    
                    <DataTrigger Binding="{Binding CurrentTarget, Converter={StaticResource TypeConverter}}" Value="ls.VMItem">
                        <Setter TargetName="worldTargetTT" Property="ContentTemplate" Value="{StaticResource ItemsTooltip}"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding CurrentPlayer.UIData.Cursor.EncumbranceStateWarning }" Value="None">
                        <Setter TargetName="EncumbranceIndicator" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>

                    <DataTrigger Binding="{Binding CurrentPlayer.CurrentTarget,Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                        <Setter TargetName="TargetPanel" Property="Visibility" Value="Visible"/>
                    </DataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding CurrentPlayer.CurrentTarget,Converter={StaticResource NullToBoolFalseConverter}}" Value="False"/>
                            <Condition Binding="{Binding CurrentPlayer.UIData.CloudInformation.HasSurface}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="TargetPanel" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="CloudInfo" Property="Visibility" Value="Visible"/>
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding CurrentPlayer.CurrentTarget,Converter={StaticResource NullToBoolFalseConverter}}" Value="False"/>
                            <Condition Binding="{Binding CurrentPlayer.UIData.SurfaceInformation.HasSurface}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="TargetPanel" Property="Visibility" Value="Visible"/>
                        <Setter TargetName="SurfaceInfo" Property="Visibility" Value="Visible"/>
                    </MultiDataTrigger>

                    <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CurrentSpellTask,Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                        <Setter TargetName="TargetPanel" Property="Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    
                    <Trigger SourceName="CloudInfo" Property="Visibility" Value="Visible">
                        <Setter TargetName="Target" Property="Margin" Value="0,0,0,10"/>
                    </Trigger>

                    <Trigger SourceName="SurfaceInfo" Property="Visibility" Value="Visible">
                        <Setter TargetName="Target" Property="Margin" Value="0,0,0,10"/>
                    </Trigger>

                    <DataTrigger Binding="{Binding ElementName=worldTargetTT,Path=IsVisible}" Value="False">
                        <Setter TargetName="SurfaceTTList" Property="Margin" >
                            <Setter.Value>
                                <MultiBinding Converter="{StaticResource CreateRectConverter}">
                                    <Binding Path="ActualWidth" ElementName="SurfaceTTList"/>
                                    <Binding Source="0"/>
                                    <Binding Source="0"/>
                                    <Binding Source="0"/>
                                </MultiBinding>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>

                    <!-- Triggers: Extra messaging -->
                    
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding CurrentPlayer.UIData.HitChanceDesc.Advantages.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                            <Condition Binding="{Binding CurrentPlayer.UIData.HitChanceDesc.Disadvantages.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="AdvantagesList" Property="Visibility" Value="Collapsed"/>
                        <Setter TargetName="DisadvantagesList" Property="Visibility" Value="Collapsed"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding CurrentPlayer.UIData.HitChanceDesc.ShowDescription}" Value="True"/>
                            <Condition Binding="{Binding ElementName=TaskInfoHolder,Path=Tag}" Value="False"/>
                            <Condition Binding="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.PlayerRelation}" Value="Enemy"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="highDefText" Property="Visibility" Value="Visible"/>
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding CurrentPlayer.UIData.Cursor.IsOverUI}" Value="True"/>
                            <Condition Binding="{Binding CurrentPlayer.UIData.Cursor.TargetInUI}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <MultiDataTrigger.Setters>
                            <Setter TargetName="CursorTextList" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="CapabilitiesErrors" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="TargetCantBeHealedError" Property="Visibility" Value="Collapsed" />
                        </MultiDataTrigger.Setters>
                    </MultiDataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.IsCurrentTurn}" Value="False"/>
                            <Condition Binding="{Binding CurrentPlayer.CanEndTurn}" Value="False"/>
                            <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InFTB"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="CapabilitiesErrors" Property="Visibility" Value="Collapsed" />
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.IsCurrentTurn}" Value="False"/>
                            <Condition Binding="{Binding CurrentPlayer.CanEndTurn}" Value="False"/>
                            <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InCombat"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="CapabilitiesErrors" Property="Visibility" Value="Collapsed" />
                    </MultiDataTrigger>

                </ControlTemplate.Triggers>
            </ControlTemplate>
        </Control.Template>
    </Control>
</ls:UIWidget>