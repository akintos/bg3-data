<ls:UIWidget x:Name="Pickpocket_c"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors" 
             
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d"
             d:DesignWidth="3840" d:DesignHeight="2160"
             d:DataContext="{d:DesignInstance {x:Type ls:DCPickpocket}, IsDesignTimeCreatable=True}"
             ls:UIWidget.UseCustomDC="True"
             ls:UIWidget.ContextName="Pickpocket"
             FocusDown="UIDown" FocusLeft="UILeft" FocusRight="UIRight" FocusUp="UIUp" CanCacheFocusSurroundingElements="False">

    <ls:UIWidget.Template>
        <ControlTemplate>
            <ControlTemplate.Resources>
                <BitmapImage x:Key="WeightIconImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_weight.png" />
                <BitmapImage x:Key="ToggleBgImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_toggle_bg.png" />
                <BitmapImage x:Key="InventoryIconImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_header_inventory.png" />
                <BitmapImage x:Key="CallToActionImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_callToAction_wide_bg.png" />
                <BitmapImage x:Key="PanelTopImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_panel_top_carousel.png" />
                <BitmapImage x:Key="PanelBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_panel_bg.png"/>
                <BitmapImage x:Key="ContainerDivider" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_container_divider.png" />
                <BitmapImage x:Key="PanelFooter" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Pickpocket/c_assets/c_pickpocket_footer_bg.png" />
                <BitmapImage x:Key="ResultRing" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Pickpocket/c_assets/c_pickpocket_circle_big.png" />
                <BitmapImage x:Key="TargetRing" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Pickpocket/c_assets/c_pickpocket_circle_small.png" />

                <ControlTemplate x:Key="Template.InventoryContainer" TargetType="ListBoxItem">
                    <ls:LSEntityObject x:Name="CellRoot" Context="{Binding (ls:ContextMenuService.Context) , RelativeSource={RelativeSource Mode=TemplatedParent} }" ls:ContextMenuService.GenerateEnabled="False" DataContext="{Binding Object}" EntityRef="{Binding EntityHandle}" Background="{TemplateBinding Background}" ToolTipService.Placement="Right" Focusable="True" ls:MoveFocus.Focusable="True" Tag="">
                        <ls:LSEntityObject.ToolTip>
                            <ls:LSTooltip Content="{Binding DataContext.Object,RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                        </ls:LSEntityObject.ToolTip>
                        <b:Interaction.Behaviors>
                            <ls:ContextMenuFillBehavior Context="{Binding (ls:ContextMenuService.Context) , RelativeSource={RelativeSource Mode=TemplatedParent} }" Player="{Binding DataContext.CurrentPlayer, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" TargetObject="{Binding .}" Source="{Binding SelectedItems,RelativeSource={RelativeSource AncestorType=ListBox}}" Command="{Binding DataContext.ContextActionPressed, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </b:Interaction.Behaviors>
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=CellRoot}" Value="True">
                                <b:InvokeCommandAction Command="{Binding DataContext.ClearItemNewFlag, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding .}"/>
                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                        <ContentPresenter  IsHitTestVisible="False"/>
                        <Image x:Name="SelectOverlay" Source="{StaticResource InvSlot_SelectionOverlay}" IsHitTestVisible="False" Visibility="Hidden" />
                        <Image x:Name="FocusOverlay" Source="{StaticResource InvSlot_Selector}" IsHitTestVisible="False" Visibility="Hidden" />
                    </ls:LSEntityObject>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="SelectOverlay" Property="Visibility" Value="Visible" />
                            <!--can be removed if we get the focusedElement on the ListboxItem-->
                            <Setter TargetName="CellRoot" Property="Tag" Value="IsSelected"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="FocusOverlay" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <!--overriding these to keep the old sizes since this ui doesn't support cell scaling yet-->
                <System:Double x:Key="ScaledNewItemIconSize">102</System:Double>
                <System:Double x:Key="ScaledNewItemIconSizeHighlight">104</System:Double>
                <System:Double x:Key="ScaledNewSlotSize">112</System:Double>

                <Storyboard x:Key="AnimatePie">
                    <DoubleAnimation Storyboard.TargetName="chancePie" Storyboard.TargetProperty="Value" To="{Binding ElementName=chancePie , Path=Tag}" Duration="0:0:0.3" >
                        <DoubleAnimation.EasingFunction>
                            <CubicEase EasingMode="EaseOut"/>
                        </DoubleAnimation.EasingFunction>
                    </DoubleAnimation>
                </Storyboard>
            </ControlTemplate.Resources>

            <Grid Background="{StaticResource LS_PanelBackground}" ls:TooltipExtender.Owner="{Binding CurrentPlayer.SelectedCharacter}">
                <Grid Name="Inventory" HorizontalAlignment="Center" VerticalAlignment="Center">
                    <b:Interaction.Behaviors>
                        <ls:CollectionFilterBehavior x:Name="PlayerInventoryFiltered" ItemsSource="{Binding Container.Inventory.Slots}" Predicate="{Binding Container.Inventory.TabFiltersPredicate}"/>
                    </b:Interaction.Behaviors>

                    <b:Interaction.Triggers>
                        <b:DataTrigger Binding="{Binding IsKeyboardFocusWithin, ElementName=ContainerListBox}" Value="False">
                            <b:ChangePropertyAction TargetName="ContainerListBox" PropertyName="SelectedIndex" Value="-1" />
                        </b:DataTrigger>
                        <b:DataTrigger Binding="{Binding IsKeyboardFocusWithin, ElementName=CharacterListBox}" Value="False">
                            <b:ChangePropertyAction TargetName="CharacterListBox" PropertyName="SelectedIndex" Value="-1" />
                        </b:DataTrigger>
                    </b:Interaction.Triggers>

                    <Grid.RowDefinitions>
                        <RowDefinition Height="Auto"/>
                        <RowDefinition Height="Auto"/>
                    </Grid.RowDefinitions>

                    <Image Grid.Row="1" Source="{StaticResource PanelTopImage}" Stretch="None" Margin="0 0 0 500"/>
                    <Grid Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,20,0,40" Panel.ZIndex="0">
                        <Grid.Background>
                            <ImageBrush ImageSource="{StaticResource PanelBg}"/>
                        </Grid.Background>
                    </Grid>
                    <Grid Grid.Row="1" HorizontalAlignment="Center" Height="1084" Width="1800" Panel.ZIndex="1" Name="InventoryPanel" >
                        <Grid Panel.ZIndex="1" Background="Transparent" Margin="0,28,0,0">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <Grid Grid.ColumnSpan="2" Grid.Column="0" Grid.Row="0" HorizontalAlignment="Center"  >
                                <Grid.Resources>
                                    <Style x:Key="InvObjName" TargetType="TextBlock">
                                        <Setter Property="HorizontalAlignment" Value="Center" />
                                        <Setter Property="Foreground" Value="{StaticResource LS_PrimaryColor}" />
                                        <Setter Property="FontSize" Value="{StaticResource TitleFontSize}" />
                                    </Style>
                                    <Style x:Key="InvSelectionName" TargetType="TextBlock">
                                        <Setter Property="HorizontalAlignment" Value="Center" />
                                        <Setter Property="Foreground" Value="{StaticResource LS_ActivePanelFontColor}" />
                                        <Setter Property="FontSize" Value="{StaticResource LargeFontSize}" />
                                        <Setter Property="Margin" Value="0,6,0,18" />
                                        <Setter Property="TextWrapping" Value="Wrap" />
                                        <Setter Property="MaxWidth" Value="810" />
                                    </Style>
                                </Grid.Resources>
                                <StackPanel x:Name="ListHolder" Orientation="Horizontal" Tag="ContainerFocussed" Margin="-64,0,0,0">
                                    <StackPanel.Resources>
                                        <Style TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
                                            <Setter Property="ItemTemplate" Value="{StaticResource Template.ContainerCell}"/>
                                            <Setter Property="Width" Value="806"/>
                                            <Setter Property="Height" Value="608"/>
                                            <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
                                            <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel"/>
                                            <Setter Property="ls:MultiSelect.IsEnabled" Value="False"/>
                                            <Setter Property="SelectionMode" Value="Multiple"/>
                                            <Setter Property="VerticalAlignment" Value="Top"/>
                                            <Setter Property="HorizontalAlignment" Value="Center"/>
                                            <Setter Property="ItemsPanel">
                                                <Setter.Value>
                                                    <ItemsPanelTemplate>
                                                        <ls:LSGrid x:Name="ContainerGrid" Columns="6" Rows="5"  ContainerData="{Binding CurrentPlayer.UIData.CurrentContainer.LootInventory}"
                                                                       noesis:Element.PPAAMode="Disabled" SnapsToDevicePixels="True"  CellWidth="{DynamicResource ScaledNewSlotSize}"
                                                                       CellHeight="{DynamicResource ScaledNewSlotSize}" Background="{StaticResource ContInventoryCell2x2Brush}"
                                                                       VerticalSpacing="{DynamicResource ContInvSpacing}" DisableScrolling="False"  HorizontalSpacing="{DynamicResource ContInvSpacing}"
                                                                       WidgetChainedNavigation="True" UseWidgetNavigation="True" ls:MoveFocus.InternalFocusable="True">
                                                        </ls:LSGrid>
                                                    </ItemsPanelTemplate>
                                                </Setter.Value>
                                            </Setter>
                                        </Style>
                                    </StackPanel.Resources>
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="250" />
                                            <RowDefinition Height="Auto"/>
                                        </Grid.RowDefinitions>
                                        <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center" Grid.Row="0" Margin="0,0,0,100">
                                            <TextBlock x:Name="containerName" Text="{Binding Container.Name}" Style="{StaticResource InvObjName}"/>
                                            <TextBlock x:Name="containerSelectionName" Text="{Binding Path=FocusedElement.DataContext.Object.Name, ElementName=Pickpocket_c}" Style="{StaticResource InvSelectionName}" TextAlignment="Center" TextTrimming="CharacterEllipsis" MaxHeight="100"/>
                                        </StackPanel>

                                        <ListBox x:Name="ContainerListBox" Grid.Row="1" DataContext="{Binding Container.Inventory}" ItemsSource="{Binding Path=(b:Interaction.Behaviors)[0].FilteredItems, ElementName=Inventory}"
                                                 VerticalAlignment="Top" HorizontalAlignment="Left" Background="Transparent" BorderThickness="0" ScrollViewer.VerticalScrollBarVisibility="Visible"
                                                 ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                                            <ListBox.Resources>
                                                <Style TargetType="ScrollBar" BasedOn="{StaticResource DecorativeScrollBar}"/>
                                            </ListBox.Resources>
                                            <ListBox.ItemTemplate>
                                                <DataTemplate>
                                                    <Grid x:Name="SlotRoot" Focusable="True" ls:MoveFocus.Focusable="True" ToolTipService.Placement="Right" ToolTipService.HorizontalOffset="20" ToolTipService.VerticalOffset="130">
                                                        <Grid.ToolTip>
                                                            <ls:LSTooltip Content="{Binding DataContext.Object, ElementName=SlotRoot}"/>
                                                        </Grid.ToolTip>
                                                        <ls:LSEntityObject EntityRef="{Binding Object.EntityHandle}"
                                                                       Context="{Binding DataContext.ContainerContext,RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                                                       Background="Transparent">
                                                            <ContentPresenter Content="{Binding Object}" ContentTemplate="{StaticResource Template.GameObject}" />
                                                        </ls:LSEntityObject>
                                                        <ContentPresenter ContentTemplate="{StaticResource EquippedTorchIcon}" Content="{Binding .}" VerticalAlignment="Top" HorizontalAlignment="Right" Margin="0,10,10,0"/>
                                                    </Grid>
                                                </DataTemplate>
                                            </ListBox.ItemTemplate>
                                            <ListBox.Template>
                                                <ControlTemplate TargetType="ListBox">
                                                    <ScrollViewer VerticalScrollBarVisibility="Auto" Padding="14,0,0,0" HorizontalAlignment="Left" Template="{StaticResource FlippedScrollViewerTemplate}" HorizontalScrollBarVisibility="Disabled" CanContentScroll="True">
                                                        <ScrollViewer.Resources>
                                                            <Style TargetType="ScrollBar" BasedOn="{StaticResource GoldScrollBar}"/>
                                                        </ScrollViewer.Resources>
                                                        <ItemsPresenter  />
                                                    </ScrollViewer>
                                                </ControlTemplate>
                                            </ListBox.Template>
                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="FocusChanged">
                                                    <b:InvokeCommandAction Command="{Binding DataContext.SelectItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                                                                       CommandParameter="{Binding FocusedElement.DataContext, ElementName=Pickpocket_c}"/>
                                                    <b:ControlStoryboardAction Storyboard="{StaticResource AnimatePie}" />
                                                    <b:InvokeCommandAction Command="{Binding DataContext.ShowTooltipOnUIElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                                                                       CommandParameter="{Binding FocusedElement, ElementName=Pickpocket_c}"/>
                                                </b:EventTrigger>
                                                <b:EventTrigger EventName="Loaded">
                                                    <ls:SetMoveFocusAction TargetName="Pickpocket_c"/>
                                                </b:EventTrigger>
                                                <b:PropertyChangedTrigger Binding="{Binding ElementName=PlayerInvToggle,Path=IsChecked}">
                                                    <ls:SetMoveFocusAction TargetName="Pickpocket_c"/>
                                                </b:PropertyChangedTrigger>
                                            </b:Interaction.Triggers>
                                        </ListBox>
                                    </Grid>

                                    <StackPanel Orientation="Horizontal" x:Name="PlayerInv" Visibility="{Binding ElementName=PlayerInvToggle , Path=IsChecked, Converter={StaticResource BoolToVisibleConverter}}">
                                        <ls:LSNineSliceImage Margin="0,160,0,-40" ImageSource="{StaticResource ContainerDivider}" Slices="0 120 0 120" Width="52" HorizontalAlignment="Stretch" />
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="250" />
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <StackPanel VerticalAlignment="Center" Margin="0,0,0,100">
                                                <TextBlock x:Name="looterName" Text="{Binding CurrentPlayer.SelectedCharacter.Name}" Style="{StaticResource InvObjName}"/>
                                                <TextBlock x:Name="looterSelectionName" Text="{Binding Path=FocusedElement.DataContext.Name, ElementName=Pickpocket_c}" Style="{StaticResource InvSelectionName}" TextAlignment="Center" TextTrimming="CharacterEllipsis" MaxHeight="100"/>
                                            </StackPanel>
                                            <StackPanel Grid.Row="1">
                                                <ListBox x:Name="CharacterListBox" ItemsSource="{Binding CurrentPlayer.SelectedCharacter.Inventory.Slots}"
                                                         Visibility="{Binding ElementName=PlayerInvToggle, Path=IsChecked, Converter={StaticResource BoolToVisibleConverter}}" >
                                                    <ListBox.ItemContainerStyle>
                                                        <Style TargetType="ListBoxItem" BasedOn="{StaticResource BaseInvContainerItemStyle}">
                                                            <Setter Property="ls:ContextMenuService.Context" Value="Inventory"/>
                                                            <Setter Property="Template" Value="{StaticResource Template.InventoryContainer}"/>
                                                        </Style>
                                                    </ListBox.ItemContainerStyle>
                                                    <ListBox.Template>
                                                        <ControlTemplate>
                                                            <ScrollViewer VerticalScrollBarVisibility="Auto" Padding="36,0,0,0" HorizontalAlignment="Left" Template="{StaticResource ScrollViewerTemplate}" HorizontalScrollBarVisibility="Disabled" CanContentScroll="True">
                                                                <ScrollViewer.Resources>
                                                                    <Style TargetType="ScrollBar" BasedOn="{StaticResource GoldScrollBar}"/>
                                                                </ScrollViewer.Resources>
                                                                <ItemsPresenter  />
                                                            </ScrollViewer>
                                                        </ControlTemplate>
                                                    </ListBox.Template>
                                                    <b:Interaction.Triggers>
                                                        <b:EventTrigger EventName="FocusChanged">
                                                            <b:InvokeCommandAction Command="{Binding DataContext.ShowTooltipOnUIElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                                                                                   CommandParameter="{Binding FocusedElement, ElementName=Pickpocket_c}"/>
                                                        </b:EventTrigger>
                                                    </b:Interaction.Triggers>
                                                </ListBox>
                                                <StackPanel x:Name="weightTextHolder" Orientation="Horizontal" Margin="0,18,0,-120" HorizontalAlignment="Left" VerticalAlignment="Center">
                                                    <StackPanel.Resources>
                                                        <Style TargetType="TextBlock" >
                                                            <Setter Property="FontWeight" Value="Bold" />
                                                            <Setter Property="VerticalAlignment" Value="Top" />
                                                            <Setter Property="Foreground" Value="{StaticResource LS_ActivePanelFontColor}" />
                                                            <Setter Property="FontSize" Value="{DynamicResource MediumFontSize}" />
                                                        </Style>
                                                    </StackPanel.Resources>
                                                    <Image VerticalAlignment="Center" Source="{StaticResource WeightIconImage}" Stretch="None" Margin="0,0,8,8"/>
                                                    <TextBlock Text="{Binding CurrentPlayer.SelectedCharacter.Inventory.Weight, Converter={StaticResource UnitConverter}, ConverterParameter='Weight'}" FontSize="{DynamicResource DefaultFontSize}"  Foreground="{StaticResource LS_PrimaryColor}"/>
                                                    <TextBlock Text="/" Margin="2,0,2,0"/>
                                                    <TextBlock Text="{Binding CurrentPlayer.SelectedCharacter.EncumbranceStats.WeightMaximum, Converter={StaticResource UnitConverter}, ConverterParameter='Weight'}" Margin="0,2,0,0"/>
                                                </StackPanel>
                                            </StackPanel>
                                        </Grid>
                                    </StackPanel>

                                    <b:Interaction.Triggers>
                                        <b:EventTrigger EventName="Loaded">
                                            <ls:SetMoveFocusAction TargetName="Pickpocket_c" FocusElement="{Binding ElementName=ContainerListBox}"/>
                                            <b:InvokeCommandAction Command="{Binding EnableTooltipOnUIElement}"/>
                                        </b:EventTrigger>
                                        <!--using weightTextHolder cause it gets it's IsEnabled set after the lists so we can be sure the lsgrids are focussable-->
                                        <b:DataTrigger Binding="{Binding ElementName=weightTextHolder, Path=IsEnabled}" Value="True">
                                            <b:Interaction.Behaviors>
                                                <b:ConditionBehavior>
                                                    <b:ConditionalExpression>
                                                        <b:ComparisonCondition LeftOperand="{Binding ElementName=ListHolder, Path=Tag}" Operator="Equal" RightOperand="ContainerFocussed" />
                                                    </b:ConditionalExpression>
                                                </b:ConditionBehavior>
                                            </b:Interaction.Behaviors>
                                            <ls:SetMoveFocusAction TargetName="Pickpocket_c" FocusElement="{Binding ElementName=ContainerListBox}" />
                                        </b:DataTrigger>
                                        <b:DataTrigger Binding="{Binding ElementName=weightTextHolder, Path=IsEnabled}" Value="True">
                                            <b:Interaction.Behaviors>
                                                <b:ConditionBehavior>
                                                    <b:ConditionalExpression>
                                                        <b:ComparisonCondition LeftOperand="{Binding ElementName=ListHolder, Path=Tag}" Operator="Equal" RightOperand="PlayerFocussed" />
                                                    </b:ConditionalExpression>
                                                </b:ConditionBehavior>
                                            </b:Interaction.Behaviors>
                                            <ls:SetMoveFocusAction TargetName="Pickpocket_c" FocusElement="{Binding ElementName=CharacterListBox}" />
                                        </b:DataTrigger>
                                        <b:DataTrigger Binding="{Binding ElementName=ContainerListBox,Path=(ls:MoveFocus.IsKeyboardFocusWithin)}" Value="True">
                                            <b:ChangePropertyAction TargetName="ListHolder" PropertyName="Tag" Value="ContainerFocussed" />
                                        </b:DataTrigger>
                                        <b:DataTrigger Binding="{Binding ElementName=CharacterListBox,Path=(ls:MoveFocus.IsKeyboardFocusWithin)}" Value="True">
                                            <b:ChangePropertyAction TargetName="ListHolder" PropertyName="Tag" Value="PlayerFocussed" />
                                        </b:DataTrigger>
                                    </b:Interaction.Triggers>
                                </StackPanel>
                            </Grid>

                            <ls:LSToggleButton Grid.Column="1" Grid.Row="1" Margin="550,0,0,74" ClipToBounds="False" VerticalAlignment="Bottom" HorizontalAlignment="Left"
                                               x:Name="PlayerInvToggle" SoundID="UI_HUD_Extract" IsChecked="{Binding CurrentPlayer.UIData.OpenExtractedInventoryOnContainer}" BoundEvent="UITabNext"
                                               Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UITabNext'}">
                                <ls:LSToggleButton.Template>
                                    <ControlTemplate TargetType="ls:LSToggleButton">
                                        <Grid HorizontalAlignment="Left">
                                            <Image x:Name="bg" Source="{StaticResource ToggleBgImage}" Stretch="None" HorizontalAlignment="Left" Margin="46,10,0,0"/>
                                            <Image x:Name="chest" Source="{StaticResource InventoryIconImage}" Stretch="None" Opacity="{StaticResource DisabledOpacity}" Margin="152,6,0,0"/>
                                            <ContentPresenter x:Name="btn" Content="{TemplateBinding Content}" ContentTemplate="{StaticResource ControllerButtonHint}" Tag=" " HorizontalAlignment="Left" Margin="12,0,0,0" />
                                        </Grid>
                                        <ControlTemplate.Triggers>
                                            <Trigger Property="IsChecked" Value="True">
                                                <Trigger.Setters>
                                                    <Setter Property="Opacity" Value="1.0" TargetName="chest"/>
                                                </Trigger.Setters>
                                                <Trigger.EnterActions>
                                                    <BeginStoryboard x:Name="ButtonEnterIsCheckedState">
                                                        <Storyboard>
                                                            <ThicknessAnimation Duration="0:0:0.1" Storyboard.TargetName="btn" Storyboard.TargetProperty="Margin" To="60,0,0,0"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.EnterActions>
                                                <Trigger.ExitActions>
                                                    <BeginStoryboard x:Name="ButtonExitIsCheckedState">
                                                        <Storyboard>
                                                            <ThicknessAnimation Duration="0:0:0.1" Storyboard.TargetName="btn" Storyboard.TargetProperty="Margin" To="12,0,0,0"/>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </Trigger.ExitActions>
                                            </Trigger>
                                        </ControlTemplate.Triggers>
                                    </ControlTemplate>
                                </ls:LSToggleButton.Template>
                            </ls:LSToggleButton>
                        </Grid>
                    </Grid>
                </Grid>

                <Grid x:Name="topBar" DataContext="{Binding Roll}" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,0,380">
                    <Grid.Resources>
                        <Style TargetType="TextBlock">
                            <Setter Property="Foreground" Value="{DynamicResource LS_PrimaryColor}" />
                        </Style>
                        <KeyTime x:Key="AnimStealTime">0:0:0.5</KeyTime>
                    </Grid.Resources>

                    <Image Source="{StaticResource PanelFooter}" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Bottom"/>

                    <Grid VerticalAlignment="Center">

                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <StackPanel Grid.Column="0" HorizontalAlignment="Right" Orientation="Horizontal">
                            <TextBlock Text="{Binding Source='hea70fbd3g7598g424egb3bfg7cbe03bbdc09', Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Center" HorizontalAlignment="Center" FontSize="{DynamicResource ScaledMediumFontSize}"/>
                            <Grid>
                                <Image Source="{StaticResource TargetRing}" Stretch="None"/>
                                <TextBlock Text="{Binding DifficultyCheck}" VerticalAlignment="Center" HorizontalAlignment="Center"/>
                            </Grid>
                        </StackPanel>

                        <Grid HorizontalAlignment="Center" Grid.Column="1" >
                            <Image Source="{StaticResource ResultRing}" Stretch="None"/>
                            <Image x:Name="d20Img" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Pickpocket/ico_pickpocket_d20.png" Stretch="None">
                                <Image.Style>
                                    <Style TargetType="Image">
                                        <Setter Property="Opacity" Value="1.0" />
                                        <Setter Property="RenderTransform">
                                            <Setter.Value>
                                                <TransformGroup>
                                                    <ScaleTransform/>
                                                    <SkewTransform/>
                                                    <RotateTransform CenterX="30" CenterY="30"/>
                                                    <TranslateTransform/>
                                                </TransformGroup>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Finished}" Value="True">
                                                <DataTrigger.EnterActions>
                                                    <BeginStoryboard x:Name="PickpocketFinishedAnimation">
                                                        <Storyboard >
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0"/>
                                                                <EasingDoubleKeyFrame KeyTime="{StaticResource AnimStealTime}" Value="0.3">
                                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                                        <CubicEase EasingMode="EaseOut"/>
                                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                                </EasingDoubleKeyFrame>
                                                                <EasingDoubleKeyFrame KeyTime="{StaticResource AnimStealTime}" Value="0.0"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0"/>
                                                                <EasingDoubleKeyFrame KeyTime="{StaticResource AnimStealTime}" Value="0.2">
                                                                </EasingDoubleKeyFrame>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0"/>
                                                                <EasingDoubleKeyFrame KeyTime="{StaticResource AnimStealTime}" Value="0.2">
                                                                </EasingDoubleKeyFrame>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                                                                <EasingDoubleKeyFrame KeyTime="{StaticResource AnimStealTime}" Value="-180">
                                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                                        <CubicEase EasingMode="EaseOut"/>
                                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                                </EasingDoubleKeyFrame>
                                                            </DoubleAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding Finished}" Value="False">
                                                <DataTrigger.EnterActions>
                                                    <!--Reset-->
                                                    <BeginStoryboard x:Name="PickpocketResetAnimation">
                                                        <Storyboard >
                                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="1.0" Duration="0:0:0.0" >
                                                            </DoubleAnimation>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[2].(RotateTransform.Angle)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleX)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(ScaleTransform.ScaleY)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="1.0"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock x:Name="resultTxt" Text="{Binding RolledNumber}" VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{DynamicResource LS_PrimaryColor}">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Visible" />
                                        <Setter Property="RenderTransform">
                                            <Setter.Value>
                                                <TransformGroup>
                                                    <ScaleTransform/>
                                                    <SkewTransform/>
                                                    <RotateTransform/>
                                                    <TranslateTransform/>
                                                </TransformGroup>
                                            </Setter.Value>
                                        </Setter>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding RolledNumber}" Value="0">
                                                <Setter Property="Visibility" Value="Hidden" />
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Finished}" Value="True">
                                                <DataTrigger.EnterActions>
                                                    <!--Steal-->
                                                    <BeginStoryboard x:Name="ResultTextFinishedAnimation">
                                                        <Storyboard >
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0.3"/>
                                                                <EasingDoubleKeyFrame KeyTime="{StaticResource AnimStealTime}" Value="1.0">
                                                                    <EasingDoubleKeyFrame.EasingFunction>
                                                                        <CubicEase EasingMode="EaseOut"/>
                                                                    </EasingDoubleKeyFrame.EasingFunction>
                                                                </EasingDoubleKeyFrame>
                                                            </DoubleAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>
                                            </DataTrigger>

                                            <DataTrigger Binding="{Binding Finished}" Value="False">
                                                <DataTrigger.EnterActions>
                                                    <!--Reset-->
                                                    <BeginStoryboard x:Name="ResultTextResetAnimation">
                                                        <Storyboard >
                                                            <DoubleAnimation Storyboard.TargetProperty="Opacity" To="0.0" Duration="0:0:0.0" >
                                                            </DoubleAnimation>
                                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[3].(TranslateTransform.X)">
                                                                <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                                                            </DoubleAnimationUsingKeyFrames>
                                                        </Storyboard>
                                                    </BeginStoryboard>
                                                </DataTrigger.EnterActions>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                            <ls:LSPie x:Name="chancePie" Value="{Binding Chance}" SweepDirection="Counterclockwise" Width="120" Height="120" VerticalAlignment="Center" HorizontalAlignment="Center">
                                <ls:LSPie.Style>
                                    <Style TargetType="ls:LSPie">
                                        <Setter Property="Visibility" Value="Visible"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Chance}" Value="-1">
                                                <Setter Property="Visibility" Value="Hidden"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </ls:LSPie.Style>
                                <Ellipse Width="92" Height="92" StrokeThickness="4" Fill="Transparent">
                                    <Ellipse.Style>
                                        <Style TargetType="Ellipse">
                                            <Setter Property="Stroke" Value="White"/>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding Chance, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0.7}" Value="True">
                                                    <Setter Property="Stroke" Value="{DynamicResource LS_bonusTxtColor}"/>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding Chance, Converter={StaticResource LessThanConverter}, ConverterParameter=0.3}" Value="True">
                                                    <Setter Property="Stroke" Value="{DynamicResource LS_alertTxtColor}"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Ellipse.Style>
                                </Ellipse>

                            </ls:LSPie>
                        </Grid>
                        <StackPanel Orientation="Horizontal" Grid.Column="2">
                            <Image Margin="0,0,0,8" Stretch="None">
                                <Image.Style>
                                    <Style TargetType="Image">
                                        <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Pickpocket/c_assets/c_ico_pickpocket_success.png"/>
                                        <Setter Property="Visibility" Value="Collapsed"/>
                                        <Style.Triggers>
                                            <DataTrigger Binding="{Binding Success}" Value="False">
                                                <Setter Property="Source" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/removeFromSlot_overlay.png"/>
                                            </DataTrigger>
                                            <DataTrigger Binding="{Binding Finished}" Value="True">
                                                <Setter Property="Visibility" Value="Visible"/>
                                            </DataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </Image.Style>
                            </Image>
                            <TextBlock  VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="{StaticResource LS_SecondaryColor}">
                                <TextBlock.Style>
                                    <Style TargetType="TextBlock">
                                        <Setter Property="Visibility" Value="Visible" />
                                        <Setter Property="Text" Value="{Binding Source='h6c38d243gd613g45e7g899fgb3943d3212b3', Converter={StaticResource TranslatedStringConverter}}" />
                                        <Style.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Finished}" Value="True" />
                                                    <Condition Binding="{Binding Success}" Value="False" />
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Text" Value="{Binding Source='h2b186f92gd814g4802g8ef1g906b47bfc6bb', Converter={StaticResource TranslatedStringConverter}}" />
                                                <Setter Property="Foreground" Value="{DynamicResource LS_alertTxtColor}" />
                                            </MultiDataTrigger>

                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Finished}" Value="True" />
                                                    <Condition Binding="{Binding Success}" Value="True" />
                                                </MultiDataTrigger.Conditions>
                                                <Setter Property="Text" Value="{Binding Source='hd736d0ccgf370g4232gba8bg2caa09a18a1f', Converter={StaticResource TranslatedStringConverter}}" />
                                                <Setter Property="Foreground" Value="{DynamicResource LS_bonusTxtColor}" />
                                            </MultiDataTrigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Style>
                            </TextBlock>
                        </StackPanel>
                    </Grid>
                </Grid>

                <ls:LSButton x:Name="StealButton"
                             Template="{StaticResource PrimaryButtonTemplate}"
                             ContentTemplate="{StaticResource ControllerButtonHint}" 
                             Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UITakeAll'}" 
                             Tag="{Binding Source='h921e0841g7727g48b4g980eg3d45267ee8e0', Converter={StaticResource TranslatedStringConverter}}" 
                             Command="{Binding DataContext.TakeItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             CommandParameter="{Binding FocusedElement.DataContext, ElementName=Pickpocket_c}"
                             BoundEvent="UITakeAll"
                             IsEnabled="{Binding FocusedElement.DataContext.CanSteal, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,252" />

                <Image Source="{StaticResource CallToActionImage}" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,-46" >
                    <Image.RenderTransform>
                        <ScaleTransform ScaleY="-1" />
                    </Image.RenderTransform>
                </Image>

                <Control x:Name="rolltargetTooltip" Template="{StaticResource RollTooltipTemplate}"
                         DataContext="{Binding Roll}" 
                         HorizontalAlignment="Left" VerticalAlignment="Bottom" Margin="110,200,0,-60"
                    Visibility="Collapsed">
                    <Control.RenderTransform>
                        <ScaleTransform ScaleX="0.75" ScaleY="0.75" />
                    </Control.RenderTransform>
                </Control>

                <!--Button prompts-->
                <StackPanel x:Name="ButtonHolder" IsEnabled="True" Style="{StaticResource ButtonHint.Container.Center}">

                    <StackPanel.Resources>
                        <Style TargetType="ls:LSButton" BasedOn="{StaticResource {x:Type ls:LSButton}}">
                            <Setter Property="ContentTemplate" Value="{StaticResource  ControllerButtonHint}"/>
                        </Style>
                    </StackPanel.Resources>

                    <ls:LSToggleButton x:Name="TargetTooltip" 
                                           IsChecked="False" 
                                           BoundEvent="UITabPrev"
                                           Tag="{Binding Source='had15512ag9f6bg4c2dg8a8fg88705bce116b', Converter={StaticResource TranslatedStringConverter}}"
                                           ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UITabPrev, Converter={StaticResource FindInputEventConverter}}"
                                           IsEnabled="{Binding DataContext.CanSteal, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                    </ls:LSToggleButton>

                    <ls:LSButton  x:Name="ContextMenuButton" 
                                     Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='ContextMenu'}"
                                     Tag="{Binding Source='heb4b592bgc665g4e17ga685g07e2eb5e25db', Converter={StaticResource TranslatedStringConverter}}"
                                     Command="{Binding DataContext.ShowContextMenu, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"                                     
                                     CommandParameter="{Binding FocusedElement, ElementName=Pickpocket_c}"
                                     BoundEvent="ContextMenu"
                                     IsEnabled="{Binding FocusedElement.DataContext.CanSteal, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>

                    <ls:LSButton Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIShowInfo'}"
                                     Tag="{Binding Source='h07aaca85g63dbg4e60g88a2g0590077ea7e2',Converter={StaticResource TranslatedStringConverter}}" 
                                     Command="{Binding ToggleTooltipOnUIElement}" 
                                     BoundEvent="UIShowInfo"
                                     CommandParameter="{Binding Path=FocusedElement, ElementName=Pickpocket_c}"
                                     IsEnabled="{Binding  FocusedElement.DataContext, ElementName=Pickpocket_c, Converter={StaticResource NullToBoolFalseConverter}}"/>

                    <ls:LSButton x:Name="CloseWidgetButton" 
                                     BoundEvent="UICancel"
                                     ContentTemplate="{StaticResource ControllerButtonHint}"
                                     Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UICancel, Converter={StaticResource FindInputEventConverter}}"
                                     Tag="{Binding Source='hff1685e4g3845g4846g99bfg219ae73ce55d', Converter={StaticResource TranslatedStringConverter}}" 
                                     Command="{Binding DataContext.CloseWidgetCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"                                     
                                     SoundID="UI_Shared_Cancel" />

                    <ls:LSInputBinding x:Name="PinTooltipBinding" Style="{StaticResource PinTooltipBindingStyle}"/>
                </StackPanel>
            </Grid>

            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding ElementName=PlayerInvToggle, Path=IsChecked}" Value="True">
                    <Setter TargetName="ListHolder" Property="Margin" Value="0,0,0,0"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding Layout}" Value="Common">
                    <Setter TargetName="rolltargetTooltip" Property="Margin" Value="1060,200,0,-60"/>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=IsChecked, ElementName=TargetTooltip}" Value="True"/>
                        <Condition Binding="{Binding CanSteal}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="rolltargetTooltip" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <Trigger Property="ls:MoveFocus.IsKeyboardFocusWithin" Value="True" SourceName="ContainerListBox">
                    <Setter TargetName="looterSelectionName" Property="Text" Value="" />
                </Trigger>
                <Trigger Property="ls:MoveFocus.IsKeyboardFocusWithin" Value="True" SourceName="CharacterListBox">
                    <Setter TargetName="containerSelectionName" Property="Text" Value=""/>
                    <Setter TargetName="StealButton" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="rolltargetTooltip" Property="Visibility" Value="Collapsed"/>
                </Trigger>

                <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                    <StopStoryboard BeginStoryboardName="ButtonEnterIsCheckedState"/>
                    <StopStoryboard BeginStoryboardName="ButtonExitIsCheckedState"/>
                    <StopStoryboard BeginStoryboardName="PickpocketFinishedAnimation"/>
                    <StopStoryboard BeginStoryboardName="PickpocketResetAnimation"/>
                    <StopStoryboard BeginStoryboardName="ResultTextFinishedAnimation"/>
                    <StopStoryboard BeginStoryboardName="ResultTextResetAnimation"/>
                </EventTrigger>
            </ControlTemplate.Triggers>

        </ControlTemplate>
    </ls:UIWidget.Template>

    <b:Interaction.Triggers>
        <b:EventTrigger EventName="Loaded">
            <ls:LSPlaySound Sound="UI_HUD_Pickpocket_Open"/>
        </b:EventTrigger>
        <b:EventTrigger EventName="Unloaded">
            <ls:LSPlaySound Sound="UI_HUD_Pickpocket_Close"/>
        </b:EventTrigger>
    </b:Interaction.Triggers>

</ls:UIWidget>