<ls:UIWidget x:Name="JournalMap_c"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             mc:Ignorable="d" IsHitTestVisible="True"
             ls:UIWidget.ContextName="JournalMap" d:DataContext="{d:DesignInstance {x:Type ls:JournalMap}, IsDesignTimeCreatable=True}"
             FocusDown="UIDown" FocusLeft="UILeft" FocusRight="UIRight" FocusUp="UIUp"
             d:DesignHeight="2160" d:DesignWidth="3840"
             ls:TooltipExtender.Owner="{Binding CurrentPlayer.SelectedCharacter}">

    <ls:UIWidget.Template>
        <ControlTemplate>
            <ControlTemplate.Resources>
                <ResourceDictionary>
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="../Library/JournalTemplates_c.xaml"/>
                    </ResourceDictionary.MergedDictionaries>

                    <Style x:Key="BaseTextStyle" TargetType="TextBlock">
                        <Setter Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                        <Setter Property="FontSize" Value="{StaticResource ScaledMediumFontSize}"/>
                    </Style>

                    <ls:LSMessageBoxData x:Key="MessageBoxAddCustomMarker"
                             Text=""
                             Title="{Binding Source='h8ac040dbgc149g4ceagae80g797adccd1f71', Converter ={StaticResource TranslatedStringConverter}}"
                             UUID="AddCustomMarkerMsgBox"
                             InputBox="True"
                             DefaultInputText="{Binding Source='haa251798gb2a5g4818gb15dgfaf7aa1c79ed', Converter ={StaticResource TranslatedStringConverter}}">
                        <ls:LSMessageBoxData.Actions>
                            <ls:LSGameCommandData ActionName="{Binding Source='h22f5ce71g26aeg4bc8g9a65g99585fc7eb6b', Converter={StaticResource TranslatedStringConverter}}"
                                                    Command="{Binding DataContext.AddCustomMarker, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" 
                                                    BoundInput="{Binding DataContext.CurrentPlayer.UIData.InputEvents, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIMessageBoxA'}"/>
                            <ls:LSGameCommandData ActionName="{Binding Source='he9fced45gde55g4de9g910cg0fe252620556', Converter={StaticResource TranslatedStringConverter}}"
                                                    Command="{Binding DataContext.CustomEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                                    CommandParameter="CloseMessageBox"
                                                    BoundInput="{Binding DataContext.CurrentPlayer.UIData.InputEvents, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIMessageBoxB'}"/>
                        </ls:LSMessageBoxData.Actions>
                    </ls:LSMessageBoxData>


                    <ls:LSMessageBoxData x:Key="MessageBoxRemoveCustomMarker"
                             Text="{Binding Source='he52a7dfcgfd23g4f6dgb048g083f184f5122', Converter ={StaticResource TranslatedStringConverter}}"
                             Title="{Binding Source='hc7f32431g54c1g4816g9fbeg279c92e3136b', Converter ={StaticResource TranslatedStringConverter}}"
                             UUID="RemoveCustomMarkerMsgBox">
                        <ls:LSMessageBoxData.Actions>
                            <ls:LSGameCommandData  ActionName="{Binding Source='h02b7988ege04cg4fffgb3bcgfe57b07dac80', Converter={StaticResource TranslatedStringConverter}}"
                                                    Command="{Binding DataContext.RemoveCustomMarker, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding DataContext.CurrentPlayer.SelectedMapMarker, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                                    BoundInput="{Binding DataContext.CurrentPlayer.UIData.InputEvents, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIMessageBoxA'}"/>
                            <ls:LSGameCommandData ActionName="{Binding Source='he9fced45gde55g4de9g910cg0fe252620556', Converter={StaticResource TranslatedStringConverter}}"
                                                    Command="{Binding DataContext.CustomEvent, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                                    CommandParameter="CloseMessageBox"
                                                    BoundInput="{Binding DataContext.CurrentPlayer.UIData.InputEvents, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIMessageBoxB'}"/>
                        </ls:LSMessageBoxData.Actions>
                    </ls:LSMessageBoxData>
                </ResourceDictionary>
            </ControlTemplate.Resources>
            
            <Grid>
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Loaded">
                        <ls:LSPlaySound Sound="UI_HUD_Map_Open"/>
                        <b:InvokeCommandAction  Command="{Binding DataContext.CurrentPlayer.QuestJournalLoaded.ActionCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        <!-- Tutorial UI Event - World Map-->
                        <b:InvokeCommandAction Command="{Binding TutorialEvent}" CommandParameter="d98a41b1-baa3-4fa8-a17a-6d286a80c700"/>
                    </b:EventTrigger>
                    <b:EventTrigger EventName="Unloaded">
                        <ls:LSPlaySound Sound="UI_HUD_Map_Close"/>
                        <b:InvokeCommandAction  Command="{Binding CurrentPlayer.QuestJournalUnloaded.ActionCommand}"/>
                    </b:EventTrigger>
                    <b:PropertyChangedTrigger Binding="{Binding FocusedElement, ElementName=JournalMap_c}">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding (ls:MoveFocus.IsKeyboardFocusWithin), ElementName=Waypoints}" Operator="Equal" RightOperand="True"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:ChangePropertyAction TargetName="WorldMap" PropertyName="WaypointFocus" Value="{Binding FocusedElement.DataContext, ElementName=JournalMap_c}"/>
                    </b:PropertyChangedTrigger>

                    <b:PropertyChangedTrigger Binding="{Binding TopFocusedElement.DataContext, ElementName=Cursor}">
                        <b:InvokeCommandAction Command="{Binding DataContext.SelectMapMarker, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding TopFocusedElement.DataContext, ElementName=Cursor}"/>
                    </b:PropertyChangedTrigger>
                </b:Interaction.Triggers>

                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto"/>
                    <RowDefinition Height="*"/>
                </Grid.RowDefinitions>

                <Grid x:Name="Content" Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                    <ls:LSWorldMap x:Name="WorldMap"
                        HorizontalAlignment="Stretch"
                        VerticalAlignment="Stretch"
                        Scale="8.0" MinScale="4.0" MaxScale="40.0" ScaleSteps="4.0"
                        WorldMapData="{Binding CurrentPlayer.WorldMap}"                        
                        MarkerTrajectory ="Rectangle"
                        MarkerViewportMargin="150,20,150,170"
                        MarkerScale="1.2"
                        FollowCameraRotation="False"
                        ZoomRate="1000" PanRate="0.1"
                        PanLeft="UIMapLeft"
                        PanRight="UIMapRight"
                        PanUp="UIMapUp"
                        PanDown="UIMapDown"
                        ZoomIn="UIMapZoomIn"
                        ZoomOut="UIMapZoomOut">
                        <ls:LSWorldMap.TweenStoryboard>
                            <Storyboard>
                                <!-- Use used  -->
                                <PointAnimation Duration="0:0:0.5">
                                    <PointAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseOut"/>
                                    </PointAnimation.EasingFunction>
                                </PointAnimation>
                            </Storyboard>
                        </ls:LSWorldMap.TweenStoryboard>
                    </ls:LSWorldMap>

                    <ls:SoftwareCursor x:Name="Cursor" Template="{StaticResource ControllerSoftwareCursorTemplate}" HorizontalAlignment="Center" VerticalAlignment="Center" TargetTooltipEnabled="{Binding IsChecked, ElementName=WaypointBtn, Converter={StaticResource InvertBoolConverter}}"/>

                    <StackPanel x:Name="LocationContainer" HorizontalAlignment="Left" VerticalAlignment="Top" Orientation="Horizontal" Margin="96,86,0,0" Visibility="{Binding CurrentPlayer.SelectedCharacter.CurrentSubregionName, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}">
                        <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Map_c/icon_mapHeader.png" Stretch="None" />
                        <TextBlock x:Name="SubRegionName" Text="{Binding CurrentPlayer.SelectedCharacter.CurrentSubregionName}" VerticalAlignment="Center"/>
                    </StackPanel>

                    <Grid x:Name="Legend" Margin="0,0,0,210" VerticalAlignment="Bottom" HorizontalAlignment="Left" Visibility="{Binding IsChecked, ElementName=LegendBtn, Converter={StaticResource BoolToVisibleConverter}}">

                        <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Map_c/pane_legend.png" Stretch="None"/>
                        <StackPanel Margin="130,0,0,60" VerticalAlignment="Bottom" HorizontalAlignment="Left">
                            <StackPanel.Resources>
                                <Style TargetType="TextBlock" BasedOn="{StaticResource BaseTextStyle}">
                                    <Setter Property="VerticalAlignment" Value="Center"/>
                                    <Setter Property="Margin" Value="32,0,0,0"/>
                                </Style>
                                <Style x:Key="LegendLine" TargetType="StackPanel">
                                    <Setter Property="Orientation" Value="Horizontal"/>
                                    <Setter Property="Margin" Value="0,12,0,0"/>
                                </Style>
                            </StackPanel.Resources>

                            <StackPanel Style="{StaticResource LegendLine}">
                                <Image Source="{StaticResource MarkerSelectedCharacter}" Stretch="None" />
                                <TextBlock Text="{Binding Source='hc4b2fdbega3a5g49f5ga02agab6214927bbe', Converter ={StaticResource TranslatedStringConverter}}"/>
                            </StackPanel>
                            <StackPanel Style="{StaticResource LegendLine}">
                                <Image Source="{StaticResource MarkerFollower}" Stretch="None"/>
                                <TextBlock Text="{Binding Source='hca0bdb3eg8131g4d80g9e27g39aa26aa8894', Converter ={StaticResource TranslatedStringConverter}}"/>
                            </StackPanel>
                            <StackPanel Style="{StaticResource LegendLine}">
                                <Image Source="{StaticResource MarkerAlly}" Stretch="None"/>
                                <TextBlock Text="{Binding Source='h2b3750f8gafacg4320g85d3gc39e0eaa3712', Converter ={StaticResource TranslatedStringConverter}}"/>
                            </StackPanel>
                            <StackPanel Style="{StaticResource LegendLine}">
                                <Image Source="{StaticResource MarkerNeutral}" Stretch="None"/>
                                <TextBlock Text="{Binding Source='h478c2565gccf7g423fg8457g63cd61efdc54', Converter ={StaticResource TranslatedStringConverter}}"/>
                            </StackPanel>
                            <StackPanel Style="{StaticResource LegendLine}">
                                <Image Source="{StaticResource MarkerEnemy}" Stretch="None"/>
                                <TextBlock Text="{Binding Source='h17310606ga5c4g4650gaaf7g6fda279b5b9c', Converter ={StaticResource TranslatedStringConverter}}"/>
                            </StackPanel>
                            <StackPanel Style="{StaticResource LegendLine}">
                                <Image Source="{StaticResource MarkerPoI}" Stretch="None" />
                                <TextBlock Text="{Binding Source='hc68e9f4agc792g4852g936aga63916e91830', Converter ={StaticResource TranslatedStringConverter}}"/>
                            </StackPanel>
                            <StackPanel Style="{StaticResource LegendLine}">
                                <Image Source="{StaticResource MarkerQuest}" Stretch="None"/>
                                <TextBlock Text="{Binding Source='h7b6472c0g0150g4912g94f1gadcd2a6932d1', Converter ={StaticResource TranslatedStringConverter}}"/>
                            </StackPanel>
                            <StackPanel Style="{StaticResource LegendLine}">
                                <Image Source="{StaticResource MarkerCustom}" Stretch="None"/>
                                <TextBlock Text="{Binding Source='hf572eae2gafe6g469bgae65g83698a3aeb6c', Converter ={StaticResource TranslatedStringConverter}}"/>
                            </StackPanel>
                            <StackPanel Style="{StaticResource LegendLine}">
                                <Image Source="{StaticResource MarkerSecret}" Stretch="None"/>
                                <TextBlock Text="{Binding Source='h6e7300c7ge312g48a0gaf7bgef7aba11e811', Converter ={StaticResource TranslatedStringConverter}}"/>
                            </StackPanel>
                        </StackPanel>
                    </Grid>

                    <Grid x:Name="WaypointContainer" HorizontalAlignment="Right" VerticalAlignment="Top" Visibility="{Binding IsChecked, ElementName=WaypointBtn, Converter={StaticResource BoolToVisibleConverter}}">
                        <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Map_c/pane_waypoint.png" Stretch="None" Margin="0,-2,0,0"/>

                        <TextBlock Text="{Binding Source='h4dd789bfg24f5g40f6gadccg5a6e39287311', Converter ={StaticResource TranslatedStringConverter}}" Foreground="{StaticResource LS_tint100}" FontSize="{StaticResource ScaledLargeFontSize}" HorizontalAlignment="Left" VerticalAlignment="Top" Margin="82,240,0,0"/>


                        <Grid Margin="50,376,0,0" VerticalAlignment="Top">
                            <ItemsControl x:Name="Waypoints" ItemsSource="{Binding CurrentPlayer.Waypoints}" Background="Transparent" BorderBrush="Transparent" Height="1060" IsEnabled="False" Opacity="{StaticResource DisabledWaypointsOpacity}">
                                <ItemsControl.Template>
                                    <ControlTemplate>
                                        <ScrollViewer Template="{StaticResource ScrollViewerTemplate}" VerticalScrollBarVisibility="Visible">
                                            <ScrollViewer.Resources>
                                                <Style TargetType="ScrollBar" BasedOn="{StaticResource MinimalGoldScrollbar}"/>
                                                <GridLength x:Key="Left">0</GridLength>
                                                <GridLength x:Key="Right">0</GridLength>
                                            </ScrollViewer.Resources>
                                            <ItemsPresenter/>
                                        </ScrollViewer>
                                    </ControlTemplate>
                                </ItemsControl.Template>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>

                                <ItemsControl.ItemContainerStyle>
                                    <Style TargetType="ContentPresenter">
                                        <Setter Property="Margin" Value="0,0,60,26"/>
                                    </Style>
                                </ItemsControl.ItemContainerStyle>
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <ContentControl x:Name="Container" Template="{StaticResource Journal.ListItemTemplate}" ls:MoveFocus.Focusable="True">
                                            <TextBlock x:Name="txt" Text="{Binding Name}" Foreground="{StaticResource LS_accent75TxtColor}" FontSize="{StaticResource ScaledMediumFontSize}" HorizontalAlignment="Left" VerticalAlignment="Center" Margin="30,24" TextWrapping="Wrap" Width="680"/>

                                            <b:Interaction.Triggers>
                                                <b:EventTrigger EventName="Loaded">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding IsEnabled, ElementName=Container}" Operator="Equal" RightOperand="True"/>
                                                                <b:ComparisonCondition LeftOperand="{Binding FocusedElement, ElementName=JournalMap_c}" Operator="Equal" RightOperand="{x:Null}"/>
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <ls:SetMoveFocusAction TargetName="JournalMap_c" FocusElement="{Binding ElementName=Container}"/>
                                                </b:EventTrigger>

                                                <b:EventTrigger EventName="IsEnabledChanged">
                                                    <b:Interaction.Behaviors>
                                                        <b:ConditionBehavior>
                                                            <b:ConditionalExpression>
                                                                <b:ComparisonCondition LeftOperand="{Binding FocusedElement, ElementName=JournalMap_c}" Operator="Equal" RightOperand="{x:Null}"/>
                                                                <b:ComparisonCondition LeftOperand="{Binding IsEnabled, ElementName=Container}" Operator="Equal" RightOperand="True"/>
                                                            </b:ConditionalExpression>
                                                        </b:ConditionBehavior>
                                                    </b:Interaction.Behaviors>
                                                    <ls:SetMoveFocusAction TargetName="JournalMap_c" FocusElement="{Binding ElementName=Container}"/>
                                                </b:EventTrigger>
                                            </b:Interaction.Triggers>
                                        </ContentControl>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                            </ItemsControl>

                            <ContentPresenter Content="{Binding CurrentPlayer.TravelError}" ContentTemplate="{StaticResource WaypointErrorMessage}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>

                        <ls:LSButton x:Name="WaypointTravelBtn" Command="{Binding GotoWaypoint}" CommandParameter="{Binding Path=FocusedElement.DataContext, ElementName=JournalMap_c}" BoundEvent="UIAccept" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIAccept, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source='h56551aadg3518g4c93g8544ge82f44e011df', Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Bottom" HorizontalAlignment="Center" Margin="0,0,0,100" IsEnabled="False">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="LSButtonPressed">
                                    <b:InvokeCommandAction Command="{Binding CustomEvent}" CommandParameter="CloseWidget"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>
                    </Grid>

                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" Margin="0,80,90,0">
                        <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/MakeCamp/campSupplies_barIcon_inactive.png" Stretch="Uniform" Width="60" VerticalAlignment="Center"/>
                        <ls:LSButton x:Name="CampBtn" Command="{Binding GoToCamp}" BoundEvent="UIDelete" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIDelete, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source='hc7281314gd545g490fgbfc8g1be95db0df3b', Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Center" IsEnabled="False">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="LSButtonPressed">
                                    <b:InvokeCommandAction  Command="{Binding CustomEvent}" CommandParameter="CloseWidget"/>
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>
                    </StackPanel>

                    <ls:LSInputBinding x:Name="AddCustomMarkerBinding" BoundEvent="UIMapAddCustomMarker">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="LSInputBindingReleased">
                                <b:InvokeCommandAction Command="{Binding OpenMessageBox}" CommandParameter="{StaticResource MessageBoxAddCustomMarker}" />
                                <b:InvokeCommandAction Command="{Binding SetNewCustomMarkerPosCommand}" CommandParameter="{Binding ActualCameraLookatPos, ElementName=WorldMap}" />
                                <ls:LSPlaySound Sound="UI_DefaultButton_Click"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSInputBinding>

                    <ls:LSInputBinding x:Name="RemoveCustomMarkerBinding"  BoundEvent="UIMapRemoveCustomMarker" IsEnabled="False">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="LSInputBindingReleased">
                                <b:InvokeCommandAction Command="{Binding OpenMessageBox}" CommandParameter="{StaticResource MessageBoxRemoveCustomMarker}" />
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSInputBinding>

                    <ls:LSInputBinding x:Name="FastTravelToWaypointBinding"  BoundEvent="UIAccept" IsEnabled="False">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="LSInputBindingReleased">
                                <b:InvokeCommandAction Command="{Binding GotoWaypoint}" CommandParameter="{Binding TopFocusedElement.DataContext, ElementName=Cursor}" />
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSInputBinding>

                    <WrapPanel Style="{StaticResource ButtonHint.Container.CenterWrap}" >
                        <ls:LSButton x:Name="AddMarkerBtn" ls:LSButton.EatInput="False" ls:LSButton.BoundEvent="UIMapAddCustomMarker" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIMapAddCustomMarker, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source='hff68e9dag8503g48fbg8029g5c951cf9f744', Converter={StaticResource TranslatedStringConverter}}"/>
                        <ls:LSButton x:Name="RemoveMarkerBtn" Visibility="Collapsed" ls:LSButton.EatInput="False" ls:LSButton.BoundEvent="UIMapRemoveCustomMarker" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIMapRemoveCustomMarker, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source='hbd0a342bg97bag4da8gbc08g7efd453e53e9', Converter={StaticResource TranslatedStringConverter}}"/>
                        <ls:LSButton x:Name="FastTravelMarkerBtn" Visibility="Collapsed" ls:LSButton.EatInput="False" ls:LSButton.BoundEvent="UIAccept" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIAccept, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source='h56551aadg3518g4c93g8544ge82f44e011df', Converter={StaticResource TranslatedStringConverter}}"/>
                        <ls:LSButton x:Name="CenterBtn" ls:LSButton.BoundEvent="ToggleSpells" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=ToggleSpells, Converter={StaticResource FindInputEventConverter}}" Command="ls:LSWorldMap.CenterSelectedCharacter" CommandTarget="{Binding ElementName=WorldMap}" Tag="{Binding Source='h0946163cg1361g40adgbe68g0611a54d3d05', Converter={StaticResource TranslatedStringConverter}}"/>
                        <ContentControl x:Name="ZoomBtn" Template="{StaticResource ButtonHint}" Tag="RightStickY" Visibility="Collapsed">
                            <TextBlock DockPanel.Dock="Right" Margin="-6,0,0,0" Text="{Binding Source='hbd5a17f0g8dcbg42c7g9016ge849ae545969',Converter={StaticResource TranslatedStringConverter}}" Style="{StaticResource BtnHint.StrokedTextStyle}"/>
                        </ContentControl>
                        <ls:LSToggleButton x:Name="LegendBtn" ls:LSToggleButton.BoundEvent="UISort" Tag="{Binding Source='h5cf67d12gd139g413cg9cd3gb0b4a2288815', Converter={StaticResource TranslatedStringConverter}}" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UISort, Converter={StaticResource FindInputEventConverter}}" />
                        <ls:LSToggleButton x:Name="WaypointBtn" ls:LSToggleButton.BoundEvent="UIShowInfo" Tag="{Binding Source='hadbbac99g5d94g4217g9f61g21bfbd9f446a', Converter={StaticResource TranslatedStringConverter}}" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIShowInfo, Converter={StaticResource FindInputEventConverter}}" TapTime="{StaticResource DefaultButtonTapTime}" EatInput="False"/>
                        <ls:LSButton x:Name="CloseBtn" ls:LSButton.BoundEvent="UICancel" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UICancel, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source='h6fefa28bg2149g4cacga071gd95b236b2d0b', Converter={StaticResource TranslatedStringConverter}}"
                                     Command="{Binding CustomEvent}" CommandParameter="CloseWidget"/>

                        <ls:LSInputBinding Command="{Binding CustomEvent}" BoundEvent="UISwitchMode" CommandParameter="CloseWidget"/>

                        <ls:LSInputBinding x:Name="ViewInJournal" Command="{Binding ShowInJournal}" EatInput="False" BoundEvent="UICreate"/>
                    </WrapPanel>
                </Grid>
            </Grid>

            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding Layout}" Value="Common">
                    <Setter TargetName="ZoomBtn" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <Trigger SourceName="LegendBtn" Property="IsChecked" Value="True">
                    <Setter TargetName="LegendBtn" Property="Tag" Value="{Binding Source='h10fb0a58g1320g4ebcg984dg40c6c7ca2ff1', Converter={StaticResource TranslatedStringConverter}}"/>
                </Trigger>

                <DataTrigger Binding="{Binding TopFocusedElement.DataContext, ElementName=Cursor, Converter={StaticResource TypeConverter}}" Value="ls.MapMarker">
                    <Setter TargetName="AddCustomMarkerBinding" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="AddMarkerBtn" Property="IsEnabled" Value="False"/>
                  
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding TopFocusedElement.DataContext, ElementName=Cursor, Converter={StaticResource TypeConverter}}" Value="ls.MapMarker"/>
                        <Condition Binding="{Binding TopFocusedElement.DataContext.Type, ElementName=Cursor}" Value="Custom"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="RemoveCustomMarkerBinding" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="RemoveMarkerBtn" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding TopFocusedElement.DataContext, ElementName=Cursor, Converter={StaticResource TypeConverter}}" Value="ls.MapMarker"/>
                        <Condition Binding="{Binding TopFocusedElement.DataContext.Type, ElementName=Cursor}" Value="Waypoint"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="FastTravelToWaypointBinding" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="FastTravelMarkerBtn" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <Trigger SourceName="WaypointContainer" Property="IsVisible" Value="True">
                    <Setter TargetName="WorldMap" Property="PanLeft" Value=""/>
                    <Setter TargetName="WorldMap" Property="PanRight" Value=""/>
                    <Setter TargetName="WorldMap" Property="PanUp" Value=""/>
                    <Setter TargetName="WorldMap" Property="PanDown" Value=""/>
                    <Setter TargetName="WorldMap" Property="ZoomIn" Value=""/>
                    <Setter TargetName="WorldMap" Property="ZoomOut" Value=""/>
                    <Setter TargetName="WorldMap" Property="CameraLocked" Value="True"/>

                    <Setter TargetName="CenterBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="ZoomBtn" Property="Visibility" Value="Collapsed"/>
                </Trigger>

                <DataTrigger Binding="{Binding CurrentPlayer.TravelError}" Value="None">
                    <Setter TargetName="Waypoints" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="Waypoints" Property="Opacity" Value="1"/>
                    <Setter TargetName="WaypointTravelBtn" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="CampBtn" Property="IsEnabled" Value="True"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InCombat">
                    <Setter TargetName="CampBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.IsInCamp}" Value="True">
                    <Setter TargetName="CampBtn" Property="Tag" Value="{Binding Source='h2f70e122gdef6g4846g94e6ga12347e4ec83', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding (ls:MoveFocus.IsKeyboardFocusWithin), ElementName=WaypointContainer}" Value="False">
                    <Setter TargetName="WaypointTravelBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding IsVisible, ElementName=WaypointContainer}" Value="False">
                    <Setter TargetName="WaypointTravelBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding ElementName=JournalMap_c,Path=Metadata}" Value="Waypoints">
                    <Setter TargetName="WaypointBtn" Property="IsChecked" Value="True"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Template>
    <b:Interaction.Triggers>
        <b:EventTrigger EventName="FocusChanged">
            <ls:LSPlaySound Sound="UI_Shared_Hover" />
        </b:EventTrigger>
    </b:Interaction.Triggers>
    
</ls:UIWidget>