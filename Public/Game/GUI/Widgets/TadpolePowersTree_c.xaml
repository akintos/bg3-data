<ls:UIWidget x:Name="TadpolePowersTree_c"
             ls:UIWidget.ContextName="TadpolePowersTree"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d" 
             d:DataContext="{d:DesignInstance {x:Type ls:DCTadpolePowersTree}, IsDesignTimeCreatable=True}"
             d:DesignHeight="2160" d:DesignWidth="3840"
			 ClipToBounds="True"
             IsHitTestVisible="True"
             ls:TooltipExtender.Owner="{Binding CurrentPlayer.SelectedCharacter}">
    <ls:UIWidget.Template>
        <ControlTemplate TargetType="{x:Type ls:UIWidget}">
            <ControlTemplate.Resources>
                <ResourceDictionary>
                    <ResourceDictionary.MergedDictionaries>
                        <ResourceDictionary Source="../Library/TadpoleTemplates.xaml"/>
                    </ResourceDictionary.MergedDictionaries>

                    <System:Double x:Key="PowerIconSize">163</System:Double>
                    <System:Double x:Key="PowerIconContainer">236</System:Double>
                    <System:Double x:Key="PowerIconActive">163</System:Double>
                    <System:Double x:Key="PowerIconActiveFrame">198</System:Double>
                    <System:Double x:Key="PowerIconDisabled">236</System:Double>
                    
                    <Duration x:Key="HighlightScaleDuration">0:0:0.3</Duration>
                    <Duration x:Key="BrainZoomDuration">0:0:0.3</Duration>

                    <ControlTemplate x:Key="TadpoleCountTemplate" TargetType="Control">
                        <Grid>
                            <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/TadpoleTree_c/TadpoleCounterHolder.png" HorizontalAlignment="Center" VerticalAlignment="Top" Stretch="None" Margin="-30,0,-30,-30" />
                            <TextBlock x:Name="TadpoleCountTxt" HorizontalAlignment="Center" noesis:Text.Stroke="{StaticResource LS_specialTxtColor}" noesis:Text.StrokeThickness="3" IsHitTestVisible="False" VerticalAlignment="Top" Margin="0,100,0,0" TextAlignment="Center" FontSize="{StaticResource ScaledHumongousFontSize}" Text="{Binding CurrentPlayer.PartyTadpoleCount}" Foreground="{StaticResource LS_specialTxtColor}">
                                <TextBlock.Effect>
                                    <DropShadowEffect x:Name="TadpoleCountTxtShadow" Direction="270" Color="{StaticResource specialColor}" ShadowDepth="3.0" BlurRadius="10.0"/>
                                </TextBlock.Effect>
                            </TextBlock>
                            <TextBlock x:Name="TadpoleCountLabel" HorizontalAlignment="Stretch" VerticalAlignment="Top" TextAlignment="Center" TextWrapping="Wrap" FontSize="{StaticResource ScaledDefaultFontSize}" Text="{Binding Source='hef430f37g1a44g4d62g8b27gef6546d71ec4', Converter={StaticResource TranslatedStringConverter}}" Margin="0,260,0,0" MaxWidth="300" Foreground="{StaticResource LS_specialTxtColor}"/>
                        </Grid>
                    </ControlTemplate>
                </ResourceDictionary>
            </ControlTemplate.Resources>

            <Grid x:Name="Root" HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                <Grid.Background>
                    <ImageBrush ImageSource="{StaticResource Tadpoles.Background}" Stretch="Fill"/>
                </Grid.Background>
                <ls:PanZoomContentControl x:Name="Brain" Background="Transparent" PanSpeed="500" DefaultZoom="0.75" RenderTransformOrigin="0.5,0.5" DefaultOffset="0,110" >
                    <b:Interaction.Triggers>
                        <b:PropertyChangedTrigger Binding="{Binding Path=CurrentPlayer.SelectedCharacter}">
                            <b:Interaction.Behaviors>
                                <!--Without this condition we have a Noesis error on closing, because the DC is deleted before fully removing the widget, and the ChangePropertyAction gives an error at that point-->
                                <b:ConditionBehavior>
                                    <b:ConditionalExpression>
                                        <b:ComparisonCondition LeftOperand="{Binding .}" Operator="NotEqual"  RightOperand="{x:Null}"/>
                                    </b:ConditionalExpression>
                                </b:ConditionBehavior>
                            </b:Interaction.Behaviors>
                            <b:InvokeCommandAction Command="{Binding CancelPreparationStage}"/>
                            <b:ChangePropertyAction PropertyName="CurrentOffset" TargetName="Brain" Value="0,110"/>
                        </b:PropertyChangedTrigger>
                    </b:Interaction.Triggers>
                    <ls:PanZoomContentControl.RenderTransform>
                        <TransformGroup>
                            <ScaleTransform x:Name="BrainTransform" ScaleX="1" ScaleY="1"/>
                        </TransformGroup>
                    </ls:PanZoomContentControl.RenderTransform>
                    <Grid Height="3056" Width="2444">
                        <Image x:Name="HealthyBrain" Source="{StaticResource Tadpoles.BrainImage}" HorizontalAlignment="Left" VerticalAlignment="Top" Stretch="None" Margin="15,31,0,0">
                            <Image.Effect>
                                <ls:SaturationEffect Saturation="0.9"/>
                            </Image.Effect>
                        </Image>

                        <ItemsControl x:Name="InfectedOverlays" ItemsSource="{Binding CurrentPlayer.SelectedCharacter.TadpolePowers}" AlternationCount="{Binding ItemsSource.Count, RelativeSource={RelativeSource Self}}" HorizontalAlignment="Left" Style="{StaticResource Tadpoles.InfectionsItemsControlStyle}"/>

                        <ItemsControl x:Name="Powers" ItemsSource="{Binding CurrentPlayer.SelectedCharacter.TadpolePowers}" AlternationCount="{Binding ItemsSource.Count, RelativeSource={RelativeSource Self}}" HorizontalAlignment="Left" Style="{StaticResource Tadpoles.PowersItemsControlStyle}" >
                            <ItemsControl.ItemTemplate>
                                <!--
                                    Hidden = locked
                                    Disabled = no connections
                                    Enabled = has connection, can be activated
                                    Active = activated (infected)
                                -->
                                <DataTemplate DataType="{x:Type ls:VMTadpolePower}">
                                    <DataTemplate.Resources>
                                        <BitmapImage x:Key="FrameEnabled" UriSource="pack://application:,,,/DevGUI;component/Assets/TadpoleTree_c/c_icoholder_d.png"/>
                                        <BitmapImage x:Key="FrameDisabled" UriSource="pack://application:,,,/DevGUI;component/Assets/TadpoleTree_c/c_icoholder_active.png"/>
                                        <BitmapImage x:Key="FrameActive" UriSource="pack://application:,,,/DevGUI;component/Assets/TadpoleTree_c/c_icoholder_infected.png"/>
                                        <BitmapImage x:Key="BrainButtonLock" UriSource="pack://application:,,,/DevGUI;component/Assets/TadpoleTree_c/c_locked_hidden.png"/>
                                        <BitmapImage x:Key="HighlightBorder" UriSource="pack://application:,,,/DevGUI;component/Assets/TadpoleTree_c/c_icoholder_h.png"/>
                                    </DataTemplate.Resources>

                                    <Grid x:Name="Container" IsEnabled="True" Focusable="True" ls:CursorService.IsOver="False" RenderTransformOrigin="0.5,0.5" Background="Transparent">
                                        <Grid.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform x:Name="ScaleTransform" ScaleX="1" ScaleY="1"/>
                                                <!-- Shift half its size to the top left so its positioning is unrelated to size of the content -->
                                                <TranslateTransform X="{Binding ActualWidth, ElementName=Container, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}" Y="{Binding ActualHeight, ElementName=Container, Converter={StaticResource MultiplierConverter}, ConverterParameter='-0.5'}"/>
                                            </TransformGroup>
                                        </Grid.RenderTransform>

                                        <Image x:Name="HighlightBorder" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Source="{StaticResource HighlightBorder}" Width="{StaticResource PowerIconContainer}" Height="{StaticResource PowerIconContainer}" RenderTransformOrigin="0.5,0.5" Visibility="Hidden">
                                            <Image.RenderTransform>
                                                <TransformGroup>
                                                    <RotateTransform x:Name="HighlightBorderRotation" Angle="0"/>
                                                </TransformGroup>
                                            </Image.RenderTransform>
                                        </Image>
                                        <Image x:Name="Frame" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform" Source="{StaticResource FrameEnabled}" RenderTransformOrigin="0.5,0.5" Width="{StaticResource PowerIconContainer}" Height="{StaticResource PowerIconContainer}">
                                            <Image.RenderTransform>
                                                <TransformGroup>
                                                    <RotateTransform>
                                                        <RotateTransform.Angle>
                                                            <MultiBinding Converter="{StaticResource MultiplierMultiConverter}">
                                                                <Binding Path="(ItemsControl.AlternationIndex)" RelativeSource="{RelativeSource AncestorType={x:Type ContentPresenter}}"/>
                                                                <Binding Source="134"/>
                                                            </MultiBinding>
                                                        </RotateTransform.Angle>
                                                    </RotateTransform>
                                                </TransformGroup>
                                            </Image.RenderTransform>
                                        </Image>
                                        <Ellipse x:Name="Icon" Fill="{Binding Power.Icon}" Width="{StaticResource PowerIconSize}" Height="{StaticResource PowerIconSize}"/>
                                        <Image x:Name="ActiveIcon" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="Uniform"  Width="{StaticResource PowerIconActive}"
                                               Height="{StaticResource PowerIconActive}" Visibility="Collapsed">
                                            <Image.Source>
                                                <MultiBinding Converter="{StaticResource IconIdToSourceConverter}">
                                                    <Binding Source="Assets/Tooltips/Icons/"/>
                                                    <Binding Path="Power.IconName"/>
                                                </MultiBinding>
                                            </Image.Source>
                                        </Image>
                                        <Image x:Name="LockIcon" Width="{StaticResource PowerIconDisabled}" Height="{StaticResource PowerIconDisabled}" VerticalAlignment="Center"
                                               HorizontalAlignment="Center" Stretch="Uniform" Source="{StaticResource BrainButtonLock}" Visibility="Collapsed"/>
                                        <Ellipse x:Name="Overlay" Fill="{StaticResource LS_tint00}" Opacity="0.5" Width="{StaticResource PowerIconSize}"
                                                 Height="{StaticResource PowerIconSize}" Visibility="Collapsed"/>

                                        <ls:AnimatedImage x:Name="BurrowingTadpole" ClipSize="160,160" LastFrame="33" RepeatBehavior="1x" Time="0:0:0.036" Source="{StaticResource Tadpoles.BurrowingImage}"
                                                          Visibility="Collapsed" RenderTransformOrigin="0.5,0.5">
                                            <ls:AnimatedImage.RenderTransform>
                                                <TransformGroup>
                                                    <ScaleTransform ScaleX="3" ScaleY="3"/>
                                                </TransformGroup>
                                            </ls:AnimatedImage.RenderTransform>
                                        </ls:AnimatedImage>

                                        <TextBlock Text="{Binding ElementName=Crosshair, Converter={StaticResource ToStringConverter}}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                    </Grid>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding State}" Value="Hidden">
                                            <Setter TargetName="LockIcon" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="Frame" Property="Visibility" Value="Collapsed"/>
                                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                                            <Setter TargetName="Frame" Property="RenderTransform" Value="{x:Null}"/>
                                            <Setter TargetName="Container" Property="IsEnabled" Value="False"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="Disabled">
                                            <Setter TargetName="Frame" Property="Source" Value="{StaticResource FrameDisabled}"/>
                                            <Setter TargetName="Overlay" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="Frame" Property="RenderTransform" Value="{x:Null}"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="Active">
                                            <DataTrigger.EnterActions>
                                                <StopStoryboard BeginStoryboardName="PreventTadpoleOnLoad"/>
                                            </DataTrigger.EnterActions>
                                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                                            <Setter TargetName="ActiveIcon" Property="Visibility" Value="Visible"/>
                                            <Setter TargetName="Frame" Property="Source" Value="{StaticResource FrameActive}"/>
                                            <Setter TargetName="Frame" Property="Width" Value="{StaticResource PowerIconActiveFrame}"/>
                                            <Setter TargetName="Frame" Property="Height" Value="{StaticResource PowerIconActiveFrame}"/>
                                            <Setter TargetName="BurrowingTadpole" Property="Visibility" Value="{Binding AnimationEnded, RelativeSource={RelativeSource Self}, Converter={StaticResource BoolToCollapsedConverter}}" />
                                            <Setter TargetName="Overlay" Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                        <DataTrigger Binding="{Binding State}" Value="Enabled">
                                            <Setter TargetName="Frame" Property="RenderTransform" Value="{x:Null}"/>
                                        </DataTrigger>

                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding State}" Value="Enabled"/>
                                                <Condition Binding="{Binding (ls:CursorService.IsOver), ElementName=Container}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <MultiDataTrigger.EnterActions>
                                                <BeginStoryboard>
                                                    <Storyboard>
                                                        <DoubleAnimation From="1" To="1.2" Duration="{StaticResource HighlightScaleDuration}" Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX"/>
                                                        <DoubleAnimation From="1" To="1.2" Duration="{StaticResource HighlightScaleDuration}" Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </MultiDataTrigger.EnterActions>
                                            <MultiDataTrigger.ExitActions>
                                                <BeginStoryboard>
                                                    <Storyboard FillBehavior="Stop">
                                                        <DoubleAnimation From="1.2" To="1" Duration="{StaticResource HighlightScaleDuration}" Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleX"/>
                                                        <DoubleAnimation From="1.2" To="1" Duration="{StaticResource HighlightScaleDuration}" Storyboard.TargetName="ScaleTransform" Storyboard.TargetProperty="ScaleY"/>
                                                    </Storyboard>
                                                </BeginStoryboard>
                                            </MultiDataTrigger.ExitActions>
                                            <Setter TargetName="HighlightBorder" Property="Visibility" Value="Visible"/>
                                        </MultiDataTrigger>

                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding (ls:CursorService.IsOver), ElementName=Container}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="Overlay" Property="Opacity" Value="0.3"/>
                                        </MultiDataTrigger>

                                        <EventTrigger RoutedEvent="Loaded">
                                            <!-- Prevent tadpole animation if we're loading straight into the "Active" state -->
                                            <BeginStoryboard x:Name="PreventTadpoleOnLoad">
                                                <BeginStoryboard.Storyboard>
                                                    <Storyboard Storyboard.TargetName="BurrowingTadpole" Storyboard.TargetProperty="Visibility">
                                                        <ObjectAnimationUsingKeyFrames Duration="0">
                                                            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Collapsed}"/>
                                                        </ObjectAnimationUsingKeyFrames>
                                                    </Storyboard>
                                                </BeginStoryboard.Storyboard>
                                            </BeginStoryboard>
                                            <BeginStoryboard x:Name="HoverAnimation">
                                                <BeginStoryboard.Storyboard>
                                                    <Storyboard Storyboard.TargetName="HighlightBorderRotation" Storyboard.TargetProperty="Angle">
                                                        <DoubleAnimation From="0" To="360" Duration="0:0:3" RepeatBehavior="Forever"/>
                                                    </Storyboard>
                                                </BeginStoryboard.Storyboard>
                                            </BeginStoryboard>
                                        </EventTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ItemsControl.ItemTemplate>
                        </ItemsControl>
                    </Grid>
                </ls:PanZoomContentControl>

                <Rectangle x:Name="Vignette" IsHitTestVisible="False" Fill="{StaticResource DarkRedVignette}" noesis:Element.BlendingMode="Multiply" Opacity="0.8"/>
                <!-- Tadpole Pool -->
                <StackPanel HorizontalAlignment="Left" Margin="0,300,0,0" x:Name="Tadpoles" Visibility="Collapsed">
                    <Control Template="{StaticResource TadpoleCountTemplate}" HorizontalAlignment="Center"/>
                    <TextBlock x:Name="IllthidProgressLabel" Foreground="{StaticResource LS_guestAccent100}" HorizontalAlignment="Center" TextAlignment="Center" Style="{StaticResource TadpoleFontStyle}" Opacity="1" Text="{Binding Source='he1923f58g7436g4389gaccagd0451014a925',Converter={StaticResource TranslatedStringConverter}}" noesis:Text.Stroke="{StaticResource LS_PrimaryColorOutlineColor}" noesis:Text.StrokeThickness="3" Visibility="Collapsed"/>
                </StackPanel>

                
                <ls:SoftwareCursor x:Name="Cursor" Template="{StaticResource ControllerSoftwareCursorTemplate}" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed">
                    <ls:SoftwareCursor.ToolTip>
                        <ls:LSTooltip x:Name="PowerTooltip" IsHitTestVisible="False" ToolTipService.HorizontalOffset="50"/>
                    </ls:SoftwareCursor.ToolTip>
                </ls:SoftwareCursor>

                <!-- Entry screen -->
                <Grid x:Name="EntryOverlay" Background="{StaticResource LS_PopUpBackgroundColorMedium}" Visibility="{Binding IsChecked, ElementName=EntryButton, Converter={StaticResource BoolToCollapsedConverter}}">
                    <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock x:Name="Info" HorizontalAlignment="Center" VerticalAlignment="Top" TextAlignment="Center" TextWrapping="Wrap" FontSize="{StaticResource ScaledDefaultFontSize}" Text="{Binding Source=hb6d4f05fg375bg4219ga684g1be1396aa6e9, Converter={StaticResource TranslatedStringConverter}}" MaxWidth="700" Foreground="{StaticResource LS_baseTxtColor}" Margin="0,0,0,40">
                            <TextBlock.Effect>
                                <DropShadowEffect Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="8.0"/>
                            </TextBlock.Effect>
                        </TextBlock>
                        <Control HorizontalAlignment="Center" Template="{StaticResource TadpoleCountTemplate}" />
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center">
                            <ls:LSToggleButton x:Name="EntryButton" IsChecked="False" ls:LSToggleButton.BoundEvent="UIAccept" ContentTemplate="{StaticResource ControllerButtonHintImageOnly}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIAccept, Converter={StaticResource FindInputEventConverter}}" IsEnabled="{Binding IsChecked, RelativeSource={RelativeSource Mode=Self}, Converter={StaticResource InvertBoolConverter}}"/>
                            <TextBlock x:Name="EntryButtonLabel" Style="{StaticResource BtnHint.TextStyle}" Text="Manage Powers" Margin="0,0,30,0"/>
                        </StackPanel>
                    </StackPanel>
                </Grid>
                
                <!-- Blocker -->
                <Grid x:Name="Blocker" Background="{StaticResource LS_PanelBackgroundRed}" Visibility="Collapsed">
                    <Grid.Resources>
                        <Style TargetType="TextBlock">
                            <Setter Property="HorizontalAlignment" Value="Center"/>
                            <Setter Property="Foreground" Value="{StaticResource LS_tint100}"/>
                            <Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_PrimaryColorOutlineColor}"/>
                            <Setter Property="noesis:Text.StrokeThickness" Value="3"/>
                            <Setter Property="FontSize" Value="{StaticResource ScaledLargeFontSize}"/>
                            <Setter Property="Effect">
                                <Setter.Value>
                                    <DropShadowEffect Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="8.0"/>
                                </Setter.Value>
                            </Setter>
                        </Style>
                    </Grid.Resources>
                    <StackPanel VerticalAlignment="Center">
                        <TextBlock x:Name="BlockerTitle" FontSize="{StaticResource ScaledHumongousFontSize}" Text="{Binding Source='hc4df7df6gdc7dg48fdgac0fg0a299ddf74f6', Converter={StaticResource TranslatedStringConverter}}"/>
                        <TextBlock x:Name="BlockerBody">
                            <ls:TextBlockFormatter.SourceText>
                                    <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                        <Binding Source="h2f12e394gb14dg456bga124g9b0fccba615d"/>
                                        <Binding Path="CurrentPlayer.SelectedCharacter.Name"/>
                                    </MultiBinding>
                            </ls:TextBlockFormatter.SourceText>
                        </TextBlock>
                    </StackPanel>
                </Grid>

                <StackPanel x:Name="ButtonHints" Style="{StaticResource ButtonHint.Container.Right}" >
                    <ls:LSButton x:Name="UnlockButton" Style="{StaticResource ControllerHoldButtonStyle}" OverwriteClickSound="UI_HUD_TadpolePower_PowerUnlock"
                                 DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
                                 Command="{Binding DataContext.ActivateEnabledPower, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                 CommandParameter="{Binding TopFocusedElement.DataContext, ElementName=Cursor}"
                                 Tag="{Binding Source='hca3605b7gcb05g41ecgbc90g35363115fbc2', Converter={StaticResource TranslatedStringConverter}}"
                                 IsEnabled="False" Visibility="Collapsed">
                        <ls:LSButton.Resources>
                            <KeyTime x:Key="HideCursorKeyTime">0:0:1.5</KeyTime>

                            <Storyboard x:Key="HideCursorAnim" FillBehavior="Stop">
                                <ObjectAnimationUsingKeyFrames Storyboard.TargetProperty="Visibility" Storyboard.TargetName="Cursor">
                                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Collapsed}"/>
                                    <DiscreteObjectKeyFrame KeyTime="{StaticResource HideCursorKeyTime}" Value="{x:Static Visibility.Visible}"/>
                                </ObjectAnimationUsingKeyFrames>

                                <StringAnimationUsingKeyFrames Storyboard.TargetProperty="PanLeft" Storyboard.TargetName="Brain">
                                    <DiscreteStringKeyFrame KeyTime="0:0:0" Value=""/>
                                    <DiscreteStringKeyFrame KeyTime="{StaticResource HideCursorKeyTime}" Value=""/>
                                </StringAnimationUsingKeyFrames>
                                <StringAnimationUsingKeyFrames Storyboard.TargetProperty="PanRight" Storyboard.TargetName="Brain">
                                    <DiscreteStringKeyFrame KeyTime="0:0:0" Value=""/>
                                    <DiscreteStringKeyFrame KeyTime="{StaticResource HideCursorKeyTime}" Value=""/>
                                </StringAnimationUsingKeyFrames>
                                <StringAnimationUsingKeyFrames Storyboard.TargetProperty="PanUp" Storyboard.TargetName="Brain">
                                    <DiscreteStringKeyFrame KeyTime="0:0:0" Value=""/>
                                    <DiscreteStringKeyFrame KeyTime="{StaticResource HideCursorKeyTime}" Value=""/>
                                </StringAnimationUsingKeyFrames>
                                <StringAnimationUsingKeyFrames Storyboard.TargetProperty="PanDown" Storyboard.TargetName="Brain">
                                    <DiscreteStringKeyFrame KeyTime="0:0:0" Value=""/>
                                    <DiscreteStringKeyFrame KeyTime="{StaticResource HideCursorKeyTime}" Value=""/>
                                </StringAnimationUsingKeyFrames>
                            </Storyboard>
                        </ls:LSButton.Resources>
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="HoldFinishedEvent">
                                <b:ControlStoryboardAction  ControlStoryboardOption="Play" Storyboard="{StaticResource HideCursorAnim}"/>
                                <b:InvokeCommandAction Command="{Binding HideTooltipOnUIElement}" CommandParameter="{Binding ElementName=Cursor}"/>
                            </b:EventTrigger>
                            <b:StoryboardCompletedTrigger Storyboard="{StaticResource HideCursorAnim}">
                                <b:InvokeCommandAction Command="{Binding EnableTooltipOnUIElement}" CommandParameter="{Binding ElementName=Cursor}"/>
                            </b:StoryboardCompletedTrigger>
                        </b:Interaction.Triggers>
                        
                    </ls:LSButton>

                    <ls:LSButton x:Name="CloseButton" ls:LSButton.BoundEvent="UICancel" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UICancel, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source='h6fefa28bg2149g4cacga071gd95b236b2d0b', Converter={StaticResource TranslatedStringConverter}}" Visibility="{Binding Visibility, ElementName=BackButton, Converter={StaticResource InvertVisibilityConverter}}"
                                 Command="{Binding CustomEvent}" CommandParameter="CloseWidget"/>

                    <ls:LSButton x:Name="BackButton" ls:LSButton.BoundEvent="UICancel" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UICancel, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source='hfe928c0dgb014g4eb2g8c52g6ed43b026e20', Converter={StaticResource TranslatedStringConverter}}" Visibility="Collapsed">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="LSButtonPressed">
                                <b:ChangePropertyAction TargetName="EntryButton" PropertyName="IsChecked" Value="False"/>
                                <b:ChangePropertyAction TargetName="Brain" PropertyName="CurrentOffset" Value="{Binding DefaultOffset, ElementName=Brain}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSButton>
                </StackPanel>

                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Loaded">
                        <!-- Tutorial UI Event - Tadpole Powers Tree Open -->
                        <b:InvokeCommandAction Command="{Binding TutorialEvent}" CommandParameter="cc289292-2ed5-4d60-bb37-386726323b8c"/>
                    </b:EventTrigger>

                    <b:PropertyChangedTrigger Binding="{Binding Path=TopFocusedElement, ElementName=Cursor}">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Path=TopFocusedElement.DataContext, ElementName=Cursor, Converter={StaticResource TypeConverter}}" Operator="Equal" RightOperand="ls.VMTadpolePower"/>
                                    <b:ComparisonCondition LeftOperand="{Binding Visibility, ElementName=Cursor}" Operator="Equal" RightOperand="Visible"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:InvokeCommandAction Command="{Binding EnableTooltipOnUIElement}" CommandParameter="{Binding ElementName=Cursor}"/>
                        <b:ChangePropertyAction TargetName="PowerTooltip" PropertyName="Content" Value="{Binding TopFocusedElement.DataContext.Power, ElementName=Cursor}"/>
                    </b:PropertyChangedTrigger>

                    <b:PropertyChangedTrigger Binding="{Binding Path=TopFocusedElement, ElementName=Cursor}">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Path=TopFocusedElement.DataContext, ElementName=Cursor, Converter={StaticResource TypeConverter}}" Operator="NotEqual" RightOperand="ls.VMTadpolePower"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:InvokeCommandAction Command="{Binding HideTooltipOnUIElement}" CommandParameter="{Binding ElementName=Cursor}"/>
                    </b:PropertyChangedTrigger>

                    <b:EventTrigger EventName="UnLoaded">
                        <b:InvokeCommandAction Command="{Binding HideTooltipOnUIElement}" CommandParameter="{Binding ElementName=Cursor}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </Grid>

            <ControlTemplate.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.PartyTadpoleCount, Converter={StaticResource GreaterThanConverter}, ConverterParameter='0'}" Value="True"/>
                        <Condition Binding="{Binding TopFocusedElement.DataContext.State, ElementName=Cursor}" Value="Enabled"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="UnlockButton" Property="IsEnabled" Value="True"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsVisible, ElementName=EntryOverlay}" Value="False"/>
                        <Condition Binding="{Binding IsVisible, ElementName=Blocker}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="UnlockButton" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="Cursor" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="Tadpoles" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsVisible, ElementName=EntryOverlay}" Value="False"/>
                        <Condition Binding="{Binding IsVisible, ElementName=Blocker}" Value="False"/>
                        <Condition Binding="{Binding CurrentPlayer.UIData.IsCharacterSelectOpen}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Brain" Property="PanLeft" Value="UIMapRight"/>
                    <Setter TargetName="Brain" Property="PanRight" Value="UIMapLeft"/>
                    <Setter TargetName="Brain" Property="PanUp" Value="UIMapDown"/>
                    <Setter TargetName="Brain" Property="PanDown" Value="UIMapUp"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding IsVisible, ElementName=EntryOverlay}" Value="False">
                    <DataTrigger.EnterActions>
                        <BeginStoryboard x:Name="FadeInBrainContent">
                            <Storyboard FillBehavior="HoldEnd">
                                <DoubleAnimation Duration="{StaticResource BrainZoomDuration}" To="0.85" Storyboard.TargetProperty="CurrentZoom" Storyboard.TargetName="Brain">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.EnterActions>
                    <DataTrigger.ExitActions>
                        <BeginStoryboard x:Name="FadeOutBrainContent">
                            <Storyboard FillBehavior="HoldEnd">
                                <DoubleAnimation Duration="{StaticResource BrainZoomDuration}" To="0.75" Storyboard.TargetProperty="CurrentZoom" Storyboard.TargetName="Brain">
                                    <DoubleAnimation.EasingFunction>
                                        <CubicEase EasingMode="EaseOut"/>
                                    </DoubleAnimation.EasingFunction>
                                </DoubleAnimation>
                            </Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.ExitActions>

                    <Setter TargetName="BackButton" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.TadpoleTreeState}" Value="Hidden">
                    <Setter TargetName="Blocker" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="Powers" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.TadpoleTreeState}" Value="Locked">
                    <Setter TargetName="Blocker" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="BlockerTitle" Property="Text" Value="{Binding Source='h764fcd6cgd702g41bcg93a6g64855afd2c92', Converter={StaticResource TranslatedStringConverter}}"/>
                    <Setter TargetName="BlockerBody" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="hae014f0cgf722g4cd8g93d8gd9faaa4e2ef7"/>
                                <Binding Path="CurrentPlayer.SelectedCharacter.Name"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.IsShapeShifted}" Value="True">
                    <Setter TargetName="Blocker" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="Powers" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="BlockerTitle" Property="Text" Value="{Binding Source='hc4df7df6gdc7dg48fdgac0fg0a299ddf74f6', Converter={StaticResource TranslatedStringConverter}}"/>
                    <Setter TargetName="BlockerBody" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="hdb5b8a51g3d00g49e0gafc9g8c2ae5e73c9c"/>
                                <Binding Path="CurrentPlayer.SelectedCharacter.Name"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InCombat">
                    <Setter TargetName="Blocker" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="BlockerTitle" Property="Text" Value="{Binding Source='h98dfc3fcg97b1g45a1g972dg5be8fb448318', Converter={StaticResource TranslatedStringConverter}}"/>
                    <Setter TargetName="BlockerBody" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="h3ce38deegcf48g4568g874dg88177a99f1c2"/>
                                <Binding Path="CurrentPlayer.SelectedCharacter.Name"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>

                <DataTrigger Binding="{Binding IsVisible, ElementName=EntryOverlay}" Value="True">
                    <Setter TargetName="Blocker" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.TadpoledState}" Value="HalfIllithid">
                    <Setter TargetName="Vignette" Property="Fill" Value="{StaticResource DarkPurpleVignette}"/>
                    <Setter TargetName="HealthyBrain" Property="Effect">
                        <Setter.Value>
                            <ls:SaturationEffect Saturation="0.6" />
                        </Setter.Value>
                    </Setter>
                    <Setter TargetName="IllthidProgressLabel" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.TadpoledState}" Value="FullIllithid">
                    <Setter TargetName="Vignette" Property="Fill" Value="{StaticResource DarkPurpleVignette}"/>
                    <Setter TargetName="HealthyBrain" Property="Effect">
                        <Setter.Value>
                            <ls:SaturationEffect Saturation="0.2" />
                        </Setter.Value>
                    </Setter>
                    <Setter TargetName="IllthidProgressLabel" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="IllthidProgressLabel" Property="Text" Value="{Binding Source='h3660be4ag5385g4bf3g9d0bg1d304d634389',Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>


                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Layout}" Value="Common"/>
                        <Condition Binding="{Binding Data.AspectRatio, Converter={StaticResource LessThanConverter}, ConverterParameter='0.7'}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Tadpoles" Property="HorizontalAlignment" Value="Center"/>
                    <Setter TargetName="Tadpoles" Property="Margin" Value="-2300,300,0,0"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding Layout}" Value="Right">
                    <Setter TargetName="ButtonHints" Property="HorizontalAlignment" Value="Left"/>
                    <Setter TargetName="ButtonHints" Property="Margin" Value="100,0,0,36"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Template>
    <b:Interaction.Triggers>
        <b:EventTrigger EventName="Loaded">
            <ls:LSPlaySound Sound="UI_HUD_TadpolePower_Menu_Open"/>
        </b:EventTrigger>
        <b:EventTrigger EventName="Unloaded">
            <ls:LSPlaySound Sound="UI_HUD_TadpolePower_Menu_Close"/>
        </b:EventTrigger>
    </b:Interaction.Triggers>
</ls:UIWidget>
