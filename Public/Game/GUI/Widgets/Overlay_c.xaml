<ls:UIWidget x:Name="Overlay"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
			 xmlns:b="http://schemas.microsoft.com/xaml/behaviors" 
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
			 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
			 mc:Ignorable="d"
             d:DesignHeight="2160" d:DesignWidth="3840"
			 ls:UIWidget.ContextName="Overlay" d:DataContext="{d:DesignInstance {x:Type ls:DCOverlay}, IsDesignTimeCreatable=True}"
             ls:TooltipExtender.Owner="{Binding CurrentPlayer.SelectedCharacter}">

    <ls:UIWidget.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="../Library/CriticalHitAnimation.xaml"/>
                <ResourceDictionary Source="../Library/WorldTextTemplates.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <BitmapImage x:Key="HoldRingFilled" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/ControllerHints/c_holdRing_filled.png"/>
            <BitmapImage x:Key="HoldRingShine" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/ControllerHints/c_holdRingShine.png"/>

            <ControlTemplate x:Key="WorldTextDisplayController">
                <ControlTemplate.Resources>
                    <!-- default to starting at overhead position -->
                    <Style x:Key="WorldTextPositioning" BasedOn="{StaticResource OverheadPosition}"/>
                </ControlTemplate.Resources>

                <ItemsControl ItemsSource="{Binding CurrentPlayer.WorldText}" ItemContainerStyle="{DynamicResource WorldTextPositioning}" IsHitTestVisible="False">
                    <ItemsControl.ItemsPanel>
                        <ItemsPanelTemplate>
                            <Canvas ClipToBounds="{Binding DataContext.Data.IsCameraSplit, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </ItemsPanelTemplate>
                    </ItemsControl.ItemsPanel>
                    <ItemsControl.ItemTemplate>
                        <DataTemplate>
                            <Border x:Name="TextBorder">
                                <Border.RenderTransform>
                                    <TransformGroup>
                                        <TranslateTransform X="{Binding ElementName=ContentRoot,Path=ActualWidth,Converter={StaticResource MultiplierConverter}, ConverterParameter=-0.5}" Y="0"/>
                                    </TransformGroup>
                                </Border.RenderTransform>
                                <TextBlock ls:TextBlockFormatter.SourceText="{Binding Text}" HorizontalAlignment="Center" VerticalAlignment="Bottom" RenderTransformOrigin="0.5,0.5"
                                       TextWrapping="Wrap" TextAlignment="Center" Foreground="{DynamicResource LS_PrimaryColor}" 
                                       noesis:Text.StrokeThickness="{StaticResource TextOutlineThickness}" FontSize="{StaticResource TitleFontSize}" >
                                    <noesis:Text.Stroke>
                                        <SolidColorBrush Color="{DynamicResource TextOutlineColor}" Opacity="{Binding RelativeSource={RelativeSource FindAncestor, AncestorType=TextBlock}, Path=Foreground.Opacity}"/>
                                    </noesis:Text.Stroke>
                                    <TextBlock.RenderTransform>
                                        <!-- for animating position -->
                                        <TransformGroup>
                                            <ScaleTransform/>
                                            <SkewTransform/>
                                            <RotateTransform/>
                                            <TranslateTransform X="0" Y="0"/>
                                        </TransformGroup>
                                    </TextBlock.RenderTransform>

                                    <TextBlock.Effect>
                                        <DropShadowEffect Direction="270" Color="Black" ShadowDepth="3.0" BlurRadius="0.0"/>
                                    </TextBlock.Effect>

                                    <TextBlock.Style>
                                        <Style TargetType="TextBlock">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding AnimationType}" Value="Anim0">
                                                    <DataTrigger.EnterActions>
                                                        <BeginStoryboard Storyboard="{StaticResource DamageAnimationCommon}"/>
                                                        <BeginStoryboard Storyboard="{StaticResource DamageAnimationX0}"/>
                                                        <BeginStoryboard Storyboard="{StaticResource DamageAnimationY0}"/>
                                                    </DataTrigger.EnterActions>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding AnimationType}" Value="Anim1">
                                                    <DataTrigger.EnterActions>
                                                        <BeginStoryboard Storyboard="{StaticResource DamageAnimationCommon}"/>
                                                        <BeginStoryboard Storyboard="{StaticResource DamageAnimationX1}"/>
                                                        <BeginStoryboard Storyboard="{StaticResource DamageAnimationY0}"/>
                                                    </DataTrigger.EnterActions>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding AnimationType}" Value="Anim2">
                                                    <DataTrigger.EnterActions>
                                                        <BeginStoryboard Storyboard="{StaticResource DamageAnimationCommon}"/>
                                                        <BeginStoryboard Storyboard="{StaticResource DamageAnimationX2}"/>
                                                        <BeginStoryboard Storyboard="{StaticResource DamageAnimationY0}"/>
                                                    </DataTrigger.EnterActions>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding AnimationType}" Value="Anim3">
                                                    <DataTrigger.EnterActions>
                                                        <BeginStoryboard Storyboard="{StaticResource DamageAnimationCommon}"/>
                                                        <BeginStoryboard Storyboard="{StaticResource DamageAnimationX3}"/>
                                                        <BeginStoryboard Storyboard="{StaticResource DamageAnimationY1}"/>
                                                    </DataTrigger.EnterActions>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding AnimationType}" Value="Anim4">
                                                    <DataTrigger.EnterActions>
                                                        <BeginStoryboard Storyboard="{StaticResource DamageAnimationCommon}"/>
                                                        <BeginStoryboard Storyboard="{StaticResource DamageAnimationX4}"/>
                                                        <BeginStoryboard Storyboard="{StaticResource DamageAnimationY1}"/>
                                                    </DataTrigger.EnterActions>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBlock.Style>
                                </TextBlock>
                            </Border>
                            <DataTemplate.Triggers>
                                <DataTrigger Binding="{Binding PlayerId, RelativeSource={RelativeSource AncestorType=ls:UIWidget}}" Value="1">
                                    <Setter TargetName="TextBorder" Property="RenderTransform">
                                        <Setter.Value>
                                            <TransformGroup>
                                                <TranslateTransform X="0" Y="0"/>
                                            </TransformGroup>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </ControlTemplate>

            <ControlTemplate x:Key="VisualHintHoldButton" TargetType="ls:LSButton">
                <StackPanel Orientation="Horizontal" Effect="{StaticResource HUD.DropShadow}">
                    <Grid x:Name="Root">
                        <Grid RenderTransformOrigin="0.5,0.5">
                            <Grid.RenderTransform>
                                <ScaleTransform x:Name="ImageScale"/>
                            </Grid.RenderTransform>
                            <Image x:Name="imgbg" Source="{StaticResource HoldRingFilled}" VerticalAlignment="Center" HorizontalAlignment="Center" Stretch="None" Opacity="0.2"/>
                            <Grid x:Name="holdButtonSpinner" VerticalAlignment="Center" HorizontalAlignment="Center" Width="96" Height="96" RenderTransformOrigin="0.5,0.5">
                                <Grid.RenderTransform>
                                    <TransformGroup>
                                        <RotateTransform Angle="0"/>
                                        <TranslateTransform/>
                                    </TransformGroup>
                                </Grid.RenderTransform>
                                <Image x:Name="holdButtonShine" Source="{StaticResource HoldRingShine}" VerticalAlignment="Center" HorizontalAlignment="Center" Width="96" Height="96" RenderTransformOrigin="0.5,0.5">
                                    <Image.RenderTransform>
                                        <TransformGroup>
                                            <RotateTransform Angle="0"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Image.RenderTransform>
                                </Image>
                                <Image x:Name="holdButtonShine2" Source="{StaticResource HoldRingShine}" VerticalAlignment="Center" HorizontalAlignment="Center" Width="96" Height="96" RenderTransformOrigin="0.5,0.5">
                                    <Image.RenderTransform>
                                        <TransformGroup>
                                            <RotateTransform Angle="180"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </Image.RenderTransform>
                                </Image>
                            </Grid>
                        </Grid>
                        <Control x:Name="Icon" Template="{StaticResource ControllerButton.ImageSwitcher}" VerticalAlignment="Center" HorizontalAlignment="Center" Width="{StaticResource ScaledControllerHintSize}" Height="{StaticResource ScaledControllerHintSize}" RenderTransformOrigin="0.5,0.5">
                        </Control>
                    </Grid>
                    <TextBlock x:Name="Label" Style="{StaticResource BtnHint.StrokedTextStyle}" Text="{Binding Tag, RelativeSource={RelativeSource Mode=TemplatedParent}}" HorizontalAlignment="Left" VerticalAlignment="Center" Visibility="{Binding Text, Converter={StaticResource NullToCollapsedConverter}}"/>
                </StackPanel>
                <ControlTemplate.Triggers>
                    <Trigger Property="Visibility" Value="Visible">
                        <Trigger.EnterActions>
                            <BeginStoryboard x:Name="HoldButtonAnimated">
                                <Storyboard>
                                    <DoubleAnimation Storyboard.TargetName="holdButtonShine" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"
                                                                         From="0" To="360" Duration="0:0:8" AutoReverse="False" RepeatBehavior="Forever" />
                                    <DoubleAnimation Storyboard.TargetName="holdButtonShine2" Storyboard.TargetProperty="(UIElement.RenderTransform).(TransformGroup.Children)[0].(RotateTransform.Angle)"
                                                                         From="180" To="540" Duration="0:0:8" AutoReverse="False" RepeatBehavior="Forever" />
                                </Storyboard>
                            </BeginStoryboard>
                        </Trigger.EnterActions>
                        <Trigger.ExitActions>
                            <StopStoryboard BeginStoryboardName="HoldButtonAnimated"/>
                        </Trigger.ExitActions>
                    </Trigger>
                    <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                        <StopStoryboard BeginStoryboardName="HoldButtonAnimated"/>
                    </EventTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Storyboard x:Key="ShowActiveSearchHintAnimation">
                <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ActiveSearchVisualButton" Storyboard.TargetProperty="Visibility">
                    <DiscreteObjectKeyFrame KeyTime="0:0:0" Value="{x:Static Visibility.Visible}"/>
                    <DiscreteObjectKeyFrame KeyTime="0:0:5" Value="{x:Static Visibility.Collapsed}"/>
                </ObjectAnimationUsingKeyFrames>
            </Storyboard>
        </ResourceDictionary>

    </ls:UIWidget.Resources>

    <ls:UIWidget.Template>
        <ControlTemplate>
            <Grid x:Name="OverlayRoot" Visibility="Collapsed">
                <b:Interaction.Triggers>
                    <b:PropertyChangedTrigger Binding="{Binding Data.Combats.Count}">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Data.Combats.Count}" Operator="GreaterThan" RightOperand="0"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:ChangePropertyAction TargetName="ButtonPromptHolder" PropertyName="Tag" Value="HasCombat"/>
                    </b:PropertyChangedTrigger>
                    <b:PropertyChangedTrigger Binding="{Binding Data.Combats.Count}">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding Data.Combats.Count}" Operator="Equal" RightOperand="0"/>
                                    <b:ComparisonCondition LeftOperand="{Binding CurrentPlayer.SelectedCharacter.Stats.Level.Value}" Operator="LessThan" RightOperand="3"/>
                                    <b:ComparisonCondition LeftOperand="{Binding ElementName=ButtonPromptHolder, Path=Tag}" Operator="Equal" RightOperand="HasCombat"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <b:ControlStoryboardAction Storyboard="{StaticResource ShowActiveSearchHintAnimation}" ControlStoryboardOption="Play"/>
                    </b:PropertyChangedTrigger>
                </b:Interaction.Triggers>

                <Grid Visibility="{Binding CurrentPlayer.UIData.ShowHud, Converter={StaticResource BoolToVisibleConverter}}">
                    <Control Template="{StaticResource WorldTextDisplayController}"/>
                </Grid>

                <!-- Show dice roll and damage during CritCam -->
                <Grid Visibility="{Binding CurrentPlayer.UIData.ShowHud, Converter={StaticResource BoolToCollapsedConverter}}">
                    <ContentControl x:Name="CritCamInfo" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" IsHitTestVisible="False"/>

                    <Control Template="{StaticResource WorldTextDisplayController}">
                        <Control.Resources>
                            <Style x:Key="WorldTextPositioning" BasedOn="{StaticResource MiddlePosition}"/>
                        </Control.Resources>
                    </Control>
                </Grid>

                <!--Cancel active action, before requesting game menu (except for forced casts on hovering an enemy in combat mode)-->
                <ls:LSInputBinding x:Name="CancelInputBinding" BoundEvent="ToggleInGameMenu" Command="{Binding ActionCancelCommand}" IsEnabled="{Binding CurrentPlayer.SelectedCharacter.IsCasting}" EatInput="{Binding CurrentPlayer.SelectedCharacter.IsForceCasting, Converter={StaticResource InvertBoolConverter}}"/>

                <!-- Button Prompts -->

                <StackPanel x:Name="ButtonPromptHolder" Orientation="Vertical" Style="{StaticResource ButtonHint.Container.RightStacked}">
               
                    <!-- Examine-->
                    <ls:LSButton x:Name="ExamineTarget" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=ToggleSneak, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source='hc173e425geb02g4f20ga119g2cf1bd75643b', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Left" Visibility="Collapsed"/>

                    <!-- Context Menu-->
                    <ls:LSButton x:Name="OpenContextMenu" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=ContextMenu, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source='h8d63481fg75ddg4d74g8d7agc1f77dde95d3', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Left" Visibility="Collapsed" />

                    <!-- Cancel an already set action-->
                    <ls:LSButton x:Name="ActionCancelButton" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancel'}" Tag="{Binding Source='h01d5c470g61bfg498cgb17eg7be425444fa5', Converter={StaticResource TranslatedStringConverter}}" Visibility="Collapsed" HorizontalAlignment="Left"/>

                    <!-- Active Search visual button hint-->
                    <ls:LSButton x:Name="ActiveSearchVisualButton" HorizontalAlignment="Left" EatInput="False" HoldTime="0" Visibility="Collapsed"
                                 Style="{StaticResource ControllerHoldButtonStyle}" Template="{StaticResource VisualHintHoldButton}"
                                 DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
                                 Tag="{Binding Source=h89e9b3a8gb0b7g4245g8db9g49da4891a377, Converter={StaticResource TranslatedStringConverter}}"/>

                    <!-- Open Radials-->
                    <ls:LSButton x:Name="OpenActionRadials" Command="{Binding CustomEvent}" BoundEvent="ToggleSpells" CommandParameter="OpenActionRadials" IsEnabled="{Binding CurrentPlayer.UIData.IsCharacterSelectOpen, Converter={StaticResource InvertBoolConverter}}" Tag="{Binding Source='h1988a9a5g8b63g4d67gb237ga5ec8f73f748', Converter={StaticResource TranslatedStringConverter}}" HorizontalAlignment="Left" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UITabNext, Converter={StaticResource FindInputEventConverter}}" />

                </StackPanel>
                
                <!-- Controls without Prompts -->
                <!-- Jump -->
                <ls:LSButton x:Name="JumpAction" Command="{Binding LaunchDefaultActionCommand}" CommandParameter="Jump" BoundEvent="Jump" IsEnabled="{Binding CurrentPlayer.UIData.IsCharacterSelectOpen, Converter={StaticResource InvertBoolConverter}}" TapTime="{StaticResource HoldTimeShortcuts}" EatInput="False"/>

                <!-- Examine Target -->
                <ls:LSButton x:Name="ExamineCommand" Command="{Binding ExamineCommand}" CommandParameter="{Binding CurrentPlayer.CurrentTarget.EntityHandle}" BoundEvent="ToggleSneak" IsEnabled="{Binding CurrentPlayer.UIData.IsCharacterSelectOpen, Converter={StaticResource InvertBoolConverter}}" TapTime="{StaticResource HoldTimeShortcuts}" EatInput="False"/>

                <!-- Examine Surface -->
                <ls:LSButton x:Name="ExamineSurfaceCommand" Command="{Binding CustomEvent}" CommandParameter="OpenExamineSurfaces" BoundEvent="ToggleSneak" TapTime="{StaticResource HoldTimeShortcuts}" IsEnabled="False" EatInput="False"/>

                <!-- Group Sneak -->
                <ls:LSInputBinding x:Name="ToggleGroupHideBinding" Command="{Binding ToggleGroupHide}" BoundEvent="ToggleSneak" IsEnabled="{Binding CurrentPlayer.UIData.IsCharacterSelectOpen, Converter={StaticResource InvertBoolConverter}}" HoldTime="{StaticResource HoldTimeShortcuts}" />

                <!-- Panel Select Radial -->
                <ls:LSInputBinding Command="{Binding CustomEvent}" BoundEvent="PanelSelect" CommandParameter="ToggleShortcutMenu" IsEnabled="{Binding CurrentPlayer.UIData.IsCharacterSelectOpen, Converter={StaticResource InvertBoolConverter}}"/>
                
                <!-- Show Map -->
                <ls:LSButton Command="{Binding CustomEvent}" BoundEvent="UISwitchMode" CommandParameter="ShowJournalMap" IsEnabled="{Binding CurrentPlayer.UIData.IsCharacterSelectOpen, Converter={StaticResource InvertBoolConverter}}" TapTime="{StaticResource HoldTimeShortcuts}" EatInput="False"/>

                <!-- Show Journal -->
                <ls:LSButton Command="{Binding CustomEvent}" BoundEvent="UISwitchMode" CommandParameter="OpenJournalQuests" IsEnabled="{Binding CurrentPlayer.UIData.IsCharacterSelectOpen, Converter={StaticResource InvertBoolConverter}}" HoldTime="{StaticResource HoldTimeShortcuts}"/>

                <!-- Toggle Light Source -->
                <ls:LSInputBinding x:Name="ToggleLightSource" Command="{Binding SwapLightSourceCommand}" BoundEvent="Jump" IsEnabled="{Binding CurrentPlayer.UIData.IsCharacterSelectOpen, Converter={StaticResource InvertBoolConverter}}" HoldTime="{StaticResource HoldTimeShortcuts}"/>

                <!-- General tooltip pinning binding -->
                <ls:LSInputBinding x:Name="PinTooltipBinding" Style="{StaticResource PinTooltipBindingStyle}"/>
            </Grid>

            <ControlTemplate.Triggers>

                <!-- Disable Dpad Up/Down actions if action resources bar is allowing upcasting, so the input can reach the bar -->
                <DataTrigger Binding="{Binding CurrentPlayer.UIData.ActiveTask.RootCastSpell.SpellUpcast.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=1, FallbackValue=False}" Value="True">
                    <Setter TargetName="JumpAction" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="ToggleLightSource" Property="IsEnabled" Value="False"/>

                    <Setter TargetName="ExamineCommand" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="ExamineSurfaceCommand" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="ToggleGroupHideBinding" Property="IsEnabled" Value="False"/>
                </DataTrigger>

                <!-- Display Examine Prompt -->
                <DataTrigger Binding="{Binding CurrentPlayer.UIData.CloudInformation.HasSurface}" Value="True">
                    <Setter TargetName="ExamineTarget" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.UIData.SurfaceInformation.HasSurface}" Value="True">
                    <Setter TargetName="ExamineTarget" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.CurrentTarget,Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                    <Setter TargetName="ExamineTarget" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.CurrentTarget,Converter={StaticResource NullToBoolFalseConverter}}" Value="False"/>
                        <Condition Binding="{Binding CurrentPlayer.UIData.CloudInformation.HasSurface}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="ExamineTarget" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="ExamineSurfaceCommand" Property="IsEnabled" Value="True"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.CurrentTarget,Converter={StaticResource NullToBoolFalseConverter}}" Value="False"/>
                        <Condition Binding="{Binding CurrentPlayer.UIData.SurfaceInformation.HasSurface}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="ExamineTarget" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="ExamineSurfaceCommand" Property="IsEnabled" Value="True"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.CurrentTarget,Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                    <Setter TargetName="ExamineSurfaceCommand" Property="IsEnabled" Value="False"/>
                </DataTrigger>

                <!-- Display Context Menu -->
                <DataTrigger Binding="{Binding CurrentPlayer.CurrentTarget,Converter={StaticResource NullToBoolFalseConverter}}" Value="True">
                    <Setter TargetName="OpenContextMenu" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding Layout}" Value="Right">
                    <Setter TargetName="ButtonPromptHolder" Property="Style" Value="{StaticResource ButtonHint.Container.LeftStacked}" />
                    <Setter TargetName="ButtonPromptHolder" Property="Margin" Value="12,0,0,26" />
                </DataTrigger>

                <DataTrigger Binding="{Binding Layout}" Value="Left">
                    <Setter TargetName="ButtonPromptHolder" Property="Margin" Value="0,0,12,26" />
                </DataTrigger>

                <DataTrigger Binding="{Binding CriticalHitAnimation, Mode=OneWay}" Value="True">
                    <Setter TargetName="CritCamInfo" Property="Template" Value="{StaticResource Overlay.CriticalHitAnimation}" />
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.UIData.AreRadialsOpen}" Value="True">
                    <Setter TargetName="ButtonPromptHolder" Property="Visibility" Value="Collapsed" />
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CharacterMode}" Value="InDialogue">
                    <Setter TargetName="ButtonPromptHolder" Property="Visibility" Value="Collapsed" />
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.UIData.CharacterCreationMode}" Value="Creation">
                    <Setter TargetName="ButtonPromptHolder" Property="Visibility" Value="Collapsed" />
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.UIData.IsCharacterSelectOpen}" Value="True">
                    <Setter TargetName="ButtonPromptHolder" Property="Visibility" Value="Collapsed" />
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.IsControllerCursorActive}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.IsCasting}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="ActionCancelButton" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.IsControllerCursorActive}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.Moving}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="ActionCancelButton" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding HasInputEnabled, ElementName=Overlay}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.IsCasting}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="ActionCancelButton" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <DataTrigger Value="True">
                    <DataTrigger.Binding>
                        <MultiBinding Converter="{StaticResource EqualConverter}">
                            <Binding Path="CurrentPlayer.SelectedCharacter.CurrentSpellTask.Name.Str"/>
                            <Binding Path="CurrentPlayer.SelectedCharacter.MainMeleeAttack.Name"/>
                        </MultiBinding>
                    </DataTrigger.Binding>
                    <Setter TargetName="ActionCancelButton"  Property="Visibility" Value="Collapsed" />
                </DataTrigger>

                <DataTrigger Value="True">
                    <DataTrigger.Binding>
                        <MultiBinding Converter="{StaticResource EqualConverter}">
                            <Binding Path="CurrentPlayer.SelectedCharacter.CurrentSpellTask.Name.Str"/>
                            <Binding Path="CurrentPlayer.SelectedCharacter.MainRangedAttack.Name"/>
                        </MultiBinding>
                    </DataTrigger.Binding>
                    <Setter TargetName="ActionCancelButton"  Property="Visibility" Value="Collapsed" />
                </DataTrigger>

                <DataTrigger Binding="{Binding PlayerId, RelativeSource={RelativeSource Mode=Self}}" Value="1">
                    <Setter TargetName="OverlayRoot" Property="Visibility" Value="Visible" />
                </DataTrigger>

                <DataTrigger Binding="{Binding Data.IsCameraSplit}" Value="True">
                    <Setter TargetName="OverlayRoot" Property="Visibility" Value="Visible" />
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Template>
</ls:UIWidget>
