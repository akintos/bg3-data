<ls:UIWidget x:Name="TargetInfo_c"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
			 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
			 mc:Ignorable="d"
             Template="{StaticResource Hud.Root}"
             d:DataContext="{d:DesignInstance {x:Type ls:Widget}, IsDesignTimeCreatable=True}"
             d:DesignWidth="3840" d:DesignHeight="2160">
    <ls:UIWidget.ContentTemplate>
        <DataTemplate DataType="ls:Widget">
            <DataTemplate.Resources>
                <BitmapImage x:Key="CastBarBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/target_bar_cast.png"/>
                <BitmapImage x:Key="EnemyCastBarBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/target_bar_cast_enemy.png"/>
                <BitmapImage x:Key="CoopCastBarBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/target_bar_cast_coop.png"/>

                <Style x:Key="CycleButtonStyle" TargetType="ls:LSButton">
                    <Setter Property="Visibility" Value="Hidden"/>
                    <Setter Property="IsEnabled" Value="False"/>
                    <Setter Property="EatInput" Value="False"/>
                    <Setter Property="VerticalAlignment" Value="Center"/>
                    <Setter Property="Width" Value="{StaticResource ScaledControllerHintSizeSmall}"/>
                    <Setter Property="Height" Value="{StaticResource ScaledControllerHintSizeSmall}"/>
                    <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                    <Setter Property="Template" Value="{StaticResource ControllerButton.ImageSwitcher}"/>
                </Style>

                <Storyboard x:Key="CastBarAppearAnim" FillBehavior="Stop">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="CastInfoRoot">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="100"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:0.18" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                </Storyboard>

                <Storyboard x:Key="CastBarDisappearAnim">
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="1"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:1.0" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                    <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="Margin">
                        <SplineThicknessKeyFrame KeyTime="0:0:0.8" Value="0,0,0,0" />
                        <SplineThicknessKeyFrame KeyTime="0:0:1.3" Value="0,-100,0,0" />
                    </ThicknessAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.RenderTransform).(TranslateTransform.Y)" Storyboard.TargetName="CastInfoRoot">
                        <EasingDoubleKeyFrame KeyTime="0:0:0.8" Value="0"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:1.3" Value="-50"/>
                  </DoubleAnimationUsingKeyFrames>
                </Storyboard>

                <Style x:Key="ModifierTextBlock" TargetType="TextBlock">
                    <Setter Property="Foreground" Value="{StaticResource LS_PrimaryColor}"/>
                    <Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_PrimaryColorOutlineColor}"/>
                    <Setter Property="noesis:Text.StrokeThickness" Value="4"/>
                    <Setter Property="FontSize" Value="{StaticResource ScaledSmallishFontSize}"/>
                    <Setter Property="TextWrapping" Value="Wrap"/>
                    <Setter Property="MaxWidth" Value="600"/>
                </Style>

                <Style x:Key="ModifierBorder" TargetType="Border">
                    <Setter Property="CornerRadius" Value="8"/>
                    <Setter Property="BorderThickness" Value="0"/>
                    <Setter Property="Margin" Value="4,0"/>
                    <Setter Property="Border.Effect">
                        <Setter.Value>
                            <DropShadowEffect Direction="270" Color="{StaticResource LS_PrimaryColorDropShadowColor}" ShadowDepth="3.0" BlurRadius="5.0"/>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Border.BorderBrush">
                        <Setter.Value>
                            <SolidColorBrush Color="{StaticResource tint100}" Opacity="0.7"/>
                        </Setter.Value>
                    </Setter>
                </Style>

                <DataTemplate x:Key="AdvantageItemTemplate" DataType="ls:VMAdvantage">
                    <StackPanel Orientation="Horizontal">
                        <TextBlock Style="{StaticResource ModifierTextBlock}" Text="{Binding Source='hd64bfe4cgadadg4468g8b0ag70330ffc717c', Converter={StaticResource TranslatedStringConverter}}" Visibility="{Binding Path='(ItemsControl.AlternationIndex)', RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource CountToVisibilityConverter}}" VerticalAlignment="Center" Margin="-4,0,4,0"/>
                        <TextBlock Style="{StaticResource ModifierTextBlock}" Text="{Binding Description}"/>
                    </StackPanel>
                </DataTemplate>

                <Style x:Key="AdvantageItemStyle" TargetType="ContentPresenter">
                    <Setter Property="Margin" Value="4,0"/>
                </Style>

            </DataTemplate.Resources>

            <Grid x:Name="Root">
                <StackPanel x:Name="MainContainer" HorizontalAlignment="Center" Margin="0,270,0,0" VerticalAlignment="Top" Visibility="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget, Converter={StaticResource NullToHiddenConverter}}">
                    <b:Interaction.Behaviors>
                        <ls:CollectionFilterBehavior x:Name="PositiveModifierBehavior" ItemsSource="{Binding CurrentPlayer.UIData.HitChanceDesc.Modifiers}" Predicate="{Binding Data.PositiveModifierPredicate}"/>
                        <ls:CollectionFilterBehavior x:Name="NegativeModifierBehavior" ItemsSource="{Binding CurrentPlayer.UIData.HitChanceDesc.Modifiers}" Predicate="{Binding Data.NegativeModifierPredicate}"/>
                    </b:Interaction.Behaviors>

                    <!-- Header -->
                    <Grid x:Name="Header">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition/>
                            <ColumnDefinition Width="Auto"/>
                            <ColumnDefinition/>
                        </Grid.ColumnDefinitions>

                        <ContentControl x:Name="SelectPrevious" Grid.Column="0" HorizontalAlignment="Right" VerticalAlignment="Center" Margin="-20" Template="{StaticResource ButtonHint}" Tag="DpadLeftRight" Visibility="Collapsed"/>

                        <TextBlock x:Name="Name" Grid.Column="1" Margin="22,0,12,0" Text="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.Name}" FontSize="{StaticResource ScaledBigFontSize}"  VerticalAlignment="Center" HorizontalAlignment="Center" TextAlignment="Center" Style="{StaticResource HUD.DefaultTextStyle}" FontWeight="SemiBold" Foreground="{StaticResource LS_PrimaryColor}" TextWrapping="Wrap"/>
                        <TextBlock x:Name="LevelText" Grid.Column="2" FontSize="{StaticResource ScaledSmallishFontSize }" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="10,12,0,0" Style="{StaticResource HUD.DefaultTextStyle}" FontWeight="SemiBold" Foreground="{StaticResource LS_PrimaryColor}" TextWrapping="Wrap" Visibility="Hidden">
                        <TextBlock.Text> 
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="hb5a0afd6g0041g45eagb4ecg2af0b5d00d53"/>
                                    <Binding Path="CurrentPlayer.CurrentRegularOrCombatTurnTarget.Stats.Level.Value"/>
                            </MultiBinding>
                        </TextBlock.Text>
                        </TextBlock>

                        <ls:LSButton x:Name="SelectNext" TapTime="{StaticResource HoldTimeShortcuts}" DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='NextObject'}" VerticalAlignment="Center"/>
                    </Grid>

                    <!-- Health bar -->
                    <Control x:Name="HPBarContainer" HorizontalAlignment="Center" Margin="0,-12,0,4"  DataContext="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget}" Template="{StaticResource TargetHealthBarTemplate}"/>

                    <!-- Status Effects -->
                    <ls:AlignableWrapPanel x:Name="StatusHolderHolder" Width="{Binding ActualWidth, ElementName=Root, Converter={StaticResource AddConverter}, ConverterParameter=-1000}" HorizontalAlignment="Center" HorizontalContentAlignment="Center" Margin="0,0,0,0" >
                        <ls:AlignableWrapPanel.OpacityMask>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStop Offset="0" Color="Black"/>
                                    <GradientStop Offset="0.6" Color="Black"/>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </ls:AlignableWrapPanel.OpacityMask>
                        <!-- Concentration shows at start in single line -->
                        <ContentPresenter Content="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget}" ContentTemplate="{StaticResource DefaultConcentrationTemplate}" />
                        <!-- Statuses -->
                        <ItemsControl x:Name="StatusList" ItemsSource="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.StatusEffects}" Visibility="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.StatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}}" ScrollViewer.VerticalScrollBarVisibility="Disabled" BorderBrush="Transparent" Background="Transparent" HorizontalAlignment="Center" ScrollViewer.HorizontalScrollBarVisibility="Disabled" AlternationCount="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.StatusEffects.Count}" ItemTemplate="{StaticResource NamedStatusTemplate}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <ls:AlignableWrapPanel x:Name="StatusWrap" IsItemsHost="True" HorizontalContentAlignment="Center" RenderTransformOrigin="0.5,0.5">
                                        <ls:AlignableWrapPanel.RenderTransform>
                                            <!-- Flip horizontally to change order. Items will do the same to unmirror -->
                                            <ScaleTransform ScaleX="-1"/>
                                        </ls:AlignableWrapPanel.RenderTransform>
                                    </ls:AlignableWrapPanel>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemContainerStyle>
                                <Style TargetType="ContentPresenter">
                                    <Setter Property="Margin" Value="6,0"/>
                                    <Setter Property="Visibility" Value="Collapsed"/>
                                    <Setter Property="RenderTransformOrigin" Value="0.5,0.5"/>
                                    <Setter Property="RenderTransform">
                                        <Setter.Value>
                                            <!-- Undo scale from it's parent container -->
                                            <ScaleTransform ScaleX="-1"/>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <DataTrigger Binding="{Binding (ItemsControl.AlternationIndex), RelativeSource={RelativeSource Self}, Converter={StaticResource LessThanConverter}, ConverterParameter={StaticResource TargetMaxDisplayedStatuses}}" Value="True">
                                            <Setter Property="Visibility" Value="Visible"/>
                                        </DataTrigger>
                                    </Style.Triggers>
                                </Style>
                            </ItemsControl.ItemContainerStyle>
                        </ItemsControl>
                        <TextBlock x:Name="OverflowText" Text="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.StatusEffects.Count, Converter={StaticResource AddConverter}, ConverterParameter={StaticResource InverseTargetMaxDisplayedStatuses}, StringFormat={}+{0}}" Style="{StaticResource TargetInfoTextStyle}" Margin="6,0,0,0" Visibility="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.StatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}, ConverterParameter={StaticResource TargetMaxDisplayedStatuses}}" VerticalAlignment="Center"/>
                    </ls:AlignableWrapPanel>

                    <!-- Modifiers -->
                    <Border x:Name="ModifiersPresenter" Visibility="Collapsed" DataContext="{Binding CurrentPlayer.UIData.HitChanceDesc}" >
                        <Border.Resources>
                            <SolidColorBrush x:Key="NegativeModiferColour" Color="{StaticResource alertColor}" Opacity="0.6"/>
                        </Border.Resources>
                        <StackPanel x:Name="ModifiersPanel" VerticalAlignment="Top" HorizontalAlignment="Center" Orientation="Horizontal" Height="Auto" Visibility="Collapsed" Margin="0,24,0,0">

                            <!-- Positive Modifier -->
                            <ItemsControl ItemsSource="{Binding FilteredItems, ElementName=PositiveModifierBehavior}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Border Style="{StaticResource ModifierBorder}">
                                            <Border.Background>
                                                <SolidColorBrush Color="{StaticResource bonusColor}" Opacity="0.6"/>
                                            </Border.Background>
                                            <StackPanel Orientation="Horizontal" Margin="8,0">
                                                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/targetInfo_deltas_plus.png" Stretch="None" Margin="-8,0" VerticalAlignment="Center"/>
                                                <TextBlock x:Name="Desc" Style="{StaticResource ModifierTextBlock}" Text="{Binding Name}" VerticalAlignment="Center" Margin="4,4"/>
                                            </StackPanel>
                                        </Border>

                                        <!-- If incoming text is empty, then we assume this is a Weapon Enchantment? Whaaaaa? -->
                                        <DataTemplate.Triggers>
                                            <MultiDataTrigger>
                                                <MultiDataTrigger.Conditions>
                                                    <Condition Binding="{Binding Name}" Value=""/>
                                                    <Condition Binding="{Binding BoostType}" Value="WeaponEnchantment"/>
                                                </MultiDataTrigger.Conditions>
                                                <Setter TargetName="Desc" Property="Text" Value="{Binding Source='had4b2edeg74a0g4bb0gac33g11c2ea95079e', Converter={StaticResource TranslatedStringConverter} }"/>
                                            </MultiDataTrigger>
                                        </DataTemplate.Triggers>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>

                            <!-- Advantages -->
                            <Border x:Name="AdvantagesListHolder" Style="{StaticResource ModifierBorder}" Visibility="{Binding Advantages.Count, Converter={StaticResource CountToVisibilityConverter}}">
                                <Border.Background>
                                    <SolidColorBrush Color="{StaticResource bonusColor}" Opacity="0.6"/>
                                </Border.Background>
                                <StackPanel Orientation="Horizontal" Margin="8,0">
                                    <Image Source="{StaticResource IconAdvantage}" Stretch="None" VerticalAlignment="Center"/>
                                    <!-- Temporarily hidden as a test -->
                                    <!--<TextBlock Style="{StaticResource ModifierTextBlock}" Text="{Binding Source='h986f906agb172g4956g9567g5cbd32150349', Converter={StaticResource TranslatedStringConverter}, StringFormat='\ {0}:'}" VerticalAlignment="Center" Margin="0,4"/> -->
                                    <ItemsControl ItemsSource="{Binding Advantages}" AlternationCount="{Binding Advantages.Count}" ItemTemplate="{StaticResource AdvantageItemTemplate}" ItemContainerStyle="{StaticResource AdvantageItemStyle}" VerticalAlignment="Center">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>
                                </StackPanel>
                            </Border>

                            <!-- Negative Modifier -->
                            <ItemsControl ItemsSource="{Binding FilteredItems, ElementName=NegativeModifierBehavior}">
                                <ItemsControl.ItemTemplate>
                                    <DataTemplate>
                                        <Border Style="{StaticResource ModifierBorder}" Background="{StaticResource NegativeModiferColour}">
                                            <StackPanel Orientation="Horizontal" Margin="8,0">
                                                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/targetInfo_deltas_minus.png" Stretch="None" Margin="-8,0" VerticalAlignment="Center"/>
                                                <TextBlock Style="{StaticResource ModifierTextBlock}" Text="{Binding Name}" VerticalAlignment="Center" Margin="4,4"/>
                                            </StackPanel>
                                        </Border>
                                    </DataTemplate>
                                </ItemsControl.ItemTemplate>
                                <ItemsControl.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <StackPanel Orientation="Horizontal"/>
                                    </ItemsPanelTemplate>
                                </ItemsControl.ItemsPanel>
                            </ItemsControl>

                            <!-- Disadvantages -->
                            <Border x:Name="DisadvantagesListHolder" Style="{StaticResource ModifierBorder}" Visibility="{Binding Disadvantages.Count, Converter={StaticResource CountToVisibilityConverter}}"  Background="{StaticResource NegativeModiferColour}">
                                <StackPanel Orientation="Horizontal" Margin="8,0">
                                    <Image Source="{StaticResource IconDisadvantage}" Stretch="None" VerticalAlignment="Center"/>
                                    <!-- Temporarily hidden as a test -->
                                    <!--<TextBlock Style="{StaticResource ModifierTextBlock}" Text="{Binding Source='h34944186g018cg474dg96d8gd56417c3e086', Converter={StaticResource TranslatedStringConverter}, StringFormat='\ {0}:'}" VerticalAlignment="Center"/> -->
                                    <ItemsControl ItemsSource="{Binding Disadvantages}" AlternationCount="{Binding Disadvantages.Count}" ItemTemplate="{StaticResource AdvantageItemTemplate}" ItemContainerStyle="{StaticResource AdvantageItemStyle}" VerticalAlignment="Center">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>
                                </StackPanel>
                            </Border>
                        </StackPanel>
                    </Border>

                    <!-- This is a hidden version of the panel so we can check it's width to collapse the visible status panels labels -->
                    <StackPanel x:Name="StatusHolderHolderHidden" HorizontalAlignment="Center" Orientation="Horizontal" Margin="0,0,0,0" Visibility="Hidden">

                        <!-- Concentration shows at start in single line -->
                        <ContentPresenter Content="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget}" ContentTemplate="{StaticResource DefaultConcentrationTemplate}" />
                        <!-- Statuses -->
                        <ItemsControl x:Name="StatusListHidden" ItemsSource="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.StatusEffects}" Visibility="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.StatusEffects.Count, Converter={StaticResource CountToVisibilityConverter}}" ScrollViewer.VerticalScrollBarVisibility="Disabled" BorderBrush="Transparent" Background="Transparent" HorizontalAlignment="Center" ScrollViewer.HorizontalScrollBarVisibility="Disabled" AlternationCount="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.StatusEffects.Count}" ItemTemplate="{StaticResource HiddenNamedStatusTemplate}">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel IsItemsHost="True" Orientation="Horizontal" >
                                    </StackPanel>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                            <ItemsControl.ItemContainerStyle>
                                <Style TargetType="ContentPresenter">
                                    <Setter Property="Margin" Value="6,0"/>
                                </Style>
                            </ItemsControl.ItemContainerStyle>
                        </ItemsControl>
                    </StackPanel>

                </StackPanel>
                <!--Cast notification for the target-->
                <ItemsControl x:Name="CastInfoContainer" ItemsSource="{Binding CurrentPlayer.UIData.CastInfo}" VerticalAlignment="Bottom" Margin="0,0,0,460">
                    <ItemsControl.ItemTemplate>
                        <DataTemplate DataType="ls:VMCastInfo">
                            <Grid x:Name="CastInfoRoot" MinWidth="800" HorizontalAlignment="Center">
                                <Grid.RenderTransform>
                                    <TranslateTransform />
                                </Grid.RenderTransform>
                                <Grid.Tag>
                                    <MultiBinding Converter="{StaticResource EqualConverter}">
                                        <Binding RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}" Path="DataContext.CurrentPlayer.UserId"/>
                                        <Binding Path="OwnerUserID"/>
                                    </MultiBinding>
                                </Grid.Tag>
                                <ls:LSNineSliceImage x:Name="BGImage" Slices="180,40" Padding="120,24" ImageSource="{StaticResource CastBarBackground}">
                                    <Grid HorizontalAlignment="Center">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                            <ColumnDefinition Width="Auto"/>
                                        </Grid.ColumnDefinitions>

                                        <TextBlock x:Name="CastInfoConcentration" Grid.Column="0" Visibility="Collapsed" VerticalAlignment="Center" TextAlignment="Left" Margin="0,-6,20,0" Foreground="{StaticResource LS_accent100TxtColor}" noesis:Text.Stroke="Black" noesis:Text.StrokeThickness="4"  FontWeight="DemiBold" FontSize="{StaticResource ScaledDefaultFontSize}" >
                                            <Run Text="{Binding Source='h7e8c24aeg8d1ag401ag9feag4fbb7cbde48d', Converter={StaticResource TranslatedStringConverter}}"/><Run Text="{Binding Source='hb897c56egaa6fg460bg8676g8ebfa0340954', Converter={StaticResource TranslatedStringConverter}}"/>
                                        </TextBlock>

                                        <Rectangle x:Name="casterIcon" Grid.Column="1" Fill="{Binding Caster.Icon}" Width="90" Height="90" Visibility="Collapsed"/>
                                        <Image x:Name="actionIcon" Grid.Column="1" Width="90" Height="90" Stretch="Fill" Visibility="Collapsed" />
                                        <TextBlock x:Name="CastText" Grid.Column="2" HorizontalAlignment="Center" Margin="20,-6,20,0" TextAlignment="Left" VerticalAlignment="Center" noesis:Text.Stroke="Black" noesis:Text.StrokeThickness="4" FontWeight="DemiBold" FontSize="{StaticResource ScaledDefaultFontSize}">
                                        <b:Interaction.Behaviors>
                                            <ls:CtxTransStringRunGeneratorBehavior Source="{Binding CastText}"/>
                                        </b:Interaction.Behaviors>
                                        </TextBlock>
                                    </Grid>
                                </ls:LSNineSliceImage>
                            </Grid>
                            <DataTemplate.Triggers>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsItemSource}" Value="True" />
                                        <Condition Value="False">
                                            <Condition.Binding>
                                                <MultiBinding Converter="{StaticResource EqualConverter}">
                                                    <Binding Path="IconName"/>
                                                    <Binding Source="unknown"/>
                                                </MultiBinding>
                                            </Condition.Binding>
                                        </Condition>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="actionIcon" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="actionIcon" Property="Source">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource IconIdToSourceConverter}" ConverterParameter="{StaticResource FallBackIconPath}" >
                                                <Binding Source="Assets/ControllerUIIcons/items_png/"/>
                                                <Binding Path="IconName"/>
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>

                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsItemSource}" Value="False" />
                                        <Condition Value="False">
                                            <Condition.Binding>
                                                <MultiBinding Converter="{StaticResource EqualConverter}">
                                                    <Binding Path="IconName"/>
                                                    <Binding Source="unknown"/>
                                                </MultiBinding>
                                            </Condition.Binding>
                                        </Condition>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="actionIcon" Property="Visibility" Value="Visible" />
                                    <Setter TargetName="actionIcon" Property="Source">
                                        <Setter.Value>
                                            <MultiBinding Converter="{StaticResource IconIdToSourceConverter}" ConverterParameter="{StaticResource FallBackIconPath}" >
                                                <Binding Source="Assets/ControllerUIIcons/skills_png/"/>
                                                <Binding Path="IconName"/>
                                            </MultiBinding>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>

                                <DataTrigger Binding="{Binding IconName}" Value="unknown">
                                    <Setter TargetName="casterIcon" Property="Visibility" Value="Visible" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding IconName}" Value="{x:Null}">
                                    <Setter TargetName="casterIcon" Property="Visibility" Value="Visible" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding IsConcentrationSpell}" Value="True">
                                    <Setter TargetName="CastInfoConcentration" Property="Visibility" Value="Visible" />
                                </DataTrigger>
                                <EventTrigger RoutedEvent="FrameworkElement.Loaded">
                                    <BeginStoryboard  x:Name="AppearStoryboard" Storyboard="{StaticResource CastBarAppearAnim}" />
                                </EventTrigger>
                                <EventTrigger RoutedEvent="FrameworkElement.Unloaded">
                                    <StopStoryboard BeginStoryboardName="AppearStoryboard" />
                                    <StopStoryboard BeginStoryboardName="DisappearStoryboard" />
                                </EventTrigger>

                                <DataTrigger Value="True">
                                    <DataTrigger.Binding>
                                        <MultiBinding Converter="{StaticResource GreaterOrEqualThanMultiConverter}">
                                            <Binding Path="CastProgressPercentage"/>
                                            <Binding Path="CastTime"/>
                                        </MultiBinding>
                                    </DataTrigger.Binding>
                                    <DataTrigger.EnterActions>
                                        <BeginStoryboard x:Name="DisappearStoryboard" Storyboard="{StaticResource CastBarDisappearAnim}" />
                                    </DataTrigger.EnterActions>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding ElementName=CastInfoRoot, Path=Tag}" Value="False"/>
                                        <Condition Binding="{Binding Caster.PlayerRelation}" Value="Player"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="BGImage" Property="ImageSource" Value="{StaticResource CoopCastBarBackground}"/>
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding Caster.PlayerRelation}" Value="Enemy">
                                    <Setter TargetName="BGImage" Property="ImageSource" Value="{StaticResource EnemyCastBarBackground}"/>
                                </DataTrigger>
                            </DataTemplate.Triggers>
                        </DataTemplate>
                    </ItemsControl.ItemTemplate>
                </ItemsControl>
            </Grid>
            <DataTemplate.Triggers>
                <DataTrigger Binding="{Binding CurrentPlayer.UIData.CanShowTargetInfo}" Value="False">
                    <Setter TargetName="MainContainer" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.AreRadialsOpen}" Value="True"  />
                        <Condition Binding="{Binding ActualHeight, ElementName=StatusHolderHolder, Converter={StaticResource GreaterThanConverter},  ConverterParameter=120}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter Property="OpacityMask" TargetName="StatusHolderHolder">
                        <Setter.Value>
                            <LinearGradientBrush StartPoint="0,0" EndPoint="0,1">
                                <LinearGradientBrush.GradientStops>
                                    <GradientStop Offset="0" Color="Black"/>
                                    <GradientStop Offset="0.8" Color="Transparent"/>
                                </LinearGradientBrush.GradientStops>
                            </LinearGradientBrush>
                        </Setter.Value>
                </Setter>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.AreRadialsOpen}" Value="True"  />
                        <Condition Binding="{Binding ActualHeight, ElementName=StatusHolderHolder, Converter={StaticResource GreaterThanConverter},  ConverterParameter=180}" Value="True" />
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="StatusHolderHolder" Property="Height" Value="190" />
                   
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Layout}" Value="Common"/>
                        <Condition Binding="{Binding Data.AspectRatio, Converter={StaticResource LessThanConverter}, ConverterParameter=0.75}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="StatusHolderHolder" Property="MaxWidth" Value="{Binding ActualWidth, ElementName=Root, Converter={StaticResource AddConverter}, ConverterParameter=-1000}" />
                  
                </MultiDataTrigger>
               
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.CanCycleTargets}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.UIData.InPlayerPanels}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="SelectPrevious" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="SelectNext" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="SelectPrevious" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="SelectNext" Property="IsEnabled" Value="True"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.Type}" Value="Character">
                    <Setter TargetName="LevelText" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.UIData.ActiveState}" Value="ActiveSearch">
                    <Setter TargetName="MainContainer" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>

                <!-- Enemy Combatant Turn -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="True"/>
                        <Condition Binding="{Binding Path=CurrentPlayer.SelectedCharacter.IsCurrentTurn}" Value="False"/>
                        <Condition Binding="{Binding Path=CurrentPlayer.CurrentTarget, Converter={StaticResource NullToBoolFalseConverter}}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="SelectPrevious" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="SelectNext" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="SelectPrevious" Property="Visibility" Value="Collapsed" />
                    <Setter TargetName="SelectNext" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="LevelText" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="HPBarContainer" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="StatusHolderHolder" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding Path=CurrentPlayer.CurrentRegularOrCombatTurnTarget}" Value="{x:Null}"/>
                        <Condition Binding="{Binding Path=CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="True"/>
                        <Condition Binding="{Binding Path=CurrentPlayer.SelectedCharacter.IsCurrentTurn}" Value="True"/>
                        <Condition Binding="{Binding Path=CurrentPlayer.UIData.CanTarget}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="HPBarContainer" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="StatusHolderHolder" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="MainContainer" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="Name" Property="Text" Value="{Binding Source='h7e1d36d1g5905g4d88ga9b2g3842755f5834', Converter={StaticResource TranslatedStringConverter}}"/>
                    <Setter TargetName="Name" Property="Opacity" Value="0.7"/>
                    <Setter TargetName="SelectPrevious" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="SelectNext" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="SelectPrevious" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="SelectNext" Property="IsEnabled" Value="True"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.UIData.InteractableObjects.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                    <Setter TargetName="SelectPrevious" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="SelectNext" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="SelectPrevious" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="SelectNext" Property="IsEnabled" Value="True"/>
                </DataTrigger>


                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.HitChanceDesc.ShowDescription}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.CurrentRegularOrCombatTurnTarget.Stats.Health.IsValid}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <!-- IF: Hidden as a test, see DamagePreview <Setter TargetName="HitChancePanel" Property="Visibility" Value="Visible"/>-->
                    <Setter TargetName="ModifiersPresenter" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.UIData.HitChanceDesc.Modifiers.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                    <Setter TargetName="ModifiersPanel" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.UIData.HitChanceDesc.Advantages.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                    <Setter TargetName="ModifiersPanel" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.UIData.HitChanceDesc.Disadvantages.Count, Converter={StaticResource GreaterThanConverter}, ConverterParameter=0}" Value="True">
                    <Setter TargetName="ModifiersPanel" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.UIData.AreRadialsOpen}" Value="True">
                    <Setter TargetName="ModifiersPresenter" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="CastInfoContainer" Property="Visibility" Value="Hidden"/>
                </DataTrigger>
            </DataTemplate.Triggers>
        </DataTemplate>
    </ls:UIWidget.ContentTemplate>
</ls:UIWidget>