<ls:UIWidget x:Name="SensitiveSettings"
             ls:UIWidget.ContextName="FirstTimeSetup"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
    		 xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
			 mc:Ignorable="d"
             d:DataContext="{x:Type ls:DCFirstTimeSetup}"
             d:DesignHeight="2160" d:DesignWidth="3840"
             ls:UIWidget.Focusable="False">

    <ls:UIWidget.Resources>
        <ResourceDictionary Source="../Library/OptionTemplates_c.xaml"/>
    </ls:UIWidget.Resources>

    <ls:UIWidget.Template>
        <ControlTemplate TargetType="ls:UIWidget">
            <ControlTemplate.Resources>
                <BitmapImage x:Key="BG3Background" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/SignUp/STUB_BG3_background.png"/>
                <BitmapImage x:Key="RoomBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Options/sensitiveBG.png"/>
                <BitmapImage x:Key="BackgroundMask" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/backgroundMask.png"/>
                <BitmapImage x:Key="FooterFade" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/DMSettings/fade_footer.png" />
            </ControlTemplate.Resources>
            
            <Border>
                <Border.Background>
                    <ImageBrush ImageSource="{StaticResource BG3Background}" Stretch="UniformToFill"/>
                </Border.Background>

                <Grid x:Name="contentRoot" Visibility="Collapsed" MaxWidth="{StaticResource DesignedContentMaxWidth}">
                    <Grid.RowDefinitions>
                        <RowDefinition Height="200"/>
                        <RowDefinition/>
                        <RowDefinition Height="220"/>
                    </Grid.RowDefinitions>

                    <b:Interaction.Triggers>
                        <b:EventTrigger EventName="Loaded">
                            <ls:SetMoveFocusAction TargetName="SensitiveSettings"/>
                        </b:EventTrigger>
                    </b:Interaction.Triggers>

                    <Image Grid.Row="0" Grid.RowSpan="3" x:Name="Background" Source="{StaticResource RoomBackground}" Stretch="None">
                        <Image.OpacityMask>
                            <ImageBrush ImageSource="{StaticResource BackgroundMask}" Stretch="Fill"/>
                        </Image.OpacityMask>
                    </Image>

                    <Image Grid.Row="1" Grid.ColumnSpan="2" Source="{StaticResource FooterFade}" Width="1800" Height="800" Stretch="Fill" VerticalAlignment="Bottom"/>

                    <TextBlock Grid.Row="0" 
                               Text="{Binding Source='ha1984b50g30d8g4260ga883g62741ba046fc', Converter={StaticResource TranslatedStringConverter}}" 
                               x:Name="Title" 
                               HorizontalAlignment="Center" 
                               VerticalAlignment="Center" 
                               FontSize="{StaticResource ScaledMassiveFontSize}" 
                               Foreground="{StaticResource LS_tint100}"/>

                    <StackPanel Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Bottom">

                        <TextBlock ls:TextBlockFormatter.SourceText="{Binding Source='h446f8563ge5b3g4f94g8fa9g15f5e689f734', Converter={StaticResource TranslatedStringConverter}}"
                                   FontSize="{StaticResource ScaledDefaultFontSize}"
                                   Foreground="{StaticResource LS_accent75TxtColor}"
                                   TextAlignment="Center" TextWrapping="Wrap" 
                                   MaxWidth="2000"/>

                        <ItemsControl x:Name="Options" 
                                      AlternationCount="{Binding Options.Count}" ItemsSource="{Binding Options}" 
                                      Template="{StaticResource MinimalItemsControlTemplate}" 
                                      ItemContainerStyle="{StaticResource OptionStyle}" 
                                      ScrollViewer.HorizontalScrollBarVisibility="Disabled" 
                                      HorizontalAlignment="Center" 
                                      Margin="0,80,0,20">
                            <ItemsControl.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Vertical"/>
                                </ItemsPanelTemplate>
                            </ItemsControl.ItemsPanel>
                        </ItemsControl>
                    </StackPanel>

                    <ls:LSButton Grid.Row="2" x:Name="NextButton"
                                 ContentTemplate="{StaticResource ControllerButtonHint}" 
                                 Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
                                 BoundEvent="UIAccept"
                                 Margin="{StaticResource ButtonHint.Margin}" 
                                 HorizontalAlignment="Center" 
                                 VerticalAlignment="Bottom"
                                 Tag="{Binding Source=h1c1625b0gb1dcg4544gb7f3ga805c2bdb198, Converter={StaticResource TranslatedStringConverter}}" 
                                 Command="{Binding CustomEvent}"
                                 SoundID="UI_Shared_Accept"
                                 CommandParameter="OpenGammaCalibration"/>
                </Grid>

                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Loaded">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding SkipSetup}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding HasHDR}" Operator="Equal" RightOperand="True"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>

                        <b:InvokeCommandAction Command="{Binding CustomEvent}" CommandParameter="OpenHDR"/>
                    </b:EventTrigger>

                    <b:EventTrigger EventName="Loaded">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding SkipSetup}" Operator="Equal" RightOperand="True"/>
                                    <b:ComparisonCondition LeftOperand="{Binding HasHDR}" Operator="Equal" RightOperand="False"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>

                        <b:InvokeCommandAction Command="{Binding CustomEvent}" CommandParameter="OpenGammaCalibration"/>
                    </b:EventTrigger>

                    <b:EventTrigger EventName="Loaded">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding SkipSetup}" Operator="Equal" RightOperand="False"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>

                        <b:ChangePropertyAction TargetName="contentRoot" PropertyName="Visibility" Value="Visible"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </Border>

            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding HasHDR}" Value="True">
                    <Setter TargetName="NextButton" Property="CommandParameter" Value="OpenHDR"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Template>

</ls:UIWidget>