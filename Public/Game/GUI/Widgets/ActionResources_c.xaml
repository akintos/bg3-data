<ls:UIWidget
    x:Name="ActionResources_c"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
    xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
    mc:Ignorable="d">

    <ls:UIWidget.Template>
            <ControlTemplate TargetType="ls:UIWidget">
            <ControlTemplate.Resources>

                <ImageSource x:Key="endTurnHighlight">/GustavNoesisGUI;component/Assets/HUD_c/endTurnGlow.png</ImageSource>
                <ImageSource x:Key="callAlliesIcon">/GustavNoesisGUI;component/Assets/HUD_c/c_callAllies_ico_d.png</ImageSource>
                <ImageSource x:Key="callAlliesIconSwirl">pack://application:,,,/GustavNoesisGUI;component/Assets/HUD_c/c_callAllies_swirl.png</ImageSource>
                
                <Storyboard x:Key="HideResourceBarStoryboard" FillBehavior="Stop">
                    <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="0:0:0.3" From="1" To="0" Storyboard.TargetName="Root"/>
                </Storyboard>
                <Storyboard x:Key="ShowResourceBarStoryboard" FillBehavior="Stop">
                    <DoubleAnimation Storyboard.TargetProperty="Opacity" Duration="0:0:0.3" From="0" To="1" Storyboard.TargetName="Root"/>
                </Storyboard>
                <Storyboard x:Key="GlowEndTurnButton" FillBehavior="Stop" RepeatBehavior="Forever">

                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="endTurnGlow" AutoReverse="True" >
                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0.4"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:0.9" Value="1"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:1.1" Value="1"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:2.2" Value="0.4"/>
                    </DoubleAnimationUsingKeyFrames>
                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity" Storyboard.TargetName="glowBG" AutoReverse="True" >
                        <EasingDoubleKeyFrame KeyTime="0:0:0.0" Value="0"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:0.9" Value="1"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:1.1" Value="1"/>
                        <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0"/>
                    </DoubleAnimationUsingKeyFrames>
                </Storyboard>
            </ControlTemplate.Resources>
            <Grid x:Name="Root" VerticalAlignment="Bottom" IsEnabled="False" Opacity="0" d:DataContext="{StaticResource {x:Type ls:Widget}}">
                <b:Interaction.Behaviors>
                    <ls:NeighboringUpcastsBehavior x:Name="UpcastBehavior" UpcastList="{Binding CurrentPlayer.UIData.ActiveTask.RootCastSpell.SpellUpcast}" CurrentUpcast="{Binding CurrentPlayer.UIData.ActiveTask.Upcast}"/>
                </b:Interaction.Behaviors>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition x:Name="resourceBarLeftPadding" Width="600"/>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition x:Name="resourceBarRightPadding" Width="600"/>
                </Grid.ColumnDefinitions>

                <StackPanel x:Name="ResourceContainer" Grid.Column="1" Orientation="Vertical" HorizontalAlignment="Stretch"  VerticalAlignment="Bottom" Margin="0,0,0,46"  >


                    <StackPanel x:Name="ResourceContainerPrompts" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,0,0,14" Style="{StaticResource ButtonHint.Container.BaseStyle}">
                        <Grid x:Name="EndTurnButtonHolder" VerticalAlignment="Bottom" Visibility="{Binding DataContext.CurrentPlayer.SelectedCharacter.CanEndTurn, Converter={StaticResource BoolToVisibleConverter}, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" >

                            <ls:LSNineSliceImage x:Name="glowBG" ImageSource="{StaticResource endTurnHighlight}" Height="264"  HorizontalAlignment="Stretch" Slices="140,0,40,0" Margin="-42,-86,-100,-100" Opacity="0">
                                <ls:LSNineSliceImage.OpacityMask>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                        <LinearGradientBrush.GradientStops>
                                            <GradientStop Offset="1" Color="Transparent"/>
                                            <GradientStop Offset="0.9" Color="Transparent"/>
                                            <GradientStop Offset="0" Color="Black"/>

                                        </LinearGradientBrush.GradientStops>
                                    </LinearGradientBrush>
                                </ls:LSNineSliceImage.OpacityMask>

                            </ls:LSNineSliceImage>
                          
                                <ls:LSButton x:Name="EndTurnButton" BoundEvent="UIEndTurn" Tag="{Binding Source='h917f2b48g8735g4f9fgb529ga520b53eb2ed', Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Center" HorizontalAlignment="Center"
                                 ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIEndTurn, Converter={StaticResource FindInputEventConverter}}" FlowDirection="LeftToRight" Command="{Binding Path=DataContext.EndTurn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" 
                             CommandParameter="ActionSelect">
                                        <ls:LSButton.Effect>
                                            <DropShadowEffect x:Name="endTurnGlow" BlurRadius="70" ShadowDepth="3" Opacity="0" Color="White"/>
                                        </ls:LSButton.Effect>
                                    </ls:LSButton>

                        </Grid>


                        <StackPanel x:Name="UpcastContainer" Orientation="Horizontal"  HorizontalAlignment="Center" VerticalAlignment="Bottom" Visibility="Collapsed" Effect="{StaticResource HUD.DropShadow}">
                            <ls:LSInputBinding x:Name="LowerUpcast" Command="{Binding LaunchUpcastCommand}" BoundEvent="UISelectionDown" IsEnabled="{Binding LowerUpcast, ElementName=UpcastBehavior, ConverterParameter={StaticResource NullToBoolFalseConverter}}" CommandParameter="{Binding LowerUpcast, ElementName=UpcastBehavior}"/>
                            <ls:LSInputBinding x:Name="HigherUpcast" Command="{Binding LaunchUpcastCommand}" BoundEvent="UISelectionUp" IsEnabled="{Binding HigherUpcast, ElementName=UpcastBehavior, ConverterParameter={StaticResource NullToBoolFalseConverter}}" CommandParameter="{Binding HigherUpcast, ElementName=UpcastBehavior}"/>
                            <ContentControl x:Name="UpcastHint" Template="{StaticResource ButtonHint}" Tag="DpadUpDown" Height="88"/>
                            <TextBlock x:Name="UpcastLabel" Text="{Binding Source='h0f8acaadgd1f6g4a7ega71ageda041426536', Converter={StaticResource TranslatedStringConverter}}" Margin="-6,0,0,0" VerticalAlignment="Center" Style="{StaticResource BtnHint.StrokedTextStyle}"/>
                        </StackPanel>

                        <ls:LSButton x:Name="ForceCastButton" Margin="3,16,3,-16" Style="{StaticResource ControllerHoldButtonStyle}" DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}" Command="{Binding DataContext.ForceCastCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Tag="{Binding Source='h2bb01606gdea8g4ae9gbab7ge50b79a088dc', Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Bottom" Visibility="Collapsed" ls:LSButton.EatInput="False"/>

                        <!-- Swap back to a character who actually has a turn-->
                        <ls:LSButton x:Name="BackToPlayableCombatantButton" Margin="3,0,3,0"  BoundEvent="UIAccept" Command="{Binding SelectActiveCharacterCombatant}" Tag="{Binding Source='ha369beabgfe8ag40d5g8effgb31135fe3e6a', Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Bottom" HorizontalAlignment="Center" Visibility="Collapsed"
                                 ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIAccept, Converter={StaticResource FindInputEventConverter}}" FlowDirection="LeftToRight"/>

                        <!-- Cancel End Turn -->
                        <ls:LSButton x:Name="CancelEndTurnButton" Margin="3,0,3,0"  BoundEvent="UIEndTurn" Command="{Binding Path=DataContext.CancelEndTurn, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}" Tag="{Binding Source='h22faeb36g83adg4a12g97d5g2dfe7deb4b35', Converter={StaticResource TranslatedStringConverter}}" Visibility="Collapsed" VerticalAlignment="Bottom" HorizontalAlignment="Center"
                                 ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIEndTurn, Converter={StaticResource FindInputEventConverter}}" FlowDirection="LeftToRight" SoundID="UI_HUD_Hotbar_EndTurn"/>

                        <!-- Action Wheel Prompt -->
                        <ls:LSButton x:Name="ActionWheelButton" Margin="3,0,3,0"  Visibility="Collapsed" Tag="{Binding Source='h1988a9a5g8b63g4d67gb237ga5ec8f73f748', Converter={StaticResource TranslatedStringConverter}}" VerticalAlignment="Center" HorizontalAlignment="Center"
                                 ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UITabNext, Converter={StaticResource FindInputEventConverter}}" FlowDirection="LeftToRight" />

                        <!-- Call Allies -->
                        <StackPanel x:Name="callForthAllies" Orientation="Horizontal" Visibility="{Binding CurrentPlayer.SelectedCharacter.CallAllies, Converter={StaticResource NullToCollapsedConverter}}" VerticalAlignment="Center" HorizontalAlignment="Left" Margin="22,0,0,0">
                            <ls:LSButton x:Name="LaunchCallAlliesBtn" Style="{StaticResource ControllerHoldButtonStyle}" VerticalAlignment="Bottom" EatInput="False"
                                 DataContext="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICallAllies'}"
                                 IsEnabled="{Binding DataContext.CurrentPlayer.UIData.AreRadialsOpen, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource InvertBoolConverter}}"
                                 Visibility="{Binding DataContext.CurrentPlayer.UIData.AreRadialsOpen, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}, Converter={StaticResource BoolToCollapsedConverter}}"
                                 HoldDelay="{StaticResource HoldTimeShortcuts}"
                                 Command="{Binding DataContext.CustomEvent, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
                                 CommandParameter="OpenActionRadialsAndCallAllies"
                                 Tag="{Binding Source='h8e97fb57g8443g4904g884bge82dd9d40aa3', Converter={StaticResource TranslatedStringConverter}}" />
                            <Grid Margin="-30,0,0,-44" >
                                <Ellipse Opacity="0.6" Height="160" Width="160" >
                                    <Ellipse.Fill>
                                        <RadialGradientBrush>
                                            <GradientStop Color="Black" Offset="0"/>
                                            <GradientStop Color="Black" Offset="0.5"/>
                                            <GradientStop Color="Transparent" Offset="1"/>
                                        </RadialGradientBrush>
                                    </Ellipse.Fill>
                                </Ellipse>
                                <Image x:Name="callAllliesSwirl" Opacity="0.6" Source="{StaticResource callAlliesIconSwirl}" RenderTransformOrigin="0.5 0.5" Height="180" Width="180" Stretch="Fill">
                                    <Image.RenderTransform>
                                        <RotateTransform Angle="0"/>
                                    </Image.RenderTransform>
                                </Image>
                                <Image x:Name="CallAlliesIcon" Source="{StaticResource callAlliesIcon}" Height="160" Width="160" Stretch="Fill"/>
                            </Grid>
                        </StackPanel>
                    </StackPanel>
                    <!--EXTRA STATUS NOTIFICATIONS-->
                    <!--As per CursorText - however differnt strings, differnt location-->
                    <ItemsControl x:Name="CapabilitiesErrors" ItemsSource="{Binding CurrentPlayer.SelectedCharacter.ModifiedCapabilities}" AlternationCount="{Binding ItemsSource.Count, RelativeSource={RelativeSource Self}}" VerticalAlignment="Bottom" HorizontalAlignment="Center" Height="{Binding Path=ActualHeight, ElementName=Message}">
                        <b:Interaction.Behaviors>
                            <ls:CapabilityListSelectorBehavior x:Name="CapabilityListSelectorBehavior" 
                                                                       CapabilitiesCollection="{Binding CurrentPlayer.SelectedCharacter.ModifiedCapabilities}"
                                                                       CharacterIsInTurnBasedMode="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}"
                                                                       CharacterIsShapeshifted="{Binding CurrentPlayer.SelectedCharacter.IsShapeShifted}"
                                                                       PlayerCurrentTaskType="{Binding CurrentPlayer.UIData.ActiveTask.PreviewType}"/>
                        </b:Interaction.Behaviors>

                        <ItemsControl.ItemContainerStyle>
                            <Style TargetType="ContentPresenter">
                                <Setter Property="Visibility" Value="Collapsed"/>
                                <Style.Triggers>
                                    <!-- Show only the first one -->
                                    <DataTrigger Value="True">
                                        <DataTrigger.Binding>
                                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                                <Binding Path="."/>
                                                <Binding Path="FirstVisibleElement" ElementName="CapabilityListSelectorBehavior"/>
                                            </MultiBinding>
                                        </DataTrigger.Binding>
                                        <Setter Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ItemsControl.ItemContainerStyle>
                        <ItemsControl.ItemTemplate>
                            <DataTemplate DataType="{x:Type ls:VMCapabilityModifier}">
                                <DataTemplate.Resources>
                                    <BitmapImage x:Key="CastBarBackground" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/TargetInfo/target_bar_cast.png"/>
                                    <Style x:Key="CursorErrorTextStyle" TargetType="TextBlock">
                                        <Setter Property="Foreground" Value="{StaticResource LS_tint100}"/>
                                        <Setter Property="FontSize" Value="{StaticResource DefaultFontSize}"/>
                                        <Setter Property="noesis:Text.StrokeThickness" Value="6"/>
                                        <Setter Property="noesis:Text.Stroke" Value="{StaticResource LS_TextOutlineColor}"/>
                                    </Style>
                                </DataTemplate.Resources>

                                <ls:LSNineSliceImage x:Name="MessageBlock" HorizontalAlignment="Center" Width="{Binding ActualWidth, ElementName=Message, Converter={StaticResource AddConverter}, ConverterParameter=140}" MinWidth="720"
                                         Style="{StaticResource ResourceBar9Slice}" IconWidth="500" Visibility="Collapsed">

                                    <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" Effect="{StaticResource HUD.DropShadow}" Margin="0,0,0,6">
                                        <TextBlock x:Name="Message" Style="{StaticResource CursorErrorTextStyle}"/>
                                        <TextBlock x:Name="Cause" Style="{StaticResource CursorErrorTextStyle}" Visibility="{Binding Cause, Converter={StaticResource NullToCollapsedConverter}, ConverterParameter='EmptyString'}">
                                            <TextBlock.Text>
                                                <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                                    <Binding Source="hb19f530dgfeb2g4d13g8d64ga8216f364f67"/>
                                                    <Binding  Path="Cause"/>
                                                </MultiBinding>
                                            </TextBlock.Text>
                                        </TextBlock>
                                    </StackPanel>

                                </ls:LSNineSliceImage>

                                <DataTemplate.Triggers>

                                    <DataTrigger Binding="{Binding Type}" Value="LostControl">
                                        <Setter TargetName="MessageBlock" Property="Visibility" Value="Visible"/>
                                    </DataTrigger>

                                    <DataTrigger Binding="{Binding Type}" Value="ActionsBlocked">
                                        <Setter TargetName="Message" Property="Text" Value="{Binding Source='hc26b3ee1g8586g4fc5gbc1dg14711bc21a4b', Converter={StaticResource TranslatedStringConverter}}"/>
                                        <Setter TargetName="MessageBlock" Property="Visibility" Value="Visible"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding Type}" Value="BonusActionsBlocked">
                                        <Setter TargetName="Message" Property="Text" Value="{Binding Source='hc9c9197cg997fg4dcagad83g7fd70e8c645e', Converter={StaticResource TranslatedStringConverter}}"/>
                                        <Setter TargetName="MessageBlock" Property="Visibility" Value="Visible"/>
                                    </DataTrigger>

                                    <DataTrigger Binding="{Binding Type}" Value="SpellcastingBlocked">
                                        <Setter TargetName="Message" Property="Text" Value="{Binding Source='h016d4e05g4042g42c9g8e4cg351088deddf5', Converter={StaticResource TranslatedStringConverter}}"/>
                                        <Setter TargetName="MessageBlock" Property="Visibility" Value="Visible"/>
                                    </DataTrigger>

                                    <DataTrigger Binding="{Binding Type}" Value="MovementBlocked">
                                        <Setter TargetName="Message" Property="Text" Value="{Binding Source='h7760a99cg8a58g4555gb0f1g0e3e2b872f66', Converter={StaticResource TranslatedStringConverter}}"/>
                                        <Setter TargetName="MessageBlock" Property="Visibility" Value="Visible"/>
                                    </DataTrigger>

                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Type}" Value="LostControl"/>
                                            <Condition Binding="{Binding Value}" Value="Incapacitated"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="Message" Property="Text" Value="{Binding Source='h5f3c3defgdf33g4bbbgafc5g487ca817cda4', Converter={StaticResource TranslatedStringConverter}}"/>
                                    </MultiDataTrigger>

                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Type}" Value="LostControl"/>
                                            <Condition Binding="{Binding Value}" Value="KnockedDown"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="Message" Property="Text" Value="{Binding Source='h296f3937g9cdcg4613ga574g5e9f11dbd095', Converter={StaticResource TranslatedStringConverter}}"/>
                                    </MultiDataTrigger>

                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Type}" Value="LostControl"/>
                                            <Condition Binding="{Binding Value}" Value="Downed"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="Message" Property="Text" Value="{Binding Source='hbf29ef1cg54b7g4c65g9879g2a15e7090487', Converter={StaticResource TranslatedStringConverter}}"/>
                                    </MultiDataTrigger>

                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Type}" Value="LostControl"/>
                                            <Condition Binding="{Binding Value}" Value="Dying"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="Message" Property="Text" Value="{Binding Source='hbadf852cgd385g4b95g9ae5ga4af93905815', Converter={StaticResource TranslatedStringConverter}}"/>
                                    </MultiDataTrigger>

                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Type}" Value="LostControl"/>
                                            <Condition Binding="{Binding Value}" Value="StoryFrozen"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="Message" Property="Text" Value="{Binding Source='hbd5803f1g480cg4eb4g820fg242124c08ea9', Converter={StaticResource TranslatedStringConverter}}"/>
                                    </MultiDataTrigger>

                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding Type}" Value="LostControl"/>
                                            <Condition Binding="{Binding Value}" Value="LostControl"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter TargetName="Message" Property="Text" Value="{Binding Source='hd870788dg1d5dg42f3ga261g8580eec92784', Converter={StaticResource TranslatedStringConverter}}"/>
                                    </MultiDataTrigger>

                                    <DataTrigger Binding="{Binding Type}" Value="ReactionsBlocked">
                                        <Setter TargetName="Message" Property="Text" Value="{Binding Source='hae26bac2g2e14g4cccg8c47gd19467e488c6', Converter={StaticResource TranslatedStringConverter}}"/>
                                        <Setter TargetName="MessageBlock" Property="Visibility" Value="Visible"/>
                                    </DataTrigger>

                                    <DataTrigger Binding="{Binding Type}" Value="ResurrectedInThisTurn">
                                        <Setter TargetName="Message" Property="Text" Value="{Binding Source='h1ac301b7gce0ag4693gbba2gb912e5abe10e', Converter={StaticResource TranslatedStringConverter}}"/>
                                        <Setter TargetName="MessageBlock" Property="Visibility" Value="Visible"/>
                                    </DataTrigger>

                                    <DataTrigger Binding="{Binding Type}" Value="DisarmedInThisTurn">
                                        <Setter TargetName="Message" Property="Text" Value="{Binding Source='he4c05e4ag7e4eg46edgbc22g77fab2bddc2d', Converter={StaticResource TranslatedStringConverter}}"/>
                                        <Setter TargetName="MessageBlock" Property="Visibility" Value="Visible"/>
                                    </DataTrigger>

                                </DataTemplate.Triggers>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                    </ItemsControl>

                    <!-- Movement Bar -->
                    <Grid x:Name="MovementBar" Height="40" Margin="0,0,0,-16" DataContext="{Binding CurrentPlayer.UIData.MovementResourceCostPreview}" VerticalAlignment="Bottom" HorizontalAlignment="Center" Panel.ZIndex="2" Visibility="Collapsed" >

                        <ls:LSProgressBar Value="{Binding ActionResource.Value, Mode=OneWay}" Maximum="{Binding ActionResource.MaxValue}"
                                                                                      Minimum="0" Background="#E0000000"
                                                                                      Width="584" Height="14" Margin="0,8,0,0">
                            <ls:LSProgressBar.Foreground>
                                <LinearGradientBrush EndPoint="424,22" MappingMode="Absolute" >
                                    <LinearGradientBrush.RelativeTransform>
                                        <TransformGroup>
                                            <ScaleTransform CenterY="0.5" CenterX="0.5"/>
                                            <SkewTransform CenterY="0.5" CenterX="0.5"/>
                                            <RotateTransform Angle="90" CenterY="0.5" CenterX="0.5"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </LinearGradientBrush.RelativeTransform>
                                    <GradientStop Color="White" Offset="0" />
                                    <GradientStop Color="White" Offset="1"/>
                                </LinearGradientBrush>
                            </ls:LSProgressBar.Foreground>
                        </ls:LSProgressBar>


                        <ls:LSProgressBar Value="{Binding ValueAfterUse, Mode=OneWay}"  Maximum="{Binding ActionResource.MaxValue}"
                                                                                      Minimum="0" Background="Transparent"
                                                                                      Width="584" Height="14" Margin="0,8,0,0">
                            <ls:LSProgressBar.Foreground>
                                <LinearGradientBrush EndPoint="424,22" MappingMode="Absolute" >
                                    <LinearGradientBrush.RelativeTransform>
                                        <TransformGroup>
                                            <ScaleTransform CenterY="0.5" CenterX="0.5"/>
                                            <SkewTransform CenterY="0.5" CenterX="0.5"/>
                                            <RotateTransform Angle="90" CenterY="0.5" CenterX="0.5"/>
                                            <TranslateTransform/>
                                        </TransformGroup>
                                    </LinearGradientBrush.RelativeTransform>
                                    <GradientStop Color="{StaticResource MovementCol1}" Offset="0" />
                                    <GradientStop Color="{StaticResource MovementCol2}" Offset="1"/>
                                </LinearGradientBrush>
                            </ls:LSProgressBar.Foreground>
                        </ls:LSProgressBar>
                        <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/ActionResources_c/c_movementBar.png" Stretch="None" />
                    </Grid>
                    <!-- Action Resources -->
                    <ls:LSNineSliceImage x:Name="ActionResourceBar" Style="{StaticResource ResourceBar9Slice}" HorizontalAlignment="Center" Panel.ZIndex="1" >
                        <Grid VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0,-4,0,0" >
                            <Rectangle x:Name="ResourceBarBG" Height="Auto" VerticalAlignment="Stretch" Opacity="0.7" Margin="-30,-4,-30,-4" Panel.ZIndex="0">
                                <Rectangle.Fill>
                                    <LinearGradientBrush StartPoint="0,1" EndPoint="1,0">
                                        <GradientStop Offset="0" Color="#00000000" />
                                        <GradientStop Offset="0.1" Color="#0c0906"/>
                                        <GradientStop Offset="0.9" Color="#0c0906"/>
                                        <GradientStop Offset="1" Color="#00000000" />
                                    </LinearGradientBrush>
                                </Rectangle.Fill>
                            </Rectangle>
                            <Control x:Name="actionResourceBar" Template="{StaticResource ActionResourcesTemplate}" DataContext="{Binding CurrentPlayer.UIData.ActionResourcesCostPreview}" Width="Auto" VerticalAlignment="Bottom" IsEnabled="False" />
                        </Grid>
                    </ls:LSNineSliceImage>
                </StackPanel>
                
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Loaded">
                        <b:ControlStoryboardAction ControlStoryboardOption="Stop" Storyboard="{StaticResource HideResourceBarStoryboard}"/>
                    </b:EventTrigger>
                </b:Interaction.Triggers>
            </Grid>

            <ControlTemplate.Triggers>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.IsCurrentTurn}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="MovementBar" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.IsCurrentTurn}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Root" Property="IsEnabled" Value="True" />
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.IsCurrentTurn}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="CapabilitiesErrors" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="False"/>
                        <Condition Binding="{Binding CurrentPlayer.UIData.ActiveTask.RootCastSpell, Converter={StaticResource NullToBoolFalseConverter}, FallbackValue=False}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="Root" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="EndTurnButtonHolder" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="MovementBar" Property="Visibility" Value="Hidden"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.IsCurrentTurn}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.CanEndTurn}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.CanEndTurn}" Value="False"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="BackToPlayableCombatantButton" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.UIData.ActiveTask.CanForceCast}" Value="True">
                    <Setter TargetName="ForceCastButton" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="callForthAllies" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="ActionWheelButton" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.IsCurrentTurn}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.CanEndTurn}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="ActionWheelButton" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>
                
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.Stats.ActionResources[0].Value}" Value="0"/>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.Stats.ActionResources[1].Value}" Value="0"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="ActionWheelButton" Property="Opacity" Value="0.6"/>
                    <MultiDataTrigger.EnterActions>
                        <BeginStoryboard x:Name="StartGlowAnimation" Storyboard="{StaticResource GlowEndTurnButton}" />
                    </MultiDataTrigger.EnterActions>
                    <MultiDataTrigger.ExitActions>
                        <StopStoryboard BeginStoryboardName="StartGlowAnimation" />
                    </MultiDataTrigger.ExitActions>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.EndTurnRequested}" Value="True"/>
                        <Condition Binding="{Binding CurrentPlayer.SelectedCharacter.CanAct}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="CancelEndTurnButton" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="ActionWheelButton" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="EndTurnButtonHolder" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="callForthAllies" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding ParentState}" Value="MainPanels">
                    <Setter TargetName="ResourceContainer" Property="Visibility" Value="Visible"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding ActualHeight, ElementName=actionResourceBar, Converter={StaticResource GreaterThanConverter}, ConverterParameter=140}" Value="True">
                    <Setter TargetName="ResourceContainer" Property="Margin" Value="0,0,0,10"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding Layout}" Value="Left">
                    <Setter TargetName="resourceBarRightPadding" Property="Width" Value="200"/>
                    <Setter TargetName="resourceBarLeftPadding" Property="Width" Value="200"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding Layout}" Value="Right">
                    <Setter TargetName="resourceBarRightPadding" Property="Width" Value="200"/>
                    <Setter TargetName="resourceBarLeftPadding" Property="Width" Value="200"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding LowerUpcast, ElementName=UpcastBehavior, Converter={StaticResource NullToBoolTrueConverter}}" Value="False">
                    <Setter TargetName="UpcastContainer" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding HigherUpcast, ElementName=UpcastBehavior, Converter={StaticResource NullToBoolTrueConverter}}" Value="False">
                    <Setter TargetName="UpcastContainer" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.UIData.AreRadialsOpen}" Value="True">
                    <Setter TargetName="EndTurnButtonHolder" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="UpcastContainer" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="BackToPlayableCombatantButton" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="CancelEndTurnButton" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="ForceCastButton" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="ActionWheelButton" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="callForthAllies" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="CapabilitiesErrors" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="MovementBar" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="Root" Property="IsEnabled" Value="True" />
                    <Setter TargetName="actionResourceBar" Property="DataContext" Value="{Binding CurrentPlayer.UIData.ActionResourcesHoverCostPreview}"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.EndTurnRequested}" Value="True">
                    <Setter TargetName="EndTurnButton" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="EndTurnButton" Property="EatInput" Value="True"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.CanEndTurn}" Value="False">
                    <Setter TargetName="EndTurnButton" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="EndTurnButton" Property="EatInput" Value="True"/>
                </DataTrigger>
                <Trigger SourceName="UpcastContainer" Property="IsVisible" Value="False">
                    <Setter TargetName="LowerUpcast" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="HigherUpcast" Property="IsEnabled" Value="False"/>
                </Trigger>
                <Trigger SourceName="ResourceContainer" Property="IsVisible" Value="False">
                    <Setter TargetName="UpcastContainer" Property="Grid.Column" Value="1"/>
                </Trigger>

                <DataTrigger Binding="{Binding HasInputEnabled, ElementName=ActionResources_c}" Value="False">
                    <Setter TargetName="UpcastContainer" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="EndTurnButtonHolder" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="ActionWheelButton" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="callForthAllies" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="EndTurnButton" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="LaunchCallAlliesBtn" Property="IsEnabled" Value="False"/>
                </DataTrigger>

                <Trigger SourceName="Root" Property="IsEnabled" Value="True">
                    <Setter TargetName="Root" Property="Opacity" Value="1"/>
                    <Trigger.ExitActions>
                        <StopStoryboard BeginStoryboardName="ShowResourceBarBeginStoryboard" />
                        <BeginStoryboard x:Name="HideResourceBarBeginStoryboard" Storyboard="{StaticResource HideResourceBarStoryboard}"/>
                    </Trigger.ExitActions>
                    <Trigger.EnterActions>
                        <StopStoryboard BeginStoryboardName="HideResourceBarBeginStoryboard" />
                        <BeginStoryboard x:Name="ShowResourceBarBeginStoryboard" Storyboard="{StaticResource ShowResourceBarStoryboard}"/>
                    </Trigger.EnterActions>
                </Trigger>

                <DataTrigger Binding="{Binding CurrentPlayer.SelectedCharacter.InTurnBasedMode}" Value="True">
                    <Setter TargetName="ActionWheelButton" Property="Visibility" Value="Collapsed"/>
                    <DataTrigger.EnterActions>
                        <BeginStoryboard x:Name="callAlliesAnimation">
                            <BeginStoryboard.Storyboard>
                                <Storyboard AutoReverse="True" RepeatBehavior="Forever" FillBehavior="Stop" >
                                    <DoubleAnimation From="0" To="-360" Duration="0:0:5" RepeatBehavior="Forever" Storyboard.TargetProperty="(UIElement.RenderTransform).(RotateTransform.Angle)" Storyboard.TargetName="callAllliesSwirl"/>

                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="callAllliesSwirl" RepeatBehavior="Forever">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.2"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:4" Value="0.2"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:6" Value="0"/>
                                    </DoubleAnimationUsingKeyFrames>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(UIElement.Opacity)" Storyboard.TargetName="CallAlliesIcon" RepeatBehavior="Forever">
                                        <EasingDoubleKeyFrame KeyTime="0" Value="0.8"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:0.5" Value="1"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:1.5" Value="1"/>
                                        <EasingDoubleKeyFrame KeyTime="0:0:2" Value="0.8"/>
                                    </DoubleAnimationUsingKeyFrames>
                                  
                                </Storyboard>
                            </BeginStoryboard.Storyboard>
                        </BeginStoryboard>
                    </DataTrigger.EnterActions>
                    <DataTrigger.ExitActions>
                        <StopStoryboard BeginStoryboardName="callAlliesAnimation"/>
                    </DataTrigger.ExitActions>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Template>
</ls:UIWidget>

