<ls:UIWidget x:Name="Combine_c"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d"
             d:DesignHeight="2160" d:DesignWidth="3840"
             ls:UIWidget.UseCustomDC="True"
             ls:UIWidget.ContextName="Combine">

    <ls:UIWidget.Template>
        <ControlTemplate>
            <ControlTemplate.Resources>
                <!--overriding these to keep the old sizes since this ui doesn't support cell scaling yet-->
                <System:Double x:Key="ScaledNewItemIconSize">94</System:Double>
                <System:Double x:Key="ScaledNewItemIconSizeHighlight">96</System:Double>
                <System:Double x:Key="ScaledNewSlotSize">104</System:Double>
            </ControlTemplate.Resources>

            <Grid x:Name="RootCanvas" Background="{DynamicResource LS_PanelBackground}" ls:TooltipExtender.Owner="{Binding CurrentPlayer.SelectedCharacter}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Loaded">
                        <ls:LSPlaySound Sound="UI_HUD_Combine_Open"/>
                    </b:EventTrigger>
                    <b:DataTrigger Binding="{Binding CurrentState}" Value="Success">
                        <ls:LSPlaySound Sound="UI_HUD_Combine_Success"/>
                    </b:DataTrigger>
                    <b:DataTrigger Binding="{Binding CurrentState}" Value="Fail">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding FailReason}" Operator="Equal" RightOperand="Invalid"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_Combine_Failure"/>
                    </b:DataTrigger>
                    <b:DataTrigger Binding="{Binding CurrentState}" Value="Fail">
                        <b:Interaction.Behaviors>
                            <b:ConditionBehavior>
                                <b:ConditionalExpression>
                                    <b:ComparisonCondition LeftOperand="{Binding FailReason}" Operator="NotEqual" RightOperand="Invalid"/>
                                </b:ConditionalExpression>
                            </b:ConditionBehavior>
                        </b:Interaction.Behaviors>
                        <ls:LSPlaySound Sound="UI_HUD_Combine_Error"/>
                    </b:DataTrigger>
                </b:Interaction.Triggers>

                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared/mainpane_vignette.png" Stretch="Fill"/>

                <Grid x:Name="Container" HorizontalAlignment="Center" VerticalAlignment="Center">
                    <TextBlock Text="{Binding Source='h02ae15ceg643fg41cagadc2g6a4d624daaa2', Converter={StaticResource TranslatedStringConverter}}" FontSize="{DynamicResource TitleFontSize}" HorizontalAlignment="Center" VerticalAlignment="Top"/>
                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Combine_c/c_combinePanel.png" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,70,0,46"/>

                    <!-- Upper Area -->
                    <StackPanel x:Name="UpperArea" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0,190,0,0">
                        <!-- Slots -->
                        <ls:LSNineSliceImage x:Name="SlotsBackground" Height="272" Slices="50" HorizontalAlignment="Center" VerticalAlignment="Top" MinWidth="468" ImageSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_insert_frame.png">

                            <!-- Allow outer slots to partially clip out of the background image -->
                            <Grid Margin="-60,0">
                                <StackPanel x:Name="InputContainer" Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Visible">
                                    <!-- Base item -->
                                    <Grid>
                                        <Image x:Name="BG" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_itemHolderAlt.png" Stretch="None" />
                                        <Rectangle x:Name="Icon"  Fill="{Binding BaseItem.Icon}" Width="{DynamicResource ContInvSlotSize}" Height="{DynamicResource ContInvSlotSize}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Combine_c/c_ico_presetItem.png" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,132"/>
                                    </Grid>

                                    <!-- Ingredients -->
                                    <ls:LSListBox ItemsSource="{Binding Ingredients}" BorderThickness="0" Padding="0" AlternationCount="{Binding Ingredients.Count}">
                                        <ListBox.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </ListBox.ItemsPanel>
                                        <ls:LSListBox.ItemContainerStyle>
                                            <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate>
                                                            <Grid x:Name="Container" Background="Transparent">
                                                                <Grid.ToolTip>
                                                                    <ls:LSTooltip Content="{Binding Content, RelativeSource={RelativeSource TemplatedParent}}"/>
                                                                </Grid.ToolTip>
                                                                <Image x:Name="BG" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_itemHolderAlt.png" Stretch="None"/>
                                                                <Rectangle x:Name="Icon"  Fill="{Binding Icon}" Width="{DynamicResource ContInvSlotSize}" Height="{DynamicResource ContInvSlotSize}" HorizontalAlignment="Center"   VerticalAlignment="Center"/>
                                                                <!-- Negative margins to allow the + signs to overlap the other slots -->
                                                                <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Combine_c/c_ico_combinePlus.png" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center"  Margin="-30,0,140,0"/>
                                                                <Image x:Name="Border" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_gridFrame_selected.png" Stretch="None" HorizontalAlignment="Center"   VerticalAlignment="Center" Visibility="{Binding Path=Tag, ElementName=Border, Converter={StaticResource BoolToVisibleConverter}}">
                                                                    <Image.Tag>
                                                                        <MultiBinding Converter="{StaticResource EqualConverter}">
                                                                            <Binding Path="DataContext.SelectedIndex" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                                            <Binding Path="(ItemsControl.AlternationIndex)" RelativeSource="{RelativeSource AncestorType={x:Type ls:LSListBoxItem}}"/>
                                                                        </MultiBinding>
                                                                    </Image.Tag>
                                                                </Image>
                                                            </Grid>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Padding" Value="0"/>
                                                <Setter Property="BorderThickness" Value="0"/>
                                            </Style>
                                        </ls:LSListBox.ItemContainerStyle>
                                        <b:Interaction.Triggers>
                                            <b:EventTrigger EventName="LocalFocusChanged">
                                                <b:InvokeCommandAction Command="{Binding DataContext.ShowTooltipOnUIElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Path=LocalFocus,    ElementName=Inventory}"/>
                                            </b:EventTrigger>
                                        </b:Interaction.Triggers>
                                    </ls:LSListBox>
                                </StackPanel>

                                <!-- Result -->
                                <Grid x:Name="Result" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Collapsed">
                                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_itemHolderAlt.png" Stretch="None"/>
                                    <ls:LSEntityObject Width="{StaticResource ContInvSlotSize}" Height="{StaticResource ContInvSlotSize}" EntityRef="{Binding ResultItem.EntityHandle}" Background="{Binding ResultItem.Icon}"/>
                                </Grid>
                            </Grid>

                        </ls:LSNineSliceImage>

                        <!-- Feedback message -->
                        <StackPanel Orientation="Horizontal" HorizontalAlignment="Center" VerticalAlignment="Center" Margin="0,10,0,0">
                            <Image x:Name="FailIcon" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Combine_c/c_ico_combineFail.png" Stretch="None" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0,0,0,4" Visibility="Collapsed"/>
                            <TextBlock x:Name="FeedbackLabel" TextAlignment="Center" FontSize="{StaticResource DefaultFontSize}" HorizontalAlignment="Center" VerticalAlignment="Bottom" Foreground="{StaticResource LS_alertTxtColor}">
                                <TextBlock.Resources>
                                    <Style TargetType="ls:LSSpan" BasedOn="{StaticResource BaseSpanStyle}">
                                        <Style.Triggers>
                                            <Trigger Property="TagType" Value="hl">
                                                <Setter Property="Foreground" Value="{StaticResource LS_specialTxtColor}" />
                                            </Trigger>
                                        </Style.Triggers>
                                    </Style>
                                </TextBlock.Resources>
                            </TextBlock>
                        </StackPanel>
                    </StackPanel>

                    <!-- Arrow in the middle -->
                    <Image Source="pack://application:,,,/GustavNoesisGUI;component/Assets/ActiveRoll/addArrow.png" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="0,586,6,0"/>

                    <!-- Lower area -->
                    <Grid x:Name="LowerArea" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,296">
                        <TextBlock VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0,10,0,0" FontSize="{StaticResource MediumFontSize}" Foreground="{StaticResource LS_accent100TxtColor}">
                            <ls:TextBlockFormatter.SourceText>
                                <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                    <Binding Source="h7a65a00ag12fcg4f9ega5d5g1f596d0af5b5"/>
                                    <Binding Path="DataContext.CurrentPlayer.SelectedCharacter.Name" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                </MultiBinding>
                            </ls:TextBlockFormatter.SourceText>
                        </TextBlock>
                        <TextBlock Text="{Binding LocalFocus.DataContext.Object.Name, ElementName=Inventory}" VerticalAlignment="Top" HorizontalAlignment="Center" Margin="0,80,0,0" FontSize="{StaticResource DefaultFontSize}" Foreground="{StaticResource LS_specialTxtColor}"/>

                        <!--Inventory-->
                        <Grid x:Name="InventoryRoot" HorizontalAlignment="Center" VerticalAlignment="Top" Margin="70,170,0,0">
                            <b:Interaction.Behaviors>
                                <ls:CollectionSortBehavior x:Name="InventorySorted" ItemsSource="{Binding InventoriesSlots, ElementName=InventoriesMerger}" Comparer="{Binding DataContext.CurrentPlayer.InventorySortComparer, ElementName=Combine_c}"/>

                                <ls:InventoriesMergerBehavior x:Name="InventoriesMerger" Inventories="{Binding DataContext.CurrentPlayer.SelectedCharacter.Inventories, ElementName=Combine_c}"/>
                            </b:Interaction.Behaviors>

                            <ls:LSListBox x:Name="Inventory" ItemsSource="{Binding SortedItems, ElementName=InventorySorted}" Background="Transparent" BorderThickness="0" Height="608" Width="810" VerticalAlignment="Top" HorizontalAlignment="Center" InitialFocusIndex="0" LocalFocusSelector="{Binding ElementName=Selector, Mode=OneWay}" >
                                <ls:LSListBox.Template>
                                    <ControlTemplate>
                                        <ScrollViewer Template="{StaticResource ScrollViewerTemplate}" Padding="20,0,0,0" VerticalScrollBarVisibility="Visible" HorizontalAlignment="Right" HorizontalScrollBarVisibility="Disabled">
                                            <ItemsPresenter/>
                                        </ScrollViewer>
                                    </ControlTemplate>
                                </ls:LSListBox.Template>

                                <ls:LSListBox.ItemContainerStyle >
                                    <Style TargetType="ls:LSListBoxItem" BasedOn="{StaticResource InvContainerListBoxItemStyle}">
                                        <Setter Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate>
                                                    <Grid Width="{DynamicResource ContItemIconSize}" Height="{DynamicResource ContItemIconSize}" DataContext="{Binding Object}">
                                                        <ls:LSEntityObject EntityRef="{Binding EntityHandle}" Background="{Binding Icon}">
                                                            <Image Style="{StaticResource InventoryWaresCellItemImageStyle}"/>
                                                            <Label Style="{StaticResource InventoryCellLabelStyle}"  IsHitTestVisible="False"/>
                                                        </ls:LSEntityObject>
                                                        <Image x:Name="SelectedImg" Source="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_gridFrame_selected.png" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Center" Visibility="Hidden">
                                                            <Image.Tag>
                                                                <MultiBinding Converter="{StaticResource EqualConverter}">
                                                                    <Binding Path="DataContext.BaseItem" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                                    <Binding Path="DataContext" RelativeSource="{RelativeSource AncestorType={x:Type ls:LSListBoxItem}}"/>
                                                                </MultiBinding>
                                                            </Image.Tag>
                                                        </Image>
                                                    </Grid>
                                                    <DataTemplate.Triggers>
                                                        <DataTrigger Binding="{Binding Object.IsSelected}" Value="True">
                                                            <Setter TargetName="SelectedImg" Property="Visibility" Value="Visible"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding Path=Tag, RelativeSource={RelativeSource Self}}" Value="True">
                                                            <Setter TargetName="SelectedImg" Property="Visibility" Value="Visible"/>
                                                        </DataTrigger>
                                                    </DataTemplate.Triggers>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="Background" Value="Transparent"/>
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Setter Property="Padding" Value="2"/>
                                        <Setter Property="MouseRightClickEnabled" Value="False"/>
                                        <Setter Property="SelectOnMouseUp" Value="True"/>
                                        <Setter Property="ContextMenu">
                                            <Setter.Value>
                                                <ls:ContextMenu Style="{StaticResource BaseLSContextMenu}">
                                                    <ls:ContextMenuItem x:Name="AddRemove" Command="{Binding DataContext.ToggleItemCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Object}">
                                                        <ls:ContextMenuItem.Tag>
                                                            <MultiBinding Converter="{StaticResource EqualConverter}">
                                                                <Binding Path="DataContext.BaseItem" RelativeSource="{RelativeSource AncestorType={x:Type ls:UIWidget}}"/>
                                                                <Binding Path="Item"/>
                                                            </MultiBinding>
                                                        </ls:ContextMenuItem.Tag>
                                                        <ls:ContextMenuItem.Style>
                                                            <Style TargetType="ls:ContextMenuItem" BasedOn="{StaticResource BaseLSContextMenuItem}">
                                                                <Setter Property="Header" Value="{Binding Source='h7d5baf41g4783g4677g8f91g2144a7c3c6a0', Converter={StaticResource TranslatedStringConverter}}"/>
                                                                <Style.Triggers>
                                                                    <DataTrigger Binding="{Binding IsSelected}" Value="True">
                                                                        <Setter Property="Header" Value="{Binding Source='h66f5f06ag1874g4161g950dg86f429b26401', Converter={StaticResource TranslatedStringConverter}}"/>
                                                                    </DataTrigger>
                                                                    <MultiDataTrigger>
                                                                        <MultiDataTrigger.Conditions>
                                                                            <Condition Binding="{Binding IsSelected}" Value="False"/>
                                                                            <Condition Binding="{Binding DataContext.SelectedIndex, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="-1"/>
                                                                        </MultiDataTrigger.Conditions>
                                                                        <Setter Property="IsEnabled" Value="False"/>
                                                                    </MultiDataTrigger>
                                                                    <!-- If item == base item, act like 'remove' but don't allow interaction -->
                                                                    <DataTrigger Binding="{Binding Path=Tag, ElementName=AddRemove}" Value="True">
                                                                        <Setter Property="Header" Value="{Binding Source='h66f5f06ag1874g4161g950dg86f429b26401', Converter={StaticResource TranslatedStringConverter}}"/>
                                                                        <Setter Property="IsEnabled" Value="False"/>
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding DataContext.CurrentState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Working">
                                                                        <Setter Property="IsEnabled" Value="False"/>
                                                                    </DataTrigger>
                                                                    <DataTrigger Binding="{Binding DataContext.CurrentState, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" Value="Success">
                                                                        <Setter Property="IsEnabled" Value="False"/>
                                                                    </DataTrigger>
                                                                </Style.Triggers>
                                                            </Style>
                                                        </ls:ContextMenuItem.Style>
                                                    </ls:ContextMenuItem>
                                                    <ls:ContextMenuItem Header="{Binding Source='hc173e425geb02g4f20ga119g2cf1bd75643b', Converter={StaticResource TranslatedStringConverter}}" Command="{Binding DataContext.ExamineCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding EntityHandle}" />

                                                </ls:ContextMenu>
                                            </Setter.Value>
                                        </Setter>
                                    </Style>
                                </ls:LSListBox.ItemContainerStyle>

                                <ls:LSListBox.ItemsPanel>
                                    <ItemsPanelTemplate>
                                        <ls:LSGrid x:Name="ContainerGrid" Columns="6" Rows="5" noesis:Element.PPAAMode="Disabled" SnapsToDevicePixels="True" CellWidth="{DynamicResource ContInvSlotSize}" CellHeight="{DynamicResource ContInvSlotSize}" Background="{StaticResource ContInventoryCell2x2Brush}" VerticalSpacing="{DynamicResource ContInvSpacing}" DisableScrolling="False" HorizontalSpacing="{DynamicResource ContInvSpacing}" ActionUpEvent="UIUp" ActionDownEvent="UIDown" ActionRightEvent="UIRight" ActionLeftEvent="UILeft" ExtendedRows="False" AutoIndex="True"/>
                                    </ItemsPanelTemplate>
                                </ls:LSListBox.ItemsPanel>

                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="LocalFocusChanged">
                                        <b:InvokeCommandAction Command="{Binding DataContext.ShowTooltipOnUIElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding Path=LocalFocus, ElementName=Inventory}"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSListBox>
                            <Control x:Name="Selector" IsHitTestVisible="False" VerticalAlignment="Top" HorizontalAlignment="Left" Template="{StaticResource SelectorTemplate}" Panel.ZIndex="1000" />
                        </Grid>
                    </Grid>

                    <!-- Confirm -->
                    <Grid HorizontalAlignment="Center" VerticalAlignment="Bottom">
                        <ls:LSButton x:Name="btnCombine" Margin="0,-10,0,110"
                                         Template="{StaticResource PrimaryButtonTemplate}"
							             Command="{Binding DataContext.StartActionCommand, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ls:UIWidget}}}"
							             ls:LSButton.BoundEvent="UITakeAll"
							             ContentTemplate="{StaticResource ControllerButtonHint}"
							             Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UITakeAll'}"
							             Tag="{Binding Source='h02ae15ceg643fg41cagadc2g6a4d624daaa2', Converter={StaticResource TranslatedStringConverter}}"
							             VerticalAlignment="Center" Width="Auto" HorizontalAlignment="Center"
                                         IsEnabled="False"/>
                    </Grid>
                </Grid>

                <!-- Button hints -->
                <StackPanel x:Name="ControllerHints" Style="{StaticResource ButtonHint.Container.Center}">
                    <b:Interaction.Behaviors>
                        <ls:CollectionContainsItemBehavior x:Name="FocusIsIngredient" ItemSource="{Binding LocalFocus.DataContext.Object, ElementName=Inventory}" CollectionSource="{Binding Ingredients}"/>
                    </b:Interaction.Behaviors>

                    <ls:LSButton x:Name="btnAddRemove" BoundEvent="UIAccept" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIAccept, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source='h7d5baf41g4783g4677g8f91g2144a7c3c6a0', Converter={StaticResource TranslatedStringConverter}}" EatInput="False" TapTime="{StaticResource DefaultButtonTapTime}" Command="{Binding ToggleItemCommand}" CommandParameter="{Binding LocalFocus.DataContext.Object, ElementName=Inventory}" />

                    <ls:LSButton x:Name="ContextMenuBtn" BoundEvent="ContextMenu" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=ContextMenu, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source='heb4b592bgc665g4e17ga685g07e2eb5e25db', Converter={StaticResource TranslatedStringConverter}}" Command="{Binding ShowContextMenu}" CommandParameter="{Binding LocalFocus, ElementName=Inventory}" IsEnabled="{Binding LocalFocus, ElementName=Inventory, Converter={StaticResource NullToBoolFalseConverter}}"/>

                    <ls:LSButton x:Name="TooltipBtn" BoundEvent="UIShowInfo" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UIShowInfo, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source='hdb3826d2gfc2bg4cc3gb654gf80410859c3f',Converter={StaticResource TranslatedStringConverter}}" Command="{Binding ToggleTooltipOnUIElement}" CommandParameter="{Binding Path=LocalFocus, ElementName=Inventory}" IsEnabled="{Binding LocalFocus, ElementName=Inventory, Converter={StaticResource NullToBoolFalseConverter}}"/>

                    <ls:LSButton x:Name="btnSort" BoundEvent="UISort" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UISort, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source='hce314911gcae3g4345gbc5ag201bc976a594',Converter={StaticResource TranslatedStringConverter}}">
                        <b:Interaction.Triggers>
                            <b:EventTrigger EventName="LSButtonReleased" SourceName="btnSort">
                                <b:InvokeCommandAction Command="{Binding OpenSortInventory}"/>
                                <b:InvokeCommandAction Command="{Binding HideTooltipOnUIElement}"/>
                            </b:EventTrigger>
                        </b:Interaction.Triggers>
                    </ls:LSButton>

                    <ls:LSButton x:Name="Cancel" BoundEvent="UICancel" ContentTemplate="{StaticResource ControllerButtonHint}" Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UICancel, Converter={StaticResource FindInputEventConverter}}" Tag="{Binding Source='h411fb88eg5261g437aga291g2fb260e633c6',Converter={StaticResource TranslatedStringConverter}}" Command="{Binding CustomEvent}"  CommandParameter="CloseWidget" SoundID="UI_Shared_Cancel"/>

                    <ls:LSInputBinding x:Name="PinTooltipBinding" Style="{StaticResource PinTooltipBindingStyle}"/>
                </StackPanel>
            </Grid>

            <ControlTemplate.Triggers>
                <DataTrigger Binding="{Binding LocalFocus, ElementName=Inventory}" Value="{x:Null}">
                    <Setter TargetName="btnAddRemove" Property="IsEnabled" Value="False"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding Result, ElementName=FocusIsIngredient}" Value="True">
                    <Setter TargetName="btnAddRemove" Property="Tag" Value="{Binding Source='h66f5f06ag1874g4161g950dg86f429b26401', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
                <!-- If selection == base item, and it isn't a stack, act like 'remove' but don't allow interaction -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Value="True">
                            <Condition.Binding>
                                <MultiBinding Converter="{StaticResource EqualConverter}">
                                    <Binding Path="BaseItem"/>
                                    <Binding Path="LocalFocus.DataContext.Object" ElementName="Inventory"/>
                                </MultiBinding>
                            </Condition.Binding>
                        </Condition>
                        <Condition Binding="{Binding LocalFocus.DataContext.Object.Count, ElementName=Inventory}" Value="1"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="btnAddRemove" Property="Tag" Value="{Binding Source='h66f5f06ag1874g4161g950dg86f429b26401', Converter={StaticResource TranslatedStringConverter}}"/>
                    <Setter TargetName="btnAddRemove" Property="IsEnabled" Value="False"/>
                </MultiDataTrigger>

                <!-- No more adding when all slots are filled -->
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding LocalFocus.DataContext.Object.IsSelected, ElementName=Inventory}" Value="False"/>
                        <Condition Binding="{Binding SelectedIndex}" Value="-1"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="btnAddRemove" Property="IsEnabled" Value="False"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding CurrentState}" Value="Success">
                    <Setter TargetName="btnAddRemove" Property="Command" Value="{Binding CustomEvent}"/>
                    <Setter TargetName="btnAddRemove" Property="CommandParameter" Value="CloseWidget"/>
                    <Setter TargetName="btnAddRemove" Property="Tag" Value="{Binding Source='h45db0d8cg465fg4c1dg8c21gc894286fa41e', Converter={StaticResource TranslatedStringConverter}}"/>
                    <Setter TargetName="btnAddRemove" Property="IsEnabled" Value="True"/>
                    <Setter TargetName="FeedbackLabel" Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                    <Setter TargetName="FeedbackLabel" Property="ls:TextBlockFormatter.SourceText">
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource ParameterizedTranslatedStringConverter}">
                                <Binding Source="h95958a84g3e7dg4615ga30cg345d06df7cb9"/>
                                <Binding Path="ResultItem.Name"/>
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentState}" Value="Working">
                    <Setter TargetName="btnAddRemove" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="Cancel" Property="IsEnabled" Value="False"/>
                    <Setter TargetName="FeedbackLabel" Property="Foreground" Value="{StaticResource LS_accent100TxtColor}"/>
                    <Setter TargetName="FeedbackLabel" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h3ce43cb2gfecdg4a73g88feg68817006cd8d', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentState}" Value="Ready">
                    <Setter TargetName="btnCombine" Property="IsEnabled" Value="True"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentState}" Value="Fail">
                    <Setter TargetName="FailIcon" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="SlotsBackground" Property="ImageSource" Value="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_insert_frameFail.png"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding CurrentState}" Value="Success">
                    <Setter TargetName="Result" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="InputContainer" Property="Visibility" Value="Hidden"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding FailReason}" Value="Invalid">
                    <Setter TargetName="FeedbackLabel" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h47f58fa7g6e37g42fag8408gd89ae7856b9d', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding FailReason}" Value="TooFar">
                    <Setter TargetName="FeedbackLabel" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h1371c0f2g99ccg47a3g8012g9c240aec2b50', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding FailReason}" Value="NotAllFilled">
                    <Setter TargetName="FeedbackLabel" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h2a223e63g1953g4a41gb631gfe287b044889', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding FailReason}" Value="Duplicate">
                    <Setter TargetName="FeedbackLabel" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h85a8d808g354ag4709g8dbfg39437b3403e7', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding FailReason}" Value="BaseNotFound">
                    <Setter TargetName="FeedbackLabel" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h84799792gde2eg4c66g8a6bgc6ae05feaa02', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding FailReason}" Value="IngredientNotFound">
                    <Setter TargetName="FeedbackLabel" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h90ce0538g95a1g4d73gb5c5g54a4dae1c4e9', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding FailReason}" Value="Interrupted">
                    <Setter TargetName="FeedbackLabel" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='he3d62e55g4ed3g49fagb679ge4d9ef4a50b8', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding FailReason}" Value="NotEmptySlot">
                    <Setter TargetName="FeedbackLabel" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='he1c084aag96c0g4716gb47cge9f7e6e5b69d', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding FailReason}" Value="IngredientAlreadyAdded">
                    <Setter TargetName="FeedbackLabel" Property="ls:TextBlockFormatter.SourceText" Value="{Binding Source='h5a6c11e8gf30eg4543g8cb4ge288199d523d', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Template>
</ls:UIWidget>