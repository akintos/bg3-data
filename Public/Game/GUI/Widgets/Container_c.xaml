<ls:UIWidget x:Name="Container_c"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:b="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:ls="clr-namespace:ls;assembly=SharedGUI"
             xmlns:noesis="clr-namespace:NoesisGUIExtensions;assembly=Noesis.GUI.Extensions"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:System="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d"
             d:DesignHeight="2160" d:DesignWidth="3840"
             ls:UIWidget.ContextName="ContainerInventory"
             CanCacheFocusSurroundingElements="False"
             FocusDown="UIDown" FocusLeft="UILeft" FocusRight="UIRight" FocusUp="UIUp">
    <ls:UIWidget.Template>
        <ControlTemplate>
            <ControlTemplate.Resources>
                <BitmapImage x:Key="TabImageSelected" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_listItemSelected_narrow_centered.png" />
                <BitmapImage x:Key="WeightIconImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_weight.png" />
                <BitmapImage x:Key="ToggleBgImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_toggle_bg.png" />
                <BitmapImage x:Key="InventoryIconImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_ico_header_inventory.png" />
                <BitmapImage x:Key="CallToActionImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_callToAction_wide_bg.png" />
                <BitmapImage x:Key="PanelTopImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_panel_top_carousel.png" />
                <BitmapImage x:Key="PanelBottomImage" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_panel_bottom.png" />
                <BitmapImage x:Key="PanelBg" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_panel_bg.png" />
                <BitmapImage x:Key="ContainerDivider" UriSource="pack://application:,,,/GustavNoesisGUI;component/Assets/Shared_c/c_container_divider.png" />

                <ControlTemplate x:Key="Template.InventoryContainer" TargetType="ListBoxItem">
                    <ls:LSEntityObject x:Name="CellRoot" Context="{Binding (ls:ContextMenuService.Context) , RelativeSource={RelativeSource Mode=TemplatedParent}}" ls:ContextMenuService.GenerateEnabled="False" DataContext="{Binding Object}" EntityRef="{Binding EntityHandle}" Background="{TemplateBinding Background}" ToolTipService.Placement="Right" ToolTipService.HorizontalOffset="0" ToolTipService.VerticalOffset="110" Focusable="True" ls:MoveFocus.Focusable="True" Tag="">
                        <ls:LSEntityObject.ToolTip>
                            <ls:LSTooltip Content="{Binding DataContext.Object,RelativeSource={RelativeSource Mode=TemplatedParent}}"/>
                        </ls:LSEntityObject.ToolTip>
                        <b:Interaction.Behaviors>
                            <ls:ContextMenuFillBehavior Context="{Binding (ls:ContextMenuService.Context) , RelativeSource={RelativeSource Mode=TemplatedParent} }" Player="{Binding DataContext.CurrentPlayer, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" TargetObject="{Binding .}" Source="{Binding SelectedItems,RelativeSource={RelativeSource AncestorType=ListBox}}" Command="{Binding DataContext.ContextActionPressed, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                        </b:Interaction.Behaviors>
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding Path=(ls:MoveFocus.IsFocused), ElementName=CellRoot}" Value="True">
                                <b:InvokeCommandAction Command="{Binding DataContext.ClearItemNewFlag, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}" CommandParameter="{Binding .}"/>
                                <ls:LSPlaySound Sound="UI_Shared_Hover"/>
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                        <ContentPresenter  IsHitTestVisible="False"/>
                        <Image x:Name="SelectOverlay" Source="{StaticResource InvSlot_SelectionOverlay}" IsHitTestVisible="False" Visibility="Hidden" />
                        <Image x:Name="FocusOverlay" Source="{StaticResource InvSlot_Selector}" IsHitTestVisible="False" Visibility="Hidden" />
                    </ls:LSEntityObject>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="SelectOverlay" Property="Visibility" Value="Visible" />
                            <!--can be removed if we get the focusedElement on the ListboxItem-->
                            <Setter TargetName="CellRoot" Property="Tag" Value="IsSelected"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="FocusOverlay" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>

                <!--overriding these to keep the old sizes since this ui doesn't support cell scaling yet-->
                <System:Double x:Key="ScaledNewItemIconSize">102</System:Double>
                <System:Double x:Key="ScaledNewItemIconSizeHighlight">104</System:Double>
                <System:Double x:Key="ScaledNewSlotSize">112</System:Double>
            </ControlTemplate.Resources>

            <Grid Background="{StaticResource LS_PanelBackground}" ls:TooltipExtender.Owner="{Binding CurrentPlayer.SelectedCharacter}">
                <b:Interaction.Triggers>
                    <b:EventTrigger EventName="Loaded">
                        <b:InvokeCommandAction Command="{Binding Path=DataContext.DismissNotification, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"/>
                    </b:EventTrigger>

                    <b:PropertyChangedTrigger Binding="{Binding FocusedElement, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}">
                        <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding Path=FocusedElement, ElementName=Container_c}"/>
                    </b:PropertyChangedTrigger>
                    <b:DataTrigger Binding="{Binding HasInputEnabled, ElementName=Container_c}" Value="True">
                        <b:InvokeCommandAction Command="{Binding ShowTooltipOnUIElement}" CommandParameter="{Binding FocusedElement, ElementName=Container_c}"/>
                    </b:DataTrigger>

                    <b:DataTrigger Binding="{Binding (ls:MoveFocus.IsKeyboardFocusWithin), ElementName=ContainerListBox}" Value="False">
                        <b:ChangePropertyAction TargetName="ContainerListBox" PropertyName="SelectedIndex" Value="-1" />
                    </b:DataTrigger>
                    <b:DataTrigger Binding="{Binding (ls:MoveFocus.IsKeyboardFocusWithin), ElementName=CharacterListBox}" Value="False">
                        <b:ChangePropertyAction TargetName="CharacterListBox" PropertyName="SelectedIndex" Value="-1" />
                    </b:DataTrigger>
                </b:Interaction.Triggers>
                <Grid HorizontalAlignment="Center" VerticalAlignment="Bottom" x:Name="panelHolder" Margin="0,0,0,500">
                    <ls:LSNineSliceImage  x:Name="SortPanel" IsEnabled="False" Panel.ZIndex="200" VerticalAlignment="Bottom" Margin="0,0,0,200" HorizontalAlignment="Center" Visibility="Collapsed" Style="{StaticResource DefaultTooltip9Slice}">

                        <StackPanel Margin="40,80,40,80">
                            <TextBlock Text="{Binding Source='h809e08f9g0ae8g4057g8941g245023916247', Converter={StaticResource TranslatedStringConverter}}"  HorizontalAlignment="Center" Margin="0,0,0,20" />
                           
                            <Grid>
                                <Image x:Name="TabBG" Source="{StaticResource TabImageSelected}" Stretch="None" />
                                <ls:LSComboBox x:Name="sortComboBox" ItemsSource="{Binding CurrentPlayer.UIData.InventorySortOptions}" SelectedItem="{Binding ContainerSortOption}" Style="{StaticResource ComboBoxStyle}"  ActionNextEvent="UIRight" ActionPrevEvent="UILeft"  HorizontalAlignment="Center" VerticalAlignment="Center" Width="500" Focusable="True" ls:MoveFocus.Focusable="True">
                                <ls:LSComboBox.ItemTemplate>
                                    <DataTemplate DataType="ls:VMEnumData">
                                        <TextBlock Text="{Binding Name}"  />
                                    </DataTemplate>
                                </ls:LSComboBox.ItemTemplate>
                                <b:Interaction.Triggers>
                                    <b:EventTrigger EventName="SelectionChanged">
                                        <b:Interaction.Behaviors>
                                            <b:ConditionBehavior>
                                                <b:ConditionalExpression>
                                                    <b:ComparisonCondition LeftOperand="{Binding ElementName=PlayerInvToggle , Path=IsChecked}" Operator="Equal" RightOperand="True" />
                                                </b:ConditionalExpression>
                                            </b:ConditionBehavior>
                                        </b:Interaction.Behaviors>
                                        <b:InvokeCommandAction Command="{Binding SortCharacterInventoryCommand}" CommandParameter="{Binding ElementName=sortComboBox, Path=SelectedItem}"/>
                                    </b:EventTrigger>
                                </b:Interaction.Triggers>
                            </ls:LSComboBox>
                            </Grid>
                            

                        </StackPanel>
                        <b:Interaction.Triggers>
                            <b:DataTrigger Binding="{Binding ElementName=SortPanel, Path=IsVisible}" Value="True">
                                <ls:SetMoveFocusAction TargetName="Container_c" FocusElement="{Binding ElementName=sortComboBox}" />
                            </b:DataTrigger>
                        </b:Interaction.Triggers>
                       
                    </ls:LSNineSliceImage>

                    <Grid >
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition Height="Auto"/>
                        </Grid.RowDefinitions>

                        <Image Grid.Row="1" Source="{StaticResource PanelTopImage}" Stretch="None" VerticalAlignment="Top" Margin="0,0,0,0" />
                        <ListBox Grid.Row="0" Height="230" x:Name="ContainerHeaderList" SelectedItem="{Binding CurrentPlayer.UIData.CurrentContainer}" ItemsSource="{Binding CurrentPlayer.ContainerInventoryList}"  VerticalAlignment="Bottom" HorizontalAlignment="Center" MaxWidth="1020" ScrollViewer.VerticalScrollBarVisibility="Disabled" Margin="0,0,0,-40" Panel.ZIndex="11">
                            <ListBox.Resources>
                                <Style TargetType="ScrollBar" BasedOn="{StaticResource SimpleScrollBar}"/>
                            </ListBox.Resources>
                            <ListBox.ItemTemplate>
                                <DataTemplate DataType="{x:Type ls:VMGameObject}">
                                    <ls:LSEntityObject x:Name="object" EntityRef="{Binding EntityHandle}"  Background="{Binding Icon}" Width="128" Height="128"/>
                                    <DataTemplate.Triggers>
                                        <DataTrigger Binding="{Binding Type}" Value="Character">
                                            <Setter TargetName="object" Property="Height" Value="198"/>
                                        </DataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Type}" Value="Item"/>
                                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}},Path=IsSelected}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="object" Property="Height" Value="140"/>
                                            <Setter TargetName="object" Property="Width" Value="140"/>
                                        </MultiDataTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Type}" Value="Character"/>
                                                <Condition Binding="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType={x:Type ListBoxItem}},Path=IsSelected}" Value="True"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="object" Property="Height" Value="216"/>
                                            <Setter TargetName="object" Property="Width" Value="140"/>
                                        </MultiDataTrigger>
                                    </DataTemplate.Triggers>
                                </DataTemplate>
                            </ListBox.ItemTemplate>
                            <ListBox.ItemContainerStyle>
                                <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                    <Setter Property="Padding" Value="0"/>
                                    <Setter Property="BorderThickness" Value="0"/>
                                    <Setter Property="Focusable" Value="False"/>
                                    <Setter Property="VerticalAlignment" Value="Top"/>
                                    <Setter Property="Margin" Value="20 0 20 8"/>
                                    <Setter Property="Opacity" Value="0.8"/>
                                    <Setter Property="Template">
                                        <Setter.Value>
                                            <ControlTemplate>
                                                <Grid x:Name="holder">
                                                    <ContentPresenter />
                                                </Grid>
                                            </ControlTemplate>
                                        </Setter.Value>
                                    </Setter>
                                    <Style.Triggers>
                                        <Trigger Property="IsSelected" Value="True">
                                            <Setter Property="Margin" Value="20 8 20 0"/>
                                            <Setter Property="Opacity" Value="1"/>
                                        </Trigger>
                                    </Style.Triggers>
                                </Style>
                            </ListBox.ItemContainerStyle>

                            <ListBox.ItemsPanel>
                                <ItemsPanelTemplate>
                                    <StackPanel Orientation="Horizontal" />
                                </ItemsPanelTemplate>
                            </ListBox.ItemsPanel>
                        </ListBox>

                        <Grid Grid.Row="1" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Margin="0,20,0,40" Panel.ZIndex="0">
                            <Grid.Background>
                                <ImageBrush ImageSource="{StaticResource PanelBg}"/>
                            </Grid.Background>
                        </Grid>
                        <Grid Grid.Row="1" HorizontalAlignment="Center" Height="1084" Width="1800" Panel.ZIndex="1" Name="Inventory" >
                            <Grid Panel.ZIndex="1" Background="Transparent" Margin="0,28,0,0">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="*"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto"/>
                                    <RowDefinition Height="*"/>
                                </Grid.RowDefinitions>

                                <Grid Grid.ColumnSpan="2" Grid.Column="0" Grid.Row="0" HorizontalAlignment="Center"  >
                                    <Grid.Resources>
                                        <Style x:Key="InvObjName" TargetType="TextBlock">
                                            <Setter Property="HorizontalAlignment" Value="Center" />
                                            <Setter Property="Foreground" Value="{StaticResource LS_PrimaryColor}" />
                                            <Setter Property="FontSize" Value="{StaticResource TitleFontSize}" />
                                        </Style>
                                        <Style x:Key="InvSelectionName" TargetType="TextBlock">
                                            <Setter Property="HorizontalAlignment" Value="Center" />
                                            <Setter Property="Foreground" Value="{StaticResource LS_ActivePanelFontColor}" />
                                            <Setter Property="FontSize" Value="{StaticResource LargeFontSize}" />
                                            <Setter Property="Margin" Value="0,6,0,18" />
                                            <Setter Property="TextWrapping" Value="Wrap" />
                                            <Setter Property="MaxWidth" Value="810" />
                                        </Style>
                                    </Grid.Resources>
                                    <StackPanel x:Name="ListHolder" Orientation="Horizontal" Tag="ContainerFocussed">
                                        <StackPanel.Resources>
                                            <Style TargetType="ListBox" BasedOn="{StaticResource {x:Type ListBox}}">
                                                <Setter Property="ItemTemplate" Value="{StaticResource Template.ContainerCell}"/>
                                                <Setter Property="Width" Value="806"/>
                                                <Setter Property="Height" Value="608"/>
                                                <Setter Property="VirtualizingPanel.VirtualizationMode" Value="Recycling"/>
                                                <Setter Property="VirtualizingPanel.ScrollUnit" Value="Pixel"/>
                                                <Setter Property="ls:MultiSelect.IsEnabled" Value="False"/>
                                                <Setter Property="SelectionMode" Value="Multiple"/>
                                                <Setter Property="VerticalAlignment" Value="Top"/>
                                                <Setter Property="HorizontalAlignment" Value="Center"/>
                                                <Setter Property="ItemsPanel">
                                                    <Setter.Value>
                                                        <ItemsPanelTemplate>
                                                            <ls:LSGrid x:Name="ContainerGrid" Columns="6" Rows="5"  ContainerData="{Binding CurrentPlayer.UIData.CurrentContainer.LootInventory}"
                                                                       noesis:Element.PPAAMode="Disabled" SnapsToDevicePixels="True"  CellWidth="{DynamicResource ScaledNewSlotSize}"
                                                                       CellHeight="{DynamicResource ScaledNewSlotSize}" Background="{StaticResource ContInventoryCell2x2Brush}"
                                                                       VerticalSpacing="{DynamicResource ContInvSpacing}" DisableScrolling="False"  HorizontalSpacing="{DynamicResource ContInvSpacing}"
                                                                       ActionUpEvent="UIUp" ActionDownEvent="UIDown" ActionRightEvent="UIRight" ActionLeftEvent="UILeft"
                                                                       UseWidgetNavigation="True" WidgetChainedNavigation="True"
                                                                       ls:MoveFocus.InternalFocusable="True"  WidgetNavigationMarkerBrush="{StaticResource NavigableGridMarkerBrush}">
                                                            </ls:LSGrid>
                                                        </ItemsPanelTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                            </Style>
                                        </StackPanel.Resources>
                                        <Grid>
                                            <Grid.RowDefinitions>
                                                <RowDefinition Height="250" />
                                                <RowDefinition Height="Auto"/>
                                            </Grid.RowDefinitions>
                                            <StackPanel VerticalAlignment="Center" HorizontalAlignment="Center">
                                                <TextBlock x:Name="containerName" Text="{Binding CurrentPlayer.UIData.CurrentContainer.Name}" Style="{StaticResource InvObjName}"/>
                                                <TextBlock x:Name="containerSelectionName" Text="{Binding Path=FocusedElement.DataContext.Name, ElementName=Container_c}" Style="{StaticResource InvSelectionName}" TextAlignment="Center" TextTrimming="CharacterEllipsis" MaxHeight="100"/>
                                            </StackPanel>
                                            <ListBox Grid.Row="1" x:Name="ContainerListBox" ItemsSource="{Binding CurrentPlayer.UIData.CurrentContainer.LootInventory.Slots}" Margin="0,0,68,0">
                                                <ListBox.ItemContainerStyle>
                                                    <Style TargetType="ListBoxItem" BasedOn="{StaticResource InvContainerListBoxItemStyle}">
                                                        <Setter Property="Template" Value="{StaticResource Template.InventoryContainer}"/>
                                                    </Style>
                                                </ListBox.ItemContainerStyle>
                                                <ListBox.Template>
                                                    <ControlTemplate TargetType="ListBox">
                                                        <ScrollViewer VerticalScrollBarVisibility="Auto" Padding="14,0,0,0" HorizontalAlignment="Right" Template="{StaticResource FlippedScrollViewerTemplate}" HorizontalScrollBarVisibility="Disabled" CanContentScroll="True">
                                                            <ScrollViewer.Resources>
                                                                <Style TargetType="ScrollBar" BasedOn="{StaticResource GoldScrollBar}"/>
                                                            </ScrollViewer.Resources>
                                                            <ItemsPresenter  />
                                                        </ScrollViewer>
                                                    </ControlTemplate>
                                                </ListBox.Template>
                                                <b:Interaction.Triggers>
                                                    <b:PropertyChangedTrigger Binding="{Binding ElementName=PlayerInvToggle,Path=IsChecked}">
                                                        <ls:SetMoveFocusAction TargetName="Container_c"/>
                                                    </b:PropertyChangedTrigger>
                                                </b:Interaction.Triggers>
                                            </ListBox>
                                        </Grid>
                                        <StackPanel Orientation="Horizontal" x:Name="PlayerInv" Visibility="{Binding ElementName=PlayerInvToggle , Path=IsChecked, Converter={StaticResource BoolToVisibleConverter}}">
                                            <ls:LSNineSliceImage Margin="-64,160,0,-40" ImageSource="{StaticResource ContainerDivider}" Slices="0 120 0 120" Width="52" HorizontalAlignment="Stretch" />
                                            <Grid>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition Height="250" />
                                                    <RowDefinition Height="Auto"/>
                                                </Grid.RowDefinitions>
                                                <StackPanel VerticalAlignment="Center">
                                                    <TextBlock x:Name="looterName" Text="{Binding CurrentPlayer.SelectedCharacter.Name}" Style="{StaticResource InvObjName}" />
                                                    <TextBlock x:Name="looterSelectionName" Text="{Binding Path=FocusedElement.DataContext.Name, ElementName=Container_c}" Style="{StaticResource InvSelectionName}" TextAlignment="Center" TextTrimming="CharacterEllipsis" MaxHeight="100"/>
                                                </StackPanel>
                                                <StackPanel Grid.Row="1">
                                                    <ListBox x:Name="CharacterListBox" ItemsSource="{Binding CurrentPlayer.SelectedCharacter.Inventory.Slots}" Visibility="{Binding ElementName=PlayerInvToggle , Path=IsChecked, Converter={StaticResource BoolToVisibleConverter}}" >
                                                        <b:Interaction.Triggers>
                                                            <b:EventTrigger EventName="FocusChanged">
                                                                <b:InvokeCommandAction Command="{Binding UpdateCanMoveToContainerCommand.ActionCommand}">
                                                                    <b:InvokeCommandAction.CommandParameter>
                                                                        <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                                            <Binding ElementName="Container_c" Path="FocusedElement"/>
                                                                            <Binding ElementName="ToggleMultiSelectButton" Path="Content"/>
                                                                        </MultiBinding>
                                                                    </b:InvokeCommandAction.CommandParameter>
                                                                </b:InvokeCommandAction>
                                                            </b:EventTrigger>
                                                        </b:Interaction.Triggers>
                                                        <ListBox.ItemContainerStyle>
                                                            <Style TargetType="ListBoxItem" BasedOn="{StaticResource BaseInvContainerItemStyle}">
                                                                <Setter Property="ls:ContextMenuService.Context" Value="Inventory"/>
                                                                <Setter Property="Template" Value="{StaticResource Template.InventoryContainer}"/>
                                                            </Style>
                                                        </ListBox.ItemContainerStyle>
                                                        <ListBox.Template>
                                                            <ControlTemplate>
                                                                <ScrollViewer VerticalScrollBarVisibility="Auto" Padding="36,0,0,0" HorizontalAlignment="Left" Template="{StaticResource ScrollViewerTemplate}" HorizontalScrollBarVisibility="Disabled" CanContentScroll="True">
                                                                    <ScrollViewer.Resources>
                                                                        <Style TargetType="ScrollBar" BasedOn="{StaticResource GoldScrollBar}"/>
                                                                    </ScrollViewer.Resources>
                                                                    <ItemsPresenter  />
                                                                </ScrollViewer>
                                                            </ControlTemplate>
                                                        </ListBox.Template>
                                                    </ListBox>
                                                    <StackPanel x:Name="weightTextHolder" Orientation="Horizontal" Margin="0,18,0,-120" HorizontalAlignment="Left" VerticalAlignment="Center">
                                                        <StackPanel.Resources>
                                                            <Style TargetType="TextBlock" >
                                                                <Setter Property="FontWeight" Value="Bold" />
                                                                <Setter Property="VerticalAlignment" Value="Top" />
                                                                <Setter Property="Foreground" Value="{StaticResource LS_ActivePanelFontColor}" />
                                                                <Setter Property="FontSize" Value="{DynamicResource MediumFontSize}" />
                                                            </Style>
                                                        </StackPanel.Resources>
                                                        <Image VerticalAlignment="Center" Source="{StaticResource WeightIconImage}" Stretch="None" Margin="0,0,8,8"/>
                                                        <TextBlock Text="{Binding CurrentPlayer.SelectedCharacter.Inventory.Weight, Converter={StaticResource UnitConverter}, ConverterParameter='Weight'}" FontSize="{DynamicResource DefaultFontSize}"  Foreground="{StaticResource LS_PrimaryColor}"/>
                                                        <TextBlock Text="/" Margin="2,0,2,0"/>
                                                        <TextBlock Text="{Binding CurrentPlayer.SelectedCharacter.EncumbranceStats.WeightMaximum, Converter={StaticResource UnitConverter}, ConverterParameter='Weight'}" Margin="0,2,0,0"/>
                                                    </StackPanel>
                                                </StackPanel>
                                            </Grid>
                                        </StackPanel>

                                        <b:Interaction.Triggers>
                                            <b:EventTrigger EventName="Loaded">
                                                <ls:SetMoveFocusAction TargetName="Container_c" FocusElement="{Binding ElementName=ContainerListBox}"/>
                                               
                                            </b:EventTrigger>
                                            <!--using weightTextHolder cause it gets it's IsEnabled set after the lists so we can be sure the lsgrids are focussable-->
                                            <b:DataTrigger Binding="{Binding ElementName=weightTextHolder, Path=IsEnabled}" Value="True">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding ElementName= ListHolder, Path=Tag}" Operator="Equal" RightOperand="ContainerFocussed" />
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <ls:SetMoveFocusAction TargetName="Container_c" FocusElement="{Binding ElementName=ContainerListBox}" />
                                            </b:DataTrigger>
                                            <b:DataTrigger Binding="{Binding ElementName=weightTextHolder, Path=IsEnabled}" Value="True">
                                                <b:Interaction.Behaviors>
                                                    <b:ConditionBehavior>
                                                        <b:ConditionalExpression>
                                                            <b:ComparisonCondition LeftOperand="{Binding ElementName= ListHolder, Path=Tag}" Operator="Equal" RightOperand="PlayerFocussed" />
                                                        </b:ConditionalExpression>
                                                    </b:ConditionBehavior>
                                                </b:Interaction.Behaviors>
                                                <ls:SetMoveFocusAction TargetName="Container_c" FocusElement="{Binding ElementName=CharacterListBox}" />
                                            </b:DataTrigger>
                                            <b:DataTrigger Binding="{Binding ElementName=ContainerListBox,Path=(ls:MoveFocus.IsKeyboardFocusWithin)}" Value="True">
                                                <b:ChangePropertyAction TargetName="ListHolder" PropertyName="Tag" Value="ContainerFocussed" />
                                            </b:DataTrigger>
                                            <b:DataTrigger Binding="{Binding ElementName=CharacterListBox,Path=(ls:MoveFocus.IsKeyboardFocusWithin)}" Value="True">
                                                <b:ChangePropertyAction TargetName="ListHolder" PropertyName="Tag" Value="PlayerFocussed" />
                                            </b:DataTrigger>
                                        </b:Interaction.Triggers>
                                    </StackPanel>
                                </Grid>

                                <ls:LSToggleButton Grid.Column="1" Grid.Row="1" Margin="550,0,0,74" ClipToBounds="False" VerticalAlignment="Bottom" HorizontalAlignment="Left"
                                                   x:Name="PlayerInvToggle"
                                                   SoundID="UI_HUD_Extract"
                                                   IsChecked="{Binding CurrentPlayer.UIData.OpenExtractedInventoryOnContainer}"
                                                   Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UITabNext'}"
                                                   BoundEvent="UITabNext" >
                                    <ls:LSToggleButton.Template>
                                        <ControlTemplate TargetType="ls:LSToggleButton">
                                            <Grid HorizontalAlignment="Left">
                                                <Image x:Name="bg" Source="{StaticResource ToggleBgImage}" Stretch="None" HorizontalAlignment="Left" Margin="46,10,0,0"/>
                                                <Image x:Name="chest" Source="{StaticResource InventoryIconImage}" Stretch="None" Opacity="{StaticResource DisabledOpacity}" Margin="152,6,0,0"/>
                                                <ContentPresenter x:Name="btn" Content="{TemplateBinding Content}" ContentTemplate="{StaticResource ControllerButtonHint}" Tag=" " HorizontalAlignment="Left" Margin="12,0,0,0" />
                                            </Grid>
                                            <ControlTemplate.Triggers>
                                                <Trigger Property="IsChecked" Value="True">
                                                    <Trigger.Setters>
                                                        <Setter Property="Opacity" Value="1.0" TargetName="chest"/>
                                                    </Trigger.Setters>
                                                    <Trigger.EnterActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <ThicknessAnimation Duration="0:0:0.1" Storyboard.TargetName="btn" Storyboard.TargetProperty="Margin" To="60,0,0,0"/>
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </Trigger.EnterActions>
                                                    <Trigger.ExitActions>
                                                        <BeginStoryboard>
                                                            <Storyboard>
                                                                <ThicknessAnimation Duration="0:0:0.1" Storyboard.TargetName="btn" Storyboard.TargetProperty="Margin" To="12,0,0,0"/>
                                                            </Storyboard>
                                                        </BeginStoryboard>
                                                    </Trigger.ExitActions>
                                                </Trigger>
                                            </ControlTemplate.Triggers>
                                        </ControlTemplate>
                                    </ls:LSToggleButton.Template>
                                </ls:LSToggleButton>
                            </Grid>
                        </Grid>
                    </Grid>
                    <Image Source="{StaticResource PanelBottomImage}" Stretch="None" VerticalAlignment="Bottom" />
                </Grid>

                <Image Source="{StaticResource CallToActionImage}" Stretch="None" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,-46,0,108" >
                    <Image.RenderTransform>
                        <ScaleTransform ScaleY="-1" />
                    </Image.RenderTransform>
                </Image>

                <ls:LSButton x:Name="TakeAllBtn"
                             Template="{StaticResource PrimaryButtonTemplate}"
                             ContentTemplate="{StaticResource ControllerButtonHint}" 
                             Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UITakeAll'}" 
                             Tag="{Binding Source='h1cc89290gfa2eg406cg9e5bg75a612b65633', Converter={StaticResource TranslatedStringConverter}}" 
                             Command="{Binding DataContext.TakeAllAndCloseCommand.ActionCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                             BoundEvent="UITakeAll"
                             HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="0,0,0,452" 
                />

                <Grid x:Name="ButtonHolder" HorizontalAlignment="Center" VerticalAlignment="Bottom" Margin="24,0,0,28" Panel.ZIndex="8" Tag="Main">
                    <Grid.Resources>
                        <Style TargetType="ls:LSButton" BasedOn="{StaticResource {x:Type ls:LSButton}}">
                            <Setter Property="ContentTemplate" Value="{StaticResource  ControllerButtonHint}"/>
                        </Style>
                    </Grid.Resources>
                    <StackPanel x:Name="MainButtons" IsEnabled="True" Style="{StaticResource ButtonHint.Container.Center}">
                        <StackPanel x:Name="PickUpButtonHolder" Orientation="Horizontal">
                            <ls:LSButton x:Name="PickUpButton" 
                                         Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
                                         Tag="{Binding Source='h6e6da963gfbc2g4748g992bg703411291b7b', Converter={StaticResource TranslatedStringConverter}}" 
                                         Command="{Binding TakeItemCommand.ActionCommand}"
                                         BoundEvent="UIAccept"
                                         IsEnabled="{Binding  (ls:MoveFocus.IsKeyboardFocusWithin), ElementName=ContainerListBox}"
                                         TapTime="{StaticResource DefaultButtonTapTime}" >
                                <ls:LSButton.CommandParameter>
                                    <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                        <Binding ElementName="Container_c" Path="FocusedElement" />
                                        <Binding ElementName="ContainerListBox" Path="SelectedItems" />
                                    </MultiBinding>
                                </ls:LSButton.CommandParameter>
                            </ls:LSButton>
                            <TextBlock x:Name="PickUpButtonText" FontWeight="Bold" Text="{Binding ElementName=ToggleMultiSelectButton,Path=Content.Count,StringFormat={}({0})}" VerticalAlignment="Center" Visibility="Collapsed"/>
                        </StackPanel>
                        <ls:LSButton x:Name="DropButton" 
                                     Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
                                     Tag="{Binding Source='h4ca4e695g98ebg48beg96b4g5cbf484e640d', Converter={StaticResource TranslatedStringConverter}}"
                                     Command="{Binding DropGameObject}"
                                     CommandParameter="{Binding FocusedElement.DataContext, ElementName=Container_c}"
                                     BoundEvent="UIAccept"
                                     Visibility="Collapsed"
                                     IsEnabled="{Binding (ls:MoveFocus.IsKeyboardFocusWithin),ElementName=ContainerListBox}"
                                     TapTime="{StaticResource DefaultButtonTapTime}" />
                        <ls:LSButton x:Name="ActionButton" 
	                                 Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
	                                 Tag="{Binding  FocusedElement.DataContext, ElementName=Container_c, Converter={StaticResource GetUseActionConverter}}" 
	                                 Command="{Binding UseGameObject}"
	                                 CommandParameter="{Binding FocusedElement.DataContext, ElementName=Container_c}"
	                                 BoundEvent="UIAccept"
	                                 Visibility="Collapsed"
	                                 IsEnabled="{Binding (ls:MoveFocus.IsKeyboardFocusWithin),ElementName=CharacterListBox}"
	                                 TapTime="{StaticResource DefaultButtonTapTime}" />

                        <StackPanel x:Name="MoveToButtonHolder" Orientation="Horizontal" Visibility="{Binding (ls:MoveFocus.IsKeyboardFocusWithin),ElementName=CharacterListBox,Converter={StaticResource BoolToVisibleConverter}}" >
                            <ls:LSButton x:Name="MoveToButton" Content="{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
                                         Tag="{Binding Source='ha79bea24gc6b1g456egbcffg85345181359d', Converter={StaticResource TranslatedStringConverter}}"
                                         TapTime="{StaticResource DefaultButtonTapTime}" Command="{Binding ItemMoveToContainerCommand}" BoundEvent="UIAccept">
                                <ls:LSButton.CommandParameter>
                                    <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                        <Binding ElementName="Container_c" Path="FocusedElement" />
                                        <Binding ElementName="ToggleMultiSelectButton" Path="Content" />
                                    </MultiBinding>
                                </ls:LSButton.CommandParameter>
                            </ls:LSButton>
                            <TextBlock x:Name="MoveToButtonText" FontWeight="Bold" Text="{Binding ElementName=ToggleMultiSelectButton,Path=Content.Count,StringFormat={}({0})}" VerticalAlignment="Center" Visibility="Collapsed"/>
                        </StackPanel>

                        <ls:LSButton x:Name="ToggleMultiSelectButton" Content="{Binding Path=SelectedItems,ElementName=ContainerListBox}" Tag="{Binding FocusedElement, ElementName=Container_c}" Style="{StaticResource ToggleMultiSelectButtonStyle}">
                            <b:Interaction.Triggers>
                                <b:PropertyChangedTrigger Binding="{Binding Content.Count, ElementName=ToggleMultiSelectButton}">
                                    <b:Interaction.Behaviors>
                                        <b:ConditionBehavior>
                                            <b:ConditionalExpression>
                                                <b:ComparisonCondition LeftOperand="{Binding (ls:MoveFocus.IsKeyboardFocusWithin), ElementName=CharacterListBox}" Operator="Equal" RightOperand="True"/>
                                            </b:ConditionalExpression>
                                        </b:ConditionBehavior>
                                    </b:Interaction.Behaviors>
                                    <b:InvokeCommandAction Command="{Binding UpdateCanMoveToContainerCommand.ActionCommand}">
                                        <b:InvokeCommandAction.CommandParameter>
                                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                                <Binding ElementName="Container_c" Path="FocusedElement"/>
                                                <Binding ElementName="ToggleMultiSelectButton" Path="Content"/>
                                            </MultiBinding>
                                        </b:InvokeCommandAction.CommandParameter>
                                    </b:InvokeCommandAction>
                                </b:PropertyChangedTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>

                        <ls:LSButton Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='ContextMenu'}"
                                     Tag="{Binding Source='heb4b592bgc665g4e17ga685g07e2eb5e25db', Converter={StaticResource TranslatedStringConverter}}"
                                     Command="{Binding ShowContextMenu}"
                                     CommandParameter="{Binding FocusedElement, ElementName=Container_c}"
                                     BoundEvent="ContextMenu"
                                     Visibility="{Binding FocusedElement, ElementName=Container_c,Converter={StaticResource NullToCollapsedConverter}}"/>

                        <ls:LSButton Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UISort'}"
                                     BoundEvent="UISort"
                                     Tag="{Binding Source='hce314911gcae3g4345gbc5ag201bc976a594',Converter={StaticResource TranslatedStringConverter}}"
                                     x:Name="SortButton" TapTime="{StaticResource DefaultButtonTapTime}">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="LSButtonReleased" >
                                    <b:ChangePropertyAction TargetName="ButtonHolder" PropertyName="Tag" Value="SortPopup" />
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>

                        <ls:LSButton x:Name="ToggleTooltips"
                                     Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIShowInfo'}"
                                     Tag="{Binding Source='hf8dd4c2fg97e0g4ccdgac1ag3cd1fe5060ef',Converter={StaticResource TranslatedStringConverter}}" 
                                     Command="{Binding ToggleTooltipOnUIElement}" 
                                     BoundEvent="UIShowInfo"
                                     CommandParameter="{Binding Path=FocusedElement, ElementName=Container_c}"
                                     IsEnabled="{Binding  FocusedElement.DataContext, ElementName=Container_c, Converter={StaticResource NullToBoolFalseConverter}}"/>

	                    <ls:LSButton x:Name="CancelMultiSelectButton"
	                                 BoundEvent="UICancel"
	                                 Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UICancel, Converter={StaticResource FindInputEventConverter}}"
	                                 Tag="{Binding Source='h43f0dd5cg543cg46f5gaa87g4f14f4803cd1', Converter={StaticResource TranslatedStringConverter}}"
	                                 Visibility="Collapsed">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="Click" >
                                    <b:ChangePropertyAction TargetName="ContainerListBox" PropertyName="SelectedIndex" Value="-1" />
                                    <b:ChangePropertyAction TargetName="CharacterListBox" PropertyName="SelectedIndex" Value="-1" />
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>

                        <ls:LSButton x:Name="CloseWidgetButton" 
                                     BoundEvent="UICancel"
                                     ContentTemplate="{StaticResource ControllerButtonHint}"
                                     Content="{Binding CurrentPlayer.UIData.InputEvents, ConverterParameter=UICancel, Converter={StaticResource FindInputEventConverter}}"
                                     Tag="{Binding Source='hff1685e4g3845g4846g99bfg219ae73ce55d', Converter={StaticResource TranslatedStringConverter}}" 
                                     Command="{Binding CloseWidgetCommand.ActionCommand}"
                                     SoundID="UI_Shared_Cancel" />

                        <ls:LSInputBinding x:Name="PinTooltipBinding" Style="{StaticResource PinTooltipBindingStyle}"/>
                    </StackPanel>

                    <StackPanel Orientation="Horizontal" x:Name="SortButtons" Visibility="Collapsed" IsEnabled="False" Style="{StaticResource ButtonHint.Container.Center}">
                        <ls:LSButton Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UIAccept'}"
                                     Tag="{Binding Source='hce314911gcae3g4345gbc5ag201bc976a594', Converter={StaticResource TranslatedStringConverter}}"
                                     Command="{Binding DataContext.SortCharacterInventoryCommand, RelativeSource={RelativeSource AncestorType={x:Type ls:UIWidget}}}"
                                     CommandParameter="{Binding ElementName=sortComboBox, Path=SelectedItem}"
                                     BoundEvent="UIAccept">
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="LSButtonReleased" >
                                    <b:ChangePropertyAction TargetName="ButtonHolder" PropertyName="Tag" Value="Main" />
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>

                        <ls:LSButton Content = "{Binding CurrentPlayer.UIData.InputEvents, Converter={StaticResource FindInputEventConverter}, ConverterParameter='UICancel'}"
                                     Tag="{Binding Source='hff1685e4g3845g4846g99bfg219ae73ce55d', Converter={StaticResource TranslatedStringConverter}}" 
                                     BoundEvent="UICancel"
                                     SoundID="UI_Shared_Cancel" >
                            <b:Interaction.Triggers>
                                <b:EventTrigger EventName="LSButtonReleased" >
                                    <b:ChangePropertyAction TargetName="ButtonHolder" PropertyName="Tag" Value="Main" />
                                </b:EventTrigger>
                            </b:Interaction.Triggers>
                        </ls:LSButton>
                    </StackPanel>
                </Grid>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger SourceName="ButtonHolder" Property="Tag" Value="SortPopup">
                    <Setter TargetName="SortPanel" Property="Visibility" Value="Visible" />
                    <Setter TargetName="SortPanel" Property="IsEnabled" Value="True" />
                </Trigger>
                <DataTrigger Binding="{Binding SelectedItems.Count,ElementName=CharacterListBox,Converter={StaticResource GreaterThanConverter},ConverterParameter=1}" Value="True">
                    <Setter TargetName="CharacterListBox" Property="ls:MultiSelect.IsEnabled" Value="True"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding SelectedItems.Count,ElementName=ContainerListBox,Converter={StaticResource GreaterThanConverter},ConverterParameter=1}" Value="True">
                    <Setter TargetName="ContainerListBox" Property="ls:MultiSelect.IsEnabled" Value="True"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding ShowUIElementTooltip}" Value="True">
                    <Setter TargetName="ToggleTooltips" Property="Tag" Value="{Binding Source='hb33ec471gd611g4ee3gbbffg699af8f79167', Converter={StaticResource TranslatedStringConverter}}"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding CanMoveToContainer}" Value="False">
                    <Setter TargetName="MoveToButton" Property="IsEnabled" Value="False"/>
                </DataTrigger>

                <DataTrigger Binding="{Binding (ls:MoveFocus.IsKeyboardFocusWithin), ElementName=CharacterListBox}" Value="True" >
                    <Setter TargetName="PickUpButtonHolder" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding FocusedElement.Tag, ElementName=Container_c}" Value="IsSelected">
                    <Setter TargetName="PickUpButtonText" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="MoveToButtonText" Property="Visibility" Value="Visible"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding FocusedElement, ElementName=Container_c}" Value="{x:Null}">
                    <Setter TargetName="PickUpButtonText" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="MoveToButtonText" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="MoveToButton" Property="IsEnabled" Value="False"/>
                </DataTrigger>
                <DataTrigger Binding="{Binding ElementName=ToggleMultiSelectButton,Path=Content.Count}" Value="0">
                    <Setter TargetName="PickUpButtonText" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="MoveToButtonText" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>

                <Trigger Property="ls:MoveFocus.IsKeyboardFocusWithin" Value="True" SourceName="ContainerListBox">
                    <Setter TargetName="looterSelectionName" Property="Text" Value="" />
                </Trigger>
                <Trigger Property="ls:MoveFocus.IsKeyboardFocusWithin" Value="True" SourceName="CharacterListBox">
                    <Setter TargetName="containerSelectionName" Property="Text" Value="" />
                    <Setter TargetName="ToggleMultiSelectButton" Property="Content" Value="{Binding ElementName=CharacterListBox, Path=SelectedItems}" />
                    <Setter TargetName="PickUpButton" Property="CommandParameter" >
                        <Setter.Value>
                            <MultiBinding Converter="{StaticResource PassThroughConverter}">
                                <Binding ElementName="Container_c" Path="FocusedElement" />
                                <Binding ElementName="CharacterListBox" Path="SelectedItems" />
                            </MultiBinding>
                        </Setter.Value>
                    </Setter>
                </Trigger>
                
                <!--ButtonHolder Triggers Begin-->
                <Trigger SourceName="ButtonHolder" Property="Tag" Value="SortPopup">

                    <Setter Property="IsEnabled" Value="False" TargetName="ListHolder" />
                    <Setter Property="Visibility" TargetName="MainButtons" Value="Collapsed" />
                    <Setter Property="IsEnabled" TargetName="MainButtons" Value="False" />
                    <Setter Property="Visibility" TargetName="SortButtons" Value="Visible" />
                    <Setter Property="IsEnabled" TargetName="SortButtons" Value="True" />
                </Trigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsSubContainer}" Value="False"/>
                        <Condition Binding="{Binding (ls:MoveFocus.IsKeyboardFocusWithin), ElementName=ContainerListBox}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="PickUpButtonHolder" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsSubContainer}" Value="True"/>
                        <Condition Binding="{Binding IsChecked, ElementName=PlayerInvToggle}" Value="False"/>
                        <Condition Binding="{Binding (ls:MoveFocus.IsKeyboardFocusWithin), ElementName=ContainerListBox}" Value="True"/>
                        <Condition Binding="{Binding ElementName=ToggleMultiSelectButton,Path=Content.Count, Converter={ StaticResource GreaterThanConverter}, ConverterParameter=1}" Value="False"/>
                    </MultiDataTrigger.Conditions>

                    <Setter TargetName="PickUpButtonHolder" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="ActionButton" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="ActionButton" Property="IsEnabled" Value="True"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsSubContainer}" Value="True"/>
                        <Condition Binding="{Binding IsChecked, ElementName=PlayerInvToggle}" Value="True"/>
                        <Condition Binding="{Binding (ls:MoveFocus.IsKeyboardFocusWithin), ElementName=ContainerListBox}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="PickUpButtonHolder" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="ActionButton" Property="Visibility" Value="Collapsed"/>
                </MultiDataTrigger>

                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding IsSubContainer}" Value="True"/>
                        <Condition Binding="{Binding (ls:MoveFocus.IsKeyboardFocusWithin), ElementName=ContainerListBox}" Value="True"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="PickUpButton" Property="Tag" Value="{Binding Source='ha79bea24gc6b1g456egbcffg85345181359d', Converter={StaticResource TranslatedStringConverter}}"/>
                </MultiDataTrigger>
                <DataTrigger Binding="{Binding FocusedElement.DataContext, ElementName=Container_c, Converter={StaticResource TypeConverter}}" Value="gui::DCContainerInventory" >
                    <Setter TargetName="MoveToButtonHolder" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="PickUpButtonHolder" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="ActionButton" Property="Visibility" Value="Collapsed"/>
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding  (ls:MoveFocus.IsKeyboardFocusWithin),ElementName=CharacterListBox}" Value="False"/>
                        <Condition Binding="{Binding FocusedElement.DataContext.ItemType, ElementName=Container_c}" Value="Book"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="MoveToButtonHolder" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="PickUpButtonHolder" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="ActionButton" Property="Visibility" Value="Visible"/>
                    <Setter TargetName="ActionButton" Property="IsEnabled" Value="True"/>
                </MultiDataTrigger>

                <DataTrigger Binding="{Binding CurrentPlayer.UIData.CurrentContainer.IsAvatarContainer}" Value="True">
                    <Setter TargetName="TakeAllBtn" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="PickUpButtonHolder" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="PlayerInvToggle" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="ToggleMultiSelectButton" Property="Visibility" Value="Collapsed"/>
                    
                </DataTrigger>
                <MultiDataTrigger>
                    <MultiDataTrigger.Conditions>
                        <Condition Binding="{Binding CurrentPlayer.UIData.CurrentContainer.IsAvatarContainer}" Value="True"/>
                        <Condition Binding="{Binding (ls:MoveFocus.IsKeyboardFocusWithin), ElementName=ContainerListBox}" Value="True"/>
                        <Condition Binding="{Binding FocusedElement.DataContext.Type, ElementName=Container_c}" Value="Character"/>
                    </MultiDataTrigger.Conditions>
                    <Setter TargetName="DropButton" Property="Visibility" Value="Visible"/>
                </MultiDataTrigger>

                <!--ButtonHolder Triggers End-->

                <Trigger SourceName="CharacterListBox" Property="ls:MultiSelect.IsEnabled" Value="True">
                    <Setter TargetName="CharacterListBox" Property="KeyboardNavigation.DirectionalNavigation" Value="Contained"/>
                    <Setter TargetName="CloseWidgetButton" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="CancelMultiSelectButton" Property="Visibility" Value="Visible"/>
                </Trigger>
                <Trigger SourceName="ContainerListBox" Property="ls:MultiSelect.IsEnabled" Value="True">
                    <Setter TargetName="ContainerListBox" Property="KeyboardNavigation.DirectionalNavigation" Value="Contained"/>
                    <Setter TargetName="CloseWidgetButton" Property="Visibility" Value="Collapsed"/>
                    <Setter TargetName="CancelMultiSelectButton" Property="Visibility" Value="Visible"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ls:UIWidget.Template>

    <b:Interaction.Triggers>
        <b:EventTrigger EventName="Unloaded">
            <ls:LSPlaySound Sound="UI_HUD_Shared_Close"/>
        </b:EventTrigger>
        <b:EventTrigger EventName="FocusChanged">
            <ls:LSPlaySound Sound="UI_Shared_Hover"/>
        </b:EventTrigger>
    </b:Interaction.Triggers>
</ls:UIWidget>